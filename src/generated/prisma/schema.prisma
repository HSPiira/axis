// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Represents an authenticated user in the system.
model User {
  id            String    @id @default(cuid()) // Primary user ID.
  name          String? // Full name from identity provider or manually set.
  email         String?   @unique // Email address, usually from the provider.
  emailVerified DateTime? // Date/time email was verified.
  image         String? // Profile image URL.
  createdAt     DateTime  @default(now()) // Timestamp of user creation.
  updatedAt     DateTime  @updatedAt // Timestamp of last update.

  // Relations
  accounts  Account[] // Linked social/enterprise accounts.
  sessions  Session[] // Active sessions for this user.
  userRoles UserRole[] // Roles assigned to the user.
  Document  Document[]
  auditLogs AuditLog[] // Audit logs created by this user
}

/// Links a user to an external identity provider (Microsoft, GitHub, etc).
model Account {
  id                String  @id @default(cuid()) // Unique account ID.
  userId            String // FK to User.
  type              String // Account type ('oauth', 'oidc', etc).
  provider          String // Provider name (e.g. 'microsoft').
  providerAccountId String // User ID on the provider side.
  refresh_token     String? // OAuth refresh token.
  access_token      String? // OAuth access token.
  expires_at        Int? // Expiry timestamp (UNIX).
  token_type        String? // Type of token (Bearer, etc).
  scope             String? // OAuth scopes.
  id_token          String? // ID token (JWT).
  session_state     String? // Used for OIDC session management.

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation to User.

  @@unique([provider, providerAccountId]) // Prevents duplicates per provider+user combo.
}

/// Stores active sessions for stateless authentication (JWT or DB).
model Session {
  id           String   @id @default(cuid()) // Unique session ID.
  sessionToken String   @unique // Token stored in cookie.
  userId       String // FK to User.
  expires      DateTime // Expiration date of session.

  user User @relation(fields: [userId], references: [id])
}

/// Used for email/passwordless login flows or account recovery.
model VerificationToken {
  identifier String // Email or phone identifier.
  token      String   @unique // One-time token (sent via email/SMS).
  expires    DateTime // Expiration timestamp.

  @@unique([identifier, token]) // Ensures no reuse per email/token combo.
}

/// Represents a group of permissions (e.g. 'Admin', 'Manager', 'User').
model Role {
  id          String  @id @default(cuid()) // Unique role ID.
  name        String  @unique // Role name.
  description String? // Optional description.

  permissions RolePermission[] // Assigned permissions.
  users       UserRole[] // Users with this role.
}

/// Represents a single action a user can perform (e.g. 'view_users', 'edit_asset').
model Permission {
  id          String  @id @default(cuid()) // Unique permission ID.
  name        String  @unique // Permission name/code.
  description String? // Optional details.

  roles RolePermission[] // Roles that include this permission.
}

/// Pivot table assigning permissions to roles.
model RolePermission {
  id           String @id @default(cuid()) // Unique ID.
  roleId       String // FK to Role.
  permissionId String // FK to Permission.

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId]) // Prevent duplicate entries.
}

/// Assigns one or more roles to a user.
model UserRole {
  id     String @id @default(cuid()) // Unique ID.
  userId String // FK to User.
  roleId String // FK to Role.

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId]) // Prevent duplicate role assignments.
}

/// Represents an industry classification
model Industry {
  id          String     @id @default(cuid())
  name        String     @unique // Industry name
  code        String?    @unique // Optional industry code (e.g., NAICS, SIC)
  description String? // Optional description
  parentId    String? // Reference to parent industry for hierarchical structure
  parent      Industry?  @relation("IndustryHierarchy", fields: [parentId], references: [id])
  children    Industry[] @relation("IndustryHierarchy")

  organizations Organization[] // Organizations in this industry

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([code])
  @@index([parentId])
}

/// Represents a client or partner organization in the system
model Organization {
  id            String    @id @default(cuid())
  name          String // Organization's legal name
  email         String? // Primary contact email
  phone         String? // Primary contact phone
  address       String? // Physical address
  contactPerson String? // Primary contact person's name
  contactEmail  String? // Contact person's email
  contactPhone  String? // Contact person's phone
  industryId    String? // Reference to primary industry
  industry      Industry? @relation(fields: [industryId], references: [id])
  status        OrgStatus @default(ACTIVE) // Current status of the organization
  notes         String? // Additional notes or comments
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  contracts     Contract[] // Active contracts with this organization
  Document      Document[] // Documents associated with this organization
  KPI           KPI[]
  KPIAssignment KPIAssignment[]

  @@index([status]) // Index for faster status-based queries
  @@index([name]) // Index for faster name-based searches
  @@index([email]) // Index for faster email lookups
  @@index([industryId]) // Index for faster industry-based queries
}

/// Represents a service contract between the organization and a client
model Contract {
  id             String       @id @default(cuid())
  organizationId String // Reference to the organization
  organization   Organization @relation(fields: [organizationId], references: [id])

  startDate   DateTime // Contract start date
  endDate     DateTime // Contract end date
  renewalDate DateTime? // Optional date when contract can be renewed
  billingRate Float // Rate charged for services
  isRenewable Boolean   @default(true) // Whether the contract can be renewed

  // Payment tracking fields
  paymentFrequency String? // How often payments are made (monthly, quarterly, etc.)
  paymentTerms     String? // Payment terms (net 30, net 60, etc.)
  currency         String?   @default("USD") // Currency for billing
  lastBillingDate  DateTime? // When the last payment was processed
  nextBillingDate  DateTime? // When the next payment is due

  documentUrl String? // URL to the signed contract document
  status      ContractStatus @default(ACTIVE) // Current status of the contract
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  Document      Document[] // Related documents (contract terms, amendments, etc.)
  KPI           KPI[]
  KPIAssignment KPIAssignment[]

  @@index([organizationId]) // Index for faster organization contract queries
  @@index([status]) // Index for faster status-based queries
  @@index([endDate]) // Index for faster expiry date queries
}

/// Represents a document in the system (contracts, reports, certifications, etc.)
model Document {
  id                String       @id @default(cuid())
  title             String // Document title/name
  description       String? // Optional document description
  type              DocumentType // Type of document (contract, report, etc.)
  url               String // Storage link (S3, etc.)
  fileSize          Int? // File size in bytes
  fileType          String? // MIME type of the file
  version           Int          @default(1) // Document version number
  isLatest          Boolean      @default(true) // Indicates if this is the latest version
  previousVersionId String? // Reference to previous version
  previousVersion   Document?    @relation("DocumentVersions", fields: [previousVersionId], references: [id])
  nextVersions      Document[]   @relation("DocumentVersions")

  uploadedById   String? // User ID who uploaded the document
  uploadedBy     User?         @relation(fields: [uploadedById], references: [id])
  organizationId String? // Associated organization
  organization   Organization? @relation(fields: [organizationId], references: [id])
  contractId     String? // Associated contract
  contract       Contract?     @relation(fields: [contractId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type]) // Index for faster document type queries
  @@index([organizationId]) // Index for faster organization document queries
  @@index([contractId]) // Index for faster contract document queries
  @@index([uploadedById]) // Index for faster user document queries
}

// ENUM: Document types
enum DocumentType {
  CONTRACT
  CERTIFICATION
  KPI_REPORT
  FEEDBACK_SUMMARY
  BILLING_REPORT
  UTILIZATION_REPORT
  OTHER
}

// ENUM: Organization status
enum OrgStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  PENDING
}

// ENUM: Contract status
enum ContractStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
}

/// Represents an audit log entry
model AuditLog {
  id        String   @id @default(cuid())
  action    String
  data      Json?
  timestamp DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

/// Represents a Key Performance Indicator (KPI) in the system
model KPI {
  id          String  @id @default(cuid())
  name        String // Name of the KPI
  description String? // Optional description
  type        String // Category or type of KPI
  unit        String // Unit of measurement (%, $, number, etc.)
  isActive    Boolean @default(true) // Whether the KPI is active in the catalog

  // Relations
  assignments KPIAssignment[] // KPI assignments to contracts

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  Contract       Contract?     @relation(fields: [contractId], references: [id])
  contractId     String?

  @@index([type]) // For filtering by KPI type
  @@index([isActive]) // For filtering active/inactive KPIs
}

/// Represents an assignment of a KPI to a contract
model KPIAssignment {
  id          String    @id @default(cuid())
  kpiId       String // Reference to the KPI
  contractId  String // Reference to the contract
  targetValue String? // E.g., "12 sessions", "1 report/month"
  frequency   Frequency // How often the KPI is measured
  status      KPIStatus // Current status of the assignment
  notes       String? // Additional notes
  startDate   DateTime // When the KPI assignment starts
  endDate     DateTime? // Optional end date for the assignment

  // Relations
  kpi      KPI      @relation(fields: [kpiId], references: [id])
  contract Contract @relation(fields: [contractId], references: [id])

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@index([kpiId]) // For faster KPI lookups
  @@index([contractId]) // For contract assignments
  @@index([status]) // For status-based queries
  @@index([startDate]) // For date-based queries
}

/// Represents how often a KPI is measured
enum Frequency {
  ONE_TIME
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
}

/// Represents the status of a KPI assignment
enum KPIStatus {
  PENDING
  ONGOING
  COMPLETED
  CANCELLED
}
