
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  preferredName: 'preferredName',
  dob: 'dob',
  gender: 'gender',
  phone: 'phone',
  email: 'email',
  image: 'image',
  address: 'address',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  emergencyContactEmail: 'emergencyContactEmail',
  preferredLanguage: 'preferredLanguage',
  preferredContactMethod: 'preferredContactMethod',
  isActive: 'isActive',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  emailVerified: 'emailVerified',
  lastLoginAt: 'lastLoginAt',
  preferredLanguage: 'preferredLanguage',
  timezone: 'timezone',
  isActive: 'isActive',
  twoFactorEnabled: 'twoFactorEnabled',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  organizationId: 'organizationId',
  role: 'role',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  qualifications: 'qualifications',
  specializations: 'specializations',
  preferredWorkingHours: 'preferredWorkingHours',
  isAvailable: 'isAvailable',
  emergencyContactName: 'emergencyContactName',
  emergencyContactPhone: 'emergencyContactPhone',
  emergencyContactEmail: 'emergencyContactEmail',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.BeneficiaryScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  relation: 'relation',
  isStaffLink: 'isStaffLink',
  staffId: 'staffId',
  guardianId: 'guardianId',
  userLinkId: 'userLinkId',
  status: 'status',
  lastServiceDate: 'lastServiceDate',
  preferredLanguage: 'preferredLanguage',
  isActive: 'isActive',
  notes: 'notes',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  lastLoginAt: 'lastLoginAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roleId: 'roleId'
};

exports.Prisma.IndustryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  parentId: 'parentId',
  isActive: 'isActive',
  externalId: 'externalId',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  website: 'website',
  address: 'address',
  billingAddress: 'billingAddress',
  taxId: 'taxId',
  contactPerson: 'contactPerson',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  industryId: 'industryId',
  status: 'status',
  preferredContactMethod: 'preferredContactMethod',
  timezone: 'timezone',
  isVerified: 'isVerified',
  notes: 'notes',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  startDate: 'startDate',
  endDate: 'endDate',
  renewalDate: 'renewalDate',
  billingRate: 'billingRate',
  isRenewable: 'isRenewable',
  autoRenew: 'autoRenew',
  paymentStatus: 'paymentStatus',
  paymentFrequency: 'paymentFrequency',
  paymentTerms: 'paymentTerms',
  currency: 'currency',
  lastBillingDate: 'lastBillingDate',
  nextBillingDate: 'nextBillingDate',
  documentUrl: 'documentUrl',
  status: 'status',
  signedBy: 'signedBy',
  signedAt: 'signedAt',
  terminationReason: 'terminationReason',
  notes: 'notes',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  url: 'url',
  fileSize: 'fileSize',
  fileType: 'fileType',
  version: 'version',
  isLatest: 'isLatest',
  previousVersionId: 'previousVersionId',
  status: 'status',
  expiryDate: 'expiryDate',
  isConfidential: 'isConfidential',
  tags: 'tags',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  uploadedById: 'uploadedById',
  organizationId: 'organizationId',
  contractId: 'contractId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  data: 'data',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  timestamp: 'timestamp',
  userId: 'userId'
};

exports.Prisma.KPIScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  typeId: 'typeId',
  unit: 'unit',
  unitType: 'unitType',
  isActive: 'isActive',
  targetValue: 'targetValue',
  isPublic: 'isPublic',
  calculationMethod: 'calculationMethod',
  frequency: 'frequency',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  contractId: 'contractId'
};

exports.Prisma.KpiTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  weight: 'weight',
  isActive: 'isActive',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KPIAssignmentScalarFieldEnum = {
  id: 'id',
  kpiId: 'kpiId',
  contractId: 'contractId',
  targetValue: 'targetValue',
  frequency: 'frequency',
  status: 'status',
  notes: 'notes',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  deletedAt: 'deletedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.EntityChangeScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  changeType: 'changeType',
  changedAt: 'changedAt',
  changedBy: 'changedBy',
  changeReason: 'changeReason',
  oldData: 'oldData',
  newData: 'newData',
  metadata: 'metadata',
  isActive: 'isActive',
  deletedAt: 'deletedAt'
};

exports.Prisma.FieldChangeScalarFieldEnum = {
  id: 'id',
  entityChangeId: 'entityChangeId',
  fieldName: 'fieldName',
  oldValue: 'oldValue',
  newValue: 'newValue',
  changeType: 'changeType'
};

exports.Prisma.ServiceCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  deletedAt: 'deletedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId',
  status: 'status',
  duration: 'duration',
  capacity: 'capacity',
  prerequisites: 'prerequisites',
  isPublic: 'isPublic',
  price: 'price',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  serviceProviderId: 'serviceProviderId'
};

exports.Prisma.ServiceAssignmentScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  contractId: 'contractId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  frequency: 'frequency',
  isActive: 'isActive',
  deletedAt: 'deletedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.ServiceProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  contactEmail: 'contactEmail',
  contactPhone: 'contactPhone',
  location: 'location',
  active: 'active',
  qualifications: 'qualifications',
  specializations: 'specializations',
  availability: 'availability',
  rating: 'rating',
  isVerified: 'isVerified',
  metadata: 'metadata',
  deletedAt: 'deletedAt'
};

exports.Prisma.ServiceSessionScalarFieldEnum = {
  id: 'id',
  serviceId: 'serviceId',
  providerId: 'providerId',
  scheduledAt: 'scheduledAt',
  completedAt: 'completedAt',
  status: 'status',
  notes: 'notes',
  feedback: 'feedback',
  duration: 'duration',
  location: 'location',
  cancellationReason: 'cancellationReason',
  rescheduleCount: 'rescheduleCount',
  isGroupSession: 'isGroupSession',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  staffId: 'staffId',
  beneficiaryId: 'beneficiaryId'
};

exports.Prisma.SessionFeedbackScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  rating: 'rating',
  comment: 'comment',
  isActive: 'isActive',
  deletedAt: 'deletedAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.Language = exports.$Enums.Language = {
  ENGLISH: 'ENGLISH',
  SPANISH: 'SPANISH',
  FRENCH: 'FRENCH',
  GERMAN: 'GERMAN',
  OTHER: 'OTHER'
};

exports.ContactMethod = exports.$Enums.ContactMethod = {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP',
  OTHER: 'OTHER'
};

exports.StaffRole = exports.$Enums.StaffRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF',
  VOLUNTEER: 'VOLUNTEER'
};

exports.StaffStatus = exports.$Enums.StaffStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  TERMINATED: 'TERMINATED',
  SUSPENDED: 'SUSPENDED',
  RESIGNED: 'RESIGNED',
  OTHER: 'OTHER'
};

exports.RelationType = exports.$Enums.RelationType = {
  CHILD: 'CHILD',
  SPOUSE: 'SPOUSE',
  PARENT: 'PARENT',
  SIBLING: 'SIBLING',
  GRANDPARENT: 'GRANDPARENT',
  GUARDIAN: 'GUARDIAN',
  FRIEND: 'FRIEND',
  NEIGHBOR: 'NEIGHBOR',
  COUSIN: 'COUSIN',
  OTHER: 'OTHER'
};

exports.OrgStatus = exports.$Enums.OrgStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  TERMINATED: 'TERMINATED',
  PENDING: 'PENDING'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.ContractStatus = exports.$Enums.ContractStatus = {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  TERMINATED: 'TERMINATED',
  RENEWED: 'RENEWED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  CONTRACT: 'CONTRACT',
  CERTIFICATION: 'CERTIFICATION',
  KPI_REPORT: 'KPI_REPORT',
  FEEDBACK_SUMMARY: 'FEEDBACK_SUMMARY',
  BILLING_REPORT: 'BILLING_REPORT',
  UTILIZATION_REPORT: 'UTILIZATION_REPORT',
  OTHER: 'OTHER'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  EXPIRED: 'EXPIRED'
};

exports.ActionType = exports.$Enums.ActionType = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  APPROVE: 'APPROVE',
  REJECT: 'REJECT',
  OTHER: 'OTHER'
};

exports.Unit = exports.$Enums.Unit = {
  PERCENTAGE: 'PERCENTAGE',
  COUNT: 'COUNT',
  SCORE: 'SCORE',
  TIME: 'TIME'
};

exports.Frequency = exports.$Enums.Frequency = {
  ONCE: 'ONCE',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  ANNUALLY: 'ANNUALLY'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  PENDING: 'PENDING',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ChangeType = exports.$Enums.ChangeType = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  RESTORE: 'RESTORE',
  ARCHIVE: 'ARCHIVE',
  UNARCHIVE: 'UNARCHIVE',
  DEACTIVATE: 'DEACTIVATE',
  ACTIVATE: 'ACTIVATE'
};

exports.ServiceStatus = exports.$Enums.ServiceStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.ServiceProviderType = exports.$Enums.ServiceProviderType = {
  COUNSELOR: 'COUNSELOR',
  CLINIC: 'CLINIC',
  HOTLINE: 'HOTLINE',
  COACH: 'COACH',
  OTHER: 'OTHER'
};

exports.SessionStatus = exports.$Enums.SessionStatus = {
  SCHEDULED: 'SCHEDULED',
  RESCHEDULED: 'RESCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED',
  NO_SHOW: 'NO_SHOW',
  POSTPONED: 'POSTPONED'
};

exports.Prisma.ModelName = {
  Profile: 'Profile',
  User: 'User',
  Staff: 'Staff',
  Beneficiary: 'Beneficiary',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Role: 'Role',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  UserRole: 'UserRole',
  Industry: 'Industry',
  Organization: 'Organization',
  Contract: 'Contract',
  Document: 'Document',
  AuditLog: 'AuditLog',
  KPI: 'KPI',
  KpiType: 'KpiType',
  KPIAssignment: 'KPIAssignment',
  EntityChange: 'EntityChange',
  FieldChange: 'FieldChange',
  ServiceCategory: 'ServiceCategory',
  Service: 'Service',
  ServiceAssignment: 'ServiceAssignment',
  ServiceProvider: 'ServiceProvider',
  ServiceSession: 'ServiceSession',
  SessionFeedback: 'SessionFeedback'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
