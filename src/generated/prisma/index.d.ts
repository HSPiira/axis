
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * Represents an authenticated user in the system.
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * Links a user to an external identity provider (Microsoft, GitHub, etc).
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * Stores active sessions for stateless authentication (JWT or DB).
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * Used for email/passwordless login flows or account recovery.
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Role
 * Represents a group of permissions (e.g. 'Admin', 'Manager', 'User').
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Permission
 * Represents a single action a user can perform (e.g. 'view_users', 'edit_asset').
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model RolePermission
 * Pivot table assigning permissions to roles.
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model UserRole
 * Assigns one or more roles to a user.
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model Profile
 * Represents a person's profile information
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Client
 * Represents a client organization in the system
 */
export type Client = $Result.DefaultSelection<Prisma.$ClientPayload>
/**
 * Model Industry
 * Represents an industry classification
 */
export type Industry = $Result.DefaultSelection<Prisma.$IndustryPayload>
/**
 * Model Contract
 * Represents a service contract between the client and service provider
 */
export type Contract = $Result.DefaultSelection<Prisma.$ContractPayload>
/**
 * Model ServiceCategory
 * 
 */
export type ServiceCategory = $Result.DefaultSelection<Prisma.$ServiceCategoryPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model ServiceAssignment
 * 
 */
export type ServiceAssignment = $Result.DefaultSelection<Prisma.$ServiceAssignmentPayload>
/**
 * Model ServiceProvider
 * 
 */
export type ServiceProvider = $Result.DefaultSelection<Prisma.$ServiceProviderPayload>
/**
 * Model ServiceSession
 * 
 */
export type ServiceSession = $Result.DefaultSelection<Prisma.$ServiceSessionPayload>
/**
 * Model SessionFeedback
 * 
 */
export type SessionFeedback = $Result.DefaultSelection<Prisma.$SessionFeedbackPayload>
/**
 * Model Staff
 * Represents a staff member in an organization
 */
export type Staff = $Result.DefaultSelection<Prisma.$StaffPayload>
/**
 * Model Beneficiary
 * Represents a beneficiary in the system
 */
export type Beneficiary = $Result.DefaultSelection<Prisma.$BeneficiaryPayload>
/**
 * Model KPI
 * Represents a Key Performance Indicator (KPI) in the system
 */
export type KPI = $Result.DefaultSelection<Prisma.$KPIPayload>
/**
 * Model KpiType
 * Represents a type or category of KPI
 */
export type KpiType = $Result.DefaultSelection<Prisma.$KpiTypePayload>
/**
 * Model KPIAssignment
 * Represents an assignment of a KPI to a contract
 */
export type KPIAssignment = $Result.DefaultSelection<Prisma.$KPIAssignmentPayload>
/**
 * Model Document
 * Represents a document in the system (contracts, reports, certifications, etc.)
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model AuditLog
 * Represents an audit log entry
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model EntityChange
 * Tracks all entity changes across the system
 */
export type EntityChange = $Result.DefaultSelection<Prisma.$EntityChangePayload>
/**
 * Model FieldChange
 * Tracks field-level changes for detailed audit trail
 */
export type FieldChange = $Result.DefaultSelection<Prisma.$FieldChangePayload>
/**
 * Model UserStatusTransition
 * Tracks user status changes for audit and compliance
 */
export type UserStatusTransition = $Result.DefaultSelection<Prisma.$UserStatusTransitionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const Language: {
  ENGLISH: 'ENGLISH',
  SPANISH: 'SPANISH',
  FRENCH: 'FRENCH',
  GERMAN: 'GERMAN',
  OTHER: 'OTHER'
};

export type Language = (typeof Language)[keyof typeof Language]


export const ContactMethod: {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP',
  OTHER: 'OTHER'
};

export type ContactMethod = (typeof ContactMethod)[keyof typeof ContactMethod]


export const Frequency: {
  ONCE: 'ONCE',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  ANNUALLY: 'ANNUALLY'
};

export type Frequency = (typeof Frequency)[keyof typeof Frequency]


export const Unit: {
  PERCENTAGE: 'PERCENTAGE',
  COUNT: 'COUNT',
  SCORE: 'SCORE',
  TIME: 'TIME'
};

export type Unit = (typeof Unit)[keyof typeof Unit]


export const EntityStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ARCHIVED: 'ARCHIVED',
  DELETED: 'DELETED',
  PENDING: 'PENDING',
  SUSPENDED: 'SUSPENDED',
  EXPIRED: 'EXPIRED',
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  PRIVATE: 'PRIVATE'
};

export type EntityStatus = (typeof EntityStatus)[keyof typeof EntityStatus]


export const BaseStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING',
  ARCHIVED: 'ARCHIVED',
  DELETED: 'DELETED'
};

export type BaseStatus = (typeof BaseStatus)[keyof typeof BaseStatus]


export const WorkStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  TERMINATED: 'TERMINATED',
  SUSPENDED: 'SUSPENDED',
  RESIGNED: 'RESIGNED'
};

export type WorkStatus = (typeof WorkStatus)[keyof typeof WorkStatus]


export const DocumentStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  EXPIRED: 'EXPIRED'
};

export type DocumentStatus = (typeof DocumentStatus)[keyof typeof DocumentStatus]


export const ContractStatus: {
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  TERMINATED: 'TERMINATED',
  RENEWED: 'RENEWED',
  PENDING: 'PENDING',
  DRAFT: 'DRAFT'
};

export type ContractStatus = (typeof ContractStatus)[keyof typeof ContractStatus]


export const SessionStatus: {
  SCHEDULED: 'SCHEDULED',
  RESCHEDULED: 'RESCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED',
  NO_SHOW: 'NO_SHOW',
  POSTPONED: 'POSTPONED'
};

export type SessionStatus = (typeof SessionStatus)[keyof typeof SessionStatus]


export const AssignmentStatus: {
  PENDING: 'PENDING',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type AssignmentStatus = (typeof AssignmentStatus)[keyof typeof AssignmentStatus]


export const StaffRole: {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF',
  VOLUNTEER: 'VOLUNTEER'
};

export type StaffRole = (typeof StaffRole)[keyof typeof StaffRole]


export const StaffStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ON_LEAVE: 'ON_LEAVE',
  TERMINATED: 'TERMINATED',
  SUSPENDED: 'SUSPENDED',
  RESIGNED: 'RESIGNED',
  OTHER: 'OTHER'
};

export type StaffStatus = (typeof StaffStatus)[keyof typeof StaffStatus]


export const RelationType: {
  CHILD: 'CHILD',
  SPOUSE: 'SPOUSE',
  PARENT: 'PARENT',
  SIBLING: 'SIBLING',
  GRANDPARENT: 'GRANDPARENT',
  GUARDIAN: 'GUARDIAN',
  FRIEND: 'FRIEND',
  NEIGHBOR: 'NEIGHBOR',
  COUSIN: 'COUSIN',
  OTHER: 'OTHER'
};

export type RelationType = (typeof RelationType)[keyof typeof RelationType]


export const PaymentStatus: {
  PENDING: 'PENDING',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const DocumentType: {
  CONTRACT: 'CONTRACT',
  CERTIFICATION: 'CERTIFICATION',
  KPI_REPORT: 'KPI_REPORT',
  FEEDBACK_SUMMARY: 'FEEDBACK_SUMMARY',
  BILLING_REPORT: 'BILLING_REPORT',
  UTILIZATION_REPORT: 'UTILIZATION_REPORT',
  OTHER: 'OTHER'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const OrgStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  TERMINATED: 'TERMINATED',
  PENDING: 'PENDING'
};

export type OrgStatus = (typeof OrgStatus)[keyof typeof OrgStatus]


export const ServiceStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

export type ServiceStatus = (typeof ServiceStatus)[keyof typeof ServiceStatus]


export const ServiceProviderType: {
  COUNSELOR: 'COUNSELOR',
  CLINIC: 'CLINIC',
  HOTLINE: 'HOTLINE',
  COACH: 'COACH',
  OTHER: 'OTHER'
};

export type ServiceProviderType = (typeof ServiceProviderType)[keyof typeof ServiceProviderType]


export const ActionType: {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  APPROVE: 'APPROVE',
  REJECT: 'REJECT',
  LIST: 'LIST',
  OTHER: 'OTHER'
};

export type ActionType = (typeof ActionType)[keyof typeof ActionType]


export const ChangeType: {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  RESTORE: 'RESTORE',
  ARCHIVE: 'ARCHIVE',
  UNARCHIVE: 'UNARCHIVE',
  DEACTIVATE: 'DEACTIVATE',
  ACTIVATE: 'ACTIVATE'
};

export type ChangeType = (typeof ChangeType)[keyof typeof ChangeType]


export const UserStatus: {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  BANNED: 'BANNED',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION',
  INACTIVE: 'INACTIVE'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]

}

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type Language = $Enums.Language

export const Language: typeof $Enums.Language

export type ContactMethod = $Enums.ContactMethod

export const ContactMethod: typeof $Enums.ContactMethod

export type Frequency = $Enums.Frequency

export const Frequency: typeof $Enums.Frequency

export type Unit = $Enums.Unit

export const Unit: typeof $Enums.Unit

export type EntityStatus = $Enums.EntityStatus

export const EntityStatus: typeof $Enums.EntityStatus

export type BaseStatus = $Enums.BaseStatus

export const BaseStatus: typeof $Enums.BaseStatus

export type WorkStatus = $Enums.WorkStatus

export const WorkStatus: typeof $Enums.WorkStatus

export type DocumentStatus = $Enums.DocumentStatus

export const DocumentStatus: typeof $Enums.DocumentStatus

export type ContractStatus = $Enums.ContractStatus

export const ContractStatus: typeof $Enums.ContractStatus

export type SessionStatus = $Enums.SessionStatus

export const SessionStatus: typeof $Enums.SessionStatus

export type AssignmentStatus = $Enums.AssignmentStatus

export const AssignmentStatus: typeof $Enums.AssignmentStatus

export type StaffRole = $Enums.StaffRole

export const StaffRole: typeof $Enums.StaffRole

export type StaffStatus = $Enums.StaffStatus

export const StaffStatus: typeof $Enums.StaffStatus

export type RelationType = $Enums.RelationType

export const RelationType: typeof $Enums.RelationType

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type OrgStatus = $Enums.OrgStatus

export const OrgStatus: typeof $Enums.OrgStatus

export type ServiceStatus = $Enums.ServiceStatus

export const ServiceStatus: typeof $Enums.ServiceStatus

export type ServiceProviderType = $Enums.ServiceProviderType

export const ServiceProviderType: typeof $Enums.ServiceProviderType

export type ActionType = $Enums.ActionType

export const ActionType: typeof $Enums.ActionType

export type ChangeType = $Enums.ChangeType

export const ChangeType: typeof $Enums.ChangeType

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.industry`: Exposes CRUD operations for the **Industry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Industries
    * const industries = await prisma.industry.findMany()
    * ```
    */
  get industry(): Prisma.IndustryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contract`: Exposes CRUD operations for the **Contract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contracts
    * const contracts = await prisma.contract.findMany()
    * ```
    */
  get contract(): Prisma.ContractDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceCategory`: Exposes CRUD operations for the **ServiceCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceCategories
    * const serviceCategories = await prisma.serviceCategory.findMany()
    * ```
    */
  get serviceCategory(): Prisma.ServiceCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceAssignment`: Exposes CRUD operations for the **ServiceAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceAssignments
    * const serviceAssignments = await prisma.serviceAssignment.findMany()
    * ```
    */
  get serviceAssignment(): Prisma.ServiceAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceProvider`: Exposes CRUD operations for the **ServiceProvider** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceProviders
    * const serviceProviders = await prisma.serviceProvider.findMany()
    * ```
    */
  get serviceProvider(): Prisma.ServiceProviderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceSession`: Exposes CRUD operations for the **ServiceSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceSessions
    * const serviceSessions = await prisma.serviceSession.findMany()
    * ```
    */
  get serviceSession(): Prisma.ServiceSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sessionFeedback`: Exposes CRUD operations for the **SessionFeedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionFeedbacks
    * const sessionFeedbacks = await prisma.sessionFeedback.findMany()
    * ```
    */
  get sessionFeedback(): Prisma.SessionFeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **Staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.StaffDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.beneficiary`: Exposes CRUD operations for the **Beneficiary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Beneficiaries
    * const beneficiaries = await prisma.beneficiary.findMany()
    * ```
    */
  get beneficiary(): Prisma.BeneficiaryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kPI`: Exposes CRUD operations for the **KPI** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KPIS
    * const kPIS = await prisma.kPI.findMany()
    * ```
    */
  get kPI(): Prisma.KPIDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kpiType`: Exposes CRUD operations for the **KpiType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KpiTypes
    * const kpiTypes = await prisma.kpiType.findMany()
    * ```
    */
  get kpiType(): Prisma.KpiTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kPIAssignment`: Exposes CRUD operations for the **KPIAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KPIAssignments
    * const kPIAssignments = await prisma.kPIAssignment.findMany()
    * ```
    */
  get kPIAssignment(): Prisma.KPIAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.entityChange`: Exposes CRUD operations for the **EntityChange** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EntityChanges
    * const entityChanges = await prisma.entityChange.findMany()
    * ```
    */
  get entityChange(): Prisma.EntityChangeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fieldChange`: Exposes CRUD operations for the **FieldChange** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FieldChanges
    * const fieldChanges = await prisma.fieldChange.findMany()
    * ```
    */
  get fieldChange(): Prisma.FieldChangeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userStatusTransition`: Exposes CRUD operations for the **UserStatusTransition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserStatusTransitions
    * const userStatusTransitions = await prisma.userStatusTransition.findMany()
    * ```
    */
  get userStatusTransition(): Prisma.UserStatusTransitionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Role: 'Role',
    Permission: 'Permission',
    RolePermission: 'RolePermission',
    UserRole: 'UserRole',
    Profile: 'Profile',
    Client: 'Client',
    Industry: 'Industry',
    Contract: 'Contract',
    ServiceCategory: 'ServiceCategory',
    Service: 'Service',
    ServiceAssignment: 'ServiceAssignment',
    ServiceProvider: 'ServiceProvider',
    ServiceSession: 'ServiceSession',
    SessionFeedback: 'SessionFeedback',
    Staff: 'Staff',
    Beneficiary: 'Beneficiary',
    KPI: 'KPI',
    KpiType: 'KpiType',
    KPIAssignment: 'KPIAssignment',
    Document: 'Document',
    AuditLog: 'AuditLog',
    EntityChange: 'EntityChange',
    FieldChange: 'FieldChange',
    UserStatusTransition: 'UserStatusTransition'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "account" | "session" | "verificationToken" | "role" | "permission" | "rolePermission" | "userRole" | "profile" | "client" | "industry" | "contract" | "serviceCategory" | "service" | "serviceAssignment" | "serviceProvider" | "serviceSession" | "sessionFeedback" | "staff" | "beneficiary" | "kPI" | "kpiType" | "kPIAssignment" | "document" | "auditLog" | "entityChange" | "fieldChange" | "userStatusTransition"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RolePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RolePermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserRoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Client: {
        payload: Prisma.$ClientPayload<ExtArgs>
        fields: Prisma.ClientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findFirst: {
            args: Prisma.ClientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          findMany: {
            args: Prisma.ClientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          create: {
            args: Prisma.ClientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          createMany: {
            args: Prisma.ClientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          delete: {
            args: Prisma.ClientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          update: {
            args: Prisma.ClientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          deleteMany: {
            args: Prisma.ClientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>[]
          }
          upsert: {
            args: Prisma.ClientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.ClientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      Industry: {
        payload: Prisma.$IndustryPayload<ExtArgs>
        fields: Prisma.IndustryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IndustryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IndustryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload>
          }
          findFirst: {
            args: Prisma.IndustryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IndustryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload>
          }
          findMany: {
            args: Prisma.IndustryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload>[]
          }
          create: {
            args: Prisma.IndustryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload>
          }
          createMany: {
            args: Prisma.IndustryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IndustryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload>[]
          }
          delete: {
            args: Prisma.IndustryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload>
          }
          update: {
            args: Prisma.IndustryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload>
          }
          deleteMany: {
            args: Prisma.IndustryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IndustryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IndustryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload>[]
          }
          upsert: {
            args: Prisma.IndustryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IndustryPayload>
          }
          aggregate: {
            args: Prisma.IndustryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIndustry>
          }
          groupBy: {
            args: Prisma.IndustryGroupByArgs<ExtArgs>
            result: $Utils.Optional<IndustryGroupByOutputType>[]
          }
          count: {
            args: Prisma.IndustryCountArgs<ExtArgs>
            result: $Utils.Optional<IndustryCountAggregateOutputType> | number
          }
        }
      }
      Contract: {
        payload: Prisma.$ContractPayload<ExtArgs>
        fields: Prisma.ContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findFirst: {
            args: Prisma.ContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          findMany: {
            args: Prisma.ContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          create: {
            args: Prisma.ContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          createMany: {
            args: Prisma.ContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          delete: {
            args: Prisma.ContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          update: {
            args: Prisma.ContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          deleteMany: {
            args: Prisma.ContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContractUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>[]
          }
          upsert: {
            args: Prisma.ContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContractPayload>
          }
          aggregate: {
            args: Prisma.ContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContract>
          }
          groupBy: {
            args: Prisma.ContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContractCountArgs<ExtArgs>
            result: $Utils.Optional<ContractCountAggregateOutputType> | number
          }
        }
      }
      ServiceCategory: {
        payload: Prisma.$ServiceCategoryPayload<ExtArgs>
        fields: Prisma.ServiceCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          findFirst: {
            args: Prisma.ServiceCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          findMany: {
            args: Prisma.ServiceCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>[]
          }
          create: {
            args: Prisma.ServiceCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          createMany: {
            args: Prisma.ServiceCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>[]
          }
          delete: {
            args: Prisma.ServiceCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          update: {
            args: Prisma.ServiceCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ServiceCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>[]
          }
          upsert: {
            args: Prisma.ServiceCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceCategoryPayload>
          }
          aggregate: {
            args: Prisma.ServiceCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceCategory>
          }
          groupBy: {
            args: Prisma.ServiceCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCategoryCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      ServiceAssignment: {
        payload: Prisma.$ServiceAssignmentPayload<ExtArgs>
        fields: Prisma.ServiceAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload>
          }
          findFirst: {
            args: Prisma.ServiceAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload>
          }
          findMany: {
            args: Prisma.ServiceAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload>[]
          }
          create: {
            args: Prisma.ServiceAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload>
          }
          createMany: {
            args: Prisma.ServiceAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload>[]
          }
          delete: {
            args: Prisma.ServiceAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload>
          }
          update: {
            args: Prisma.ServiceAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.ServiceAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.ServiceAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceAssignmentPayload>
          }
          aggregate: {
            args: Prisma.ServiceAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceAssignment>
          }
          groupBy: {
            args: Prisma.ServiceAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceAssignmentCountAggregateOutputType> | number
          }
        }
      }
      ServiceProvider: {
        payload: Prisma.$ServiceProviderPayload<ExtArgs>
        fields: Prisma.ServiceProviderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceProviderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceProviderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload>
          }
          findFirst: {
            args: Prisma.ServiceProviderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceProviderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload>
          }
          findMany: {
            args: Prisma.ServiceProviderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload>[]
          }
          create: {
            args: Prisma.ServiceProviderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload>
          }
          createMany: {
            args: Prisma.ServiceProviderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceProviderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload>[]
          }
          delete: {
            args: Prisma.ServiceProviderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload>
          }
          update: {
            args: Prisma.ServiceProviderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload>
          }
          deleteMany: {
            args: Prisma.ServiceProviderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceProviderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceProviderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload>[]
          }
          upsert: {
            args: Prisma.ServiceProviderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceProviderPayload>
          }
          aggregate: {
            args: Prisma.ServiceProviderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceProvider>
          }
          groupBy: {
            args: Prisma.ServiceProviderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceProviderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceProviderCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceProviderCountAggregateOutputType> | number
          }
        }
      }
      ServiceSession: {
        payload: Prisma.$ServiceSessionPayload<ExtArgs>
        fields: Prisma.ServiceSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload>
          }
          findFirst: {
            args: Prisma.ServiceSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload>
          }
          findMany: {
            args: Prisma.ServiceSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload>[]
          }
          create: {
            args: Prisma.ServiceSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload>
          }
          createMany: {
            args: Prisma.ServiceSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload>[]
          }
          delete: {
            args: Prisma.ServiceSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload>
          }
          update: {
            args: Prisma.ServiceSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload>
          }
          deleteMany: {
            args: Prisma.ServiceSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload>[]
          }
          upsert: {
            args: Prisma.ServiceSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceSessionPayload>
          }
          aggregate: {
            args: Prisma.ServiceSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceSession>
          }
          groupBy: {
            args: Prisma.ServiceSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceSessionCountAggregateOutputType> | number
          }
        }
      }
      SessionFeedback: {
        payload: Prisma.$SessionFeedbackPayload<ExtArgs>
        fields: Prisma.SessionFeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload>
          }
          findFirst: {
            args: Prisma.SessionFeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload>
          }
          findMany: {
            args: Prisma.SessionFeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload>[]
          }
          create: {
            args: Prisma.SessionFeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload>
          }
          createMany: {
            args: Prisma.SessionFeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionFeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload>[]
          }
          delete: {
            args: Prisma.SessionFeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload>
          }
          update: {
            args: Prisma.SessionFeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload>
          }
          deleteMany: {
            args: Prisma.SessionFeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionFeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionFeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload>[]
          }
          upsert: {
            args: Prisma.SessionFeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFeedbackPayload>
          }
          aggregate: {
            args: Prisma.SessionFeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionFeedback>
          }
          groupBy: {
            args: Prisma.SessionFeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionFeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionFeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<SessionFeedbackCountAggregateOutputType> | number
          }
        }
      }
      Staff: {
        payload: Prisma.$StaffPayload<ExtArgs>
        fields: Prisma.StaffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findFirst: {
            args: Prisma.StaffFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          findMany: {
            args: Prisma.StaffFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          create: {
            args: Prisma.StaffCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          createMany: {
            args: Prisma.StaffCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          delete: {
            args: Prisma.StaffDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          update: {
            args: Prisma.StaffUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          deleteMany: {
            args: Prisma.StaffDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>[]
          }
          upsert: {
            args: Prisma.StaffUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffPayload>
          }
          aggregate: {
            args: Prisma.StaffAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaff>
          }
          groupBy: {
            args: Prisma.StaffGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffCountArgs<ExtArgs>
            result: $Utils.Optional<StaffCountAggregateOutputType> | number
          }
        }
      }
      Beneficiary: {
        payload: Prisma.$BeneficiaryPayload<ExtArgs>
        fields: Prisma.BeneficiaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BeneficiaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BeneficiaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          findFirst: {
            args: Prisma.BeneficiaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BeneficiaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          findMany: {
            args: Prisma.BeneficiaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>[]
          }
          create: {
            args: Prisma.BeneficiaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          createMany: {
            args: Prisma.BeneficiaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BeneficiaryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>[]
          }
          delete: {
            args: Prisma.BeneficiaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          update: {
            args: Prisma.BeneficiaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          deleteMany: {
            args: Prisma.BeneficiaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BeneficiaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BeneficiaryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>[]
          }
          upsert: {
            args: Prisma.BeneficiaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          aggregate: {
            args: Prisma.BeneficiaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBeneficiary>
          }
          groupBy: {
            args: Prisma.BeneficiaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<BeneficiaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BeneficiaryCountArgs<ExtArgs>
            result: $Utils.Optional<BeneficiaryCountAggregateOutputType> | number
          }
        }
      }
      KPI: {
        payload: Prisma.$KPIPayload<ExtArgs>
        fields: Prisma.KPIFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KPIFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KPIFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          findFirst: {
            args: Prisma.KPIFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KPIFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          findMany: {
            args: Prisma.KPIFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>[]
          }
          create: {
            args: Prisma.KPICreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          createMany: {
            args: Prisma.KPICreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KPICreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>[]
          }
          delete: {
            args: Prisma.KPIDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          update: {
            args: Prisma.KPIUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          deleteMany: {
            args: Prisma.KPIDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KPIUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KPIUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>[]
          }
          upsert: {
            args: Prisma.KPIUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIPayload>
          }
          aggregate: {
            args: Prisma.KPIAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKPI>
          }
          groupBy: {
            args: Prisma.KPIGroupByArgs<ExtArgs>
            result: $Utils.Optional<KPIGroupByOutputType>[]
          }
          count: {
            args: Prisma.KPICountArgs<ExtArgs>
            result: $Utils.Optional<KPICountAggregateOutputType> | number
          }
        }
      }
      KpiType: {
        payload: Prisma.$KpiTypePayload<ExtArgs>
        fields: Prisma.KpiTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KpiTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KpiTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload>
          }
          findFirst: {
            args: Prisma.KpiTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KpiTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload>
          }
          findMany: {
            args: Prisma.KpiTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload>[]
          }
          create: {
            args: Prisma.KpiTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload>
          }
          createMany: {
            args: Prisma.KpiTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KpiTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload>[]
          }
          delete: {
            args: Prisma.KpiTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload>
          }
          update: {
            args: Prisma.KpiTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload>
          }
          deleteMany: {
            args: Prisma.KpiTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KpiTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KpiTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload>[]
          }
          upsert: {
            args: Prisma.KpiTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KpiTypePayload>
          }
          aggregate: {
            args: Prisma.KpiTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKpiType>
          }
          groupBy: {
            args: Prisma.KpiTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<KpiTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.KpiTypeCountArgs<ExtArgs>
            result: $Utils.Optional<KpiTypeCountAggregateOutputType> | number
          }
        }
      }
      KPIAssignment: {
        payload: Prisma.$KPIAssignmentPayload<ExtArgs>
        fields: Prisma.KPIAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KPIAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KPIAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload>
          }
          findFirst: {
            args: Prisma.KPIAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KPIAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload>
          }
          findMany: {
            args: Prisma.KPIAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload>[]
          }
          create: {
            args: Prisma.KPIAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload>
          }
          createMany: {
            args: Prisma.KPIAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KPIAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload>[]
          }
          delete: {
            args: Prisma.KPIAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload>
          }
          update: {
            args: Prisma.KPIAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.KPIAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KPIAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KPIAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.KPIAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KPIAssignmentPayload>
          }
          aggregate: {
            args: Prisma.KPIAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKPIAssignment>
          }
          groupBy: {
            args: Prisma.KPIAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<KPIAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.KPIAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<KPIAssignmentCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      EntityChange: {
        payload: Prisma.$EntityChangePayload<ExtArgs>
        fields: Prisma.EntityChangeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EntityChangeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EntityChangeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload>
          }
          findFirst: {
            args: Prisma.EntityChangeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EntityChangeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload>
          }
          findMany: {
            args: Prisma.EntityChangeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload>[]
          }
          create: {
            args: Prisma.EntityChangeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload>
          }
          createMany: {
            args: Prisma.EntityChangeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EntityChangeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload>[]
          }
          delete: {
            args: Prisma.EntityChangeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload>
          }
          update: {
            args: Prisma.EntityChangeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload>
          }
          deleteMany: {
            args: Prisma.EntityChangeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EntityChangeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EntityChangeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload>[]
          }
          upsert: {
            args: Prisma.EntityChangeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityChangePayload>
          }
          aggregate: {
            args: Prisma.EntityChangeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEntityChange>
          }
          groupBy: {
            args: Prisma.EntityChangeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EntityChangeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EntityChangeCountArgs<ExtArgs>
            result: $Utils.Optional<EntityChangeCountAggregateOutputType> | number
          }
        }
      }
      FieldChange: {
        payload: Prisma.$FieldChangePayload<ExtArgs>
        fields: Prisma.FieldChangeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FieldChangeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FieldChangeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload>
          }
          findFirst: {
            args: Prisma.FieldChangeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FieldChangeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload>
          }
          findMany: {
            args: Prisma.FieldChangeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload>[]
          }
          create: {
            args: Prisma.FieldChangeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload>
          }
          createMany: {
            args: Prisma.FieldChangeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FieldChangeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload>[]
          }
          delete: {
            args: Prisma.FieldChangeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload>
          }
          update: {
            args: Prisma.FieldChangeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload>
          }
          deleteMany: {
            args: Prisma.FieldChangeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FieldChangeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FieldChangeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload>[]
          }
          upsert: {
            args: Prisma.FieldChangeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldChangePayload>
          }
          aggregate: {
            args: Prisma.FieldChangeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFieldChange>
          }
          groupBy: {
            args: Prisma.FieldChangeGroupByArgs<ExtArgs>
            result: $Utils.Optional<FieldChangeGroupByOutputType>[]
          }
          count: {
            args: Prisma.FieldChangeCountArgs<ExtArgs>
            result: $Utils.Optional<FieldChangeCountAggregateOutputType> | number
          }
        }
      }
      UserStatusTransition: {
        payload: Prisma.$UserStatusTransitionPayload<ExtArgs>
        fields: Prisma.UserStatusTransitionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserStatusTransitionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserStatusTransitionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload>
          }
          findFirst: {
            args: Prisma.UserStatusTransitionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserStatusTransitionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload>
          }
          findMany: {
            args: Prisma.UserStatusTransitionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload>[]
          }
          create: {
            args: Prisma.UserStatusTransitionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload>
          }
          createMany: {
            args: Prisma.UserStatusTransitionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserStatusTransitionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload>[]
          }
          delete: {
            args: Prisma.UserStatusTransitionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload>
          }
          update: {
            args: Prisma.UserStatusTransitionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload>
          }
          deleteMany: {
            args: Prisma.UserStatusTransitionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserStatusTransitionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserStatusTransitionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload>[]
          }
          upsert: {
            args: Prisma.UserStatusTransitionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserStatusTransitionPayload>
          }
          aggregate: {
            args: Prisma.UserStatusTransitionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserStatusTransition>
          }
          groupBy: {
            args: Prisma.UserStatusTransitionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserStatusTransitionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserStatusTransitionCountArgs<ExtArgs>
            result: $Utils.Optional<UserStatusTransitionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    role?: RoleOmit
    permission?: PermissionOmit
    rolePermission?: RolePermissionOmit
    userRole?: UserRoleOmit
    profile?: ProfileOmit
    client?: ClientOmit
    industry?: IndustryOmit
    contract?: ContractOmit
    serviceCategory?: ServiceCategoryOmit
    service?: ServiceOmit
    serviceAssignment?: ServiceAssignmentOmit
    serviceProvider?: ServiceProviderOmit
    serviceSession?: ServiceSessionOmit
    sessionFeedback?: SessionFeedbackOmit
    staff?: StaffOmit
    beneficiary?: BeneficiaryOmit
    kPI?: KPIOmit
    kpiType?: KpiTypeOmit
    kPIAssignment?: KPIAssignmentOmit
    document?: DocumentOmit
    auditLog?: AuditLogOmit
    entityChange?: EntityChangeOmit
    fieldChange?: FieldChangeOmit
    userStatusTransition?: UserStatusTransitionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    userRoles: number
    auditLogs: number
    documents: number
    staffProfiles: number
    beneficiaries: number
    guardianOf: number
    statusTransitions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    userRoles?: boolean | UserCountOutputTypeCountUserRolesArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    documents?: boolean | UserCountOutputTypeCountDocumentsArgs
    staffProfiles?: boolean | UserCountOutputTypeCountStaffProfilesArgs
    beneficiaries?: boolean | UserCountOutputTypeCountBeneficiariesArgs
    guardianOf?: boolean | UserCountOutputTypeCountGuardianOfArgs
    statusTransitions?: boolean | UserCountOutputTypeCountStatusTransitionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStaffProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBeneficiariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeneficiaryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGuardianOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeneficiaryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStatusTransitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStatusTransitionWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    permissions: number
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | RoleCountOutputTypeCountPermissionsArgs
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    roles: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | PermissionCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    contracts: number
    documents: number
    kpis: number
    kpiAssignments: number
    serviceAssignments: number
    staff: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contracts?: boolean | ClientCountOutputTypeCountContractsArgs
    documents?: boolean | ClientCountOutputTypeCountDocumentsArgs
    kpis?: boolean | ClientCountOutputTypeCountKpisArgs
    kpiAssignments?: boolean | ClientCountOutputTypeCountKpiAssignmentsArgs
    serviceAssignments?: boolean | ClientCountOutputTypeCountServiceAssignmentsArgs
    staff?: boolean | ClientCountOutputTypeCountStaffArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountKpisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountKpiAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIAssignmentWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountServiceAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceAssignmentWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
  }


  /**
   * Count Type IndustryCountOutputType
   */

  export type IndustryCountOutputType = {
    children: number
    clients: number
  }

  export type IndustryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | IndustryCountOutputTypeCountChildrenArgs
    clients?: boolean | IndustryCountOutputTypeCountClientsArgs
  }

  // Custom InputTypes
  /**
   * IndustryCountOutputType without action
   */
  export type IndustryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IndustryCountOutputType
     */
    select?: IndustryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IndustryCountOutputType without action
   */
  export type IndustryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndustryWhereInput
  }

  /**
   * IndustryCountOutputType without action
   */
  export type IndustryCountOutputTypeCountClientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
  }


  /**
   * Count Type ContractCountOutputType
   */

  export type ContractCountOutputType = {
    documents: number
    kpis: number
    kpiAssignments: number
    serviceAssignments: number
  }

  export type ContractCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | ContractCountOutputTypeCountDocumentsArgs
    kpis?: boolean | ContractCountOutputTypeCountKpisArgs
    kpiAssignments?: boolean | ContractCountOutputTypeCountKpiAssignmentsArgs
    serviceAssignments?: boolean | ContractCountOutputTypeCountServiceAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContractCountOutputType
     */
    select?: ContractCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountKpisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountKpiAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIAssignmentWhereInput
  }

  /**
   * ContractCountOutputType without action
   */
  export type ContractCountOutputTypeCountServiceAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceAssignmentWhereInput
  }


  /**
   * Count Type ServiceCategoryCountOutputType
   */

  export type ServiceCategoryCountOutputType = {
    services: number
  }

  export type ServiceCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | ServiceCategoryCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes
  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategoryCountOutputType
     */
    select?: ServiceCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCategoryCountOutputType without action
   */
  export type ServiceCategoryCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }


  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    assignments: number
    ServiceSession: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | ServiceCountOutputTypeCountAssignmentsArgs
    ServiceSession?: boolean | ServiceCountOutputTypeCountServiceSessionArgs
  }

  // Custom InputTypes
  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceAssignmentWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountServiceSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceSessionWhereInput
  }


  /**
   * Count Type ServiceProviderCountOutputType
   */

  export type ServiceProviderCountOutputType = {
    services: number
    sessions: number
  }

  export type ServiceProviderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | ServiceProviderCountOutputTypeCountServicesArgs
    sessions?: boolean | ServiceProviderCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * ServiceProviderCountOutputType without action
   */
  export type ServiceProviderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProviderCountOutputType
     */
    select?: ServiceProviderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceProviderCountOutputType without action
   */
  export type ServiceProviderCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }

  /**
   * ServiceProviderCountOutputType without action
   */
  export type ServiceProviderCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceSessionWhereInput
  }


  /**
   * Count Type ServiceSessionCountOutputType
   */

  export type ServiceSessionCountOutputType = {
    SessionFeedback: number
  }

  export type ServiceSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SessionFeedback?: boolean | ServiceSessionCountOutputTypeCountSessionFeedbackArgs
  }

  // Custom InputTypes
  /**
   * ServiceSessionCountOutputType without action
   */
  export type ServiceSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSessionCountOutputType
     */
    select?: ServiceSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceSessionCountOutputType without action
   */
  export type ServiceSessionCountOutputTypeCountSessionFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionFeedbackWhereInput
  }


  /**
   * Count Type StaffCountOutputType
   */

  export type StaffCountOutputType = {
    beneficiaries: number
    ServiceSession: number
  }

  export type StaffCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    beneficiaries?: boolean | StaffCountOutputTypeCountBeneficiariesArgs
    ServiceSession?: boolean | StaffCountOutputTypeCountServiceSessionArgs
  }

  // Custom InputTypes
  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCountOutputType
     */
    select?: StaffCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountBeneficiariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeneficiaryWhereInput
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountServiceSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceSessionWhereInput
  }


  /**
   * Count Type BeneficiaryCountOutputType
   */

  export type BeneficiaryCountOutputType = {
    ServiceSession: number
  }

  export type BeneficiaryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceSession?: boolean | BeneficiaryCountOutputTypeCountServiceSessionArgs
  }

  // Custom InputTypes
  /**
   * BeneficiaryCountOutputType without action
   */
  export type BeneficiaryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryCountOutputType
     */
    select?: BeneficiaryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BeneficiaryCountOutputType without action
   */
  export type BeneficiaryCountOutputTypeCountServiceSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceSessionWhereInput
  }


  /**
   * Count Type KPICountOutputType
   */

  export type KPICountOutputType = {
    assignments: number
  }

  export type KPICountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | KPICountOutputTypeCountAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * KPICountOutputType without action
   */
  export type KPICountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPICountOutputType
     */
    select?: KPICountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KPICountOutputType without action
   */
  export type KPICountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIAssignmentWhereInput
  }


  /**
   * Count Type KpiTypeCountOutputType
   */

  export type KpiTypeCountOutputType = {
    kpis: number
  }

  export type KpiTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpis?: boolean | KpiTypeCountOutputTypeCountKpisArgs
  }

  // Custom InputTypes
  /**
   * KpiTypeCountOutputType without action
   */
  export type KpiTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiTypeCountOutputType
     */
    select?: KpiTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KpiTypeCountOutputType without action
   */
  export type KpiTypeCountOutputTypeCountKpisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIWhereInput
  }


  /**
   * Count Type DocumentCountOutputType
   */

  export type DocumentCountOutputType = {
    nextVersions: number
  }

  export type DocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nextVersions?: boolean | DocumentCountOutputTypeCountNextVersionsArgs
  }

  // Custom InputTypes
  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DocumentCountOutputType
     */
    select?: DocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DocumentCountOutputType without action
   */
  export type DocumentCountOutputTypeCountNextVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }


  /**
   * Count Type EntityChangeCountOutputType
   */

  export type EntityChangeCountOutputType = {
    fieldChanges: number
  }

  export type EntityChangeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fieldChanges?: boolean | EntityChangeCountOutputTypeCountFieldChangesArgs
  }

  // Custom InputTypes
  /**
   * EntityChangeCountOutputType without action
   */
  export type EntityChangeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChangeCountOutputType
     */
    select?: EntityChangeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EntityChangeCountOutputType without action
   */
  export type EntityChangeCountOutputTypeCountFieldChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldChangeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    emailVerified: Date | null
    lastLoginAt: Date | null
    preferredLanguage: $Enums.Language | null
    timezone: string | null
    isTwoFactorEnabled: boolean | null
    status: $Enums.UserStatus | null
    statusChangedAt: Date | null
    inactiveReason: string | null
    suspensionReason: string | null
    banReason: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    emailVerified: Date | null
    lastLoginAt: Date | null
    preferredLanguage: $Enums.Language | null
    timezone: string | null
    isTwoFactorEnabled: boolean | null
    status: $Enums.UserStatus | null
    statusChangedAt: Date | null
    inactiveReason: string | null
    suspensionReason: string | null
    banReason: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    emailVerified: number
    lastLoginAt: number
    preferredLanguage: number
    timezone: number
    isTwoFactorEnabled: number
    status: number
    statusChangedAt: number
    inactiveReason: number
    suspensionReason: number
    banReason: number
    metadata: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    emailVerified?: true
    lastLoginAt?: true
    preferredLanguage?: true
    timezone?: true
    isTwoFactorEnabled?: true
    status?: true
    statusChangedAt?: true
    inactiveReason?: true
    suspensionReason?: true
    banReason?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    emailVerified?: true
    lastLoginAt?: true
    preferredLanguage?: true
    timezone?: true
    isTwoFactorEnabled?: true
    status?: true
    statusChangedAt?: true
    inactiveReason?: true
    suspensionReason?: true
    banReason?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    emailVerified?: true
    lastLoginAt?: true
    preferredLanguage?: true
    timezone?: true
    isTwoFactorEnabled?: true
    status?: true
    statusChangedAt?: true
    inactiveReason?: true
    suspensionReason?: true
    banReason?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string | null
    password: string | null
    emailVerified: Date | null
    lastLoginAt: Date | null
    preferredLanguage: $Enums.Language | null
    timezone: string | null
    isTwoFactorEnabled: boolean
    status: $Enums.UserStatus
    statusChangedAt: Date | null
    inactiveReason: string | null
    suspensionReason: string | null
    banReason: string | null
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    emailVerified?: boolean
    lastLoginAt?: boolean
    preferredLanguage?: boolean
    timezone?: boolean
    isTwoFactorEnabled?: boolean
    status?: boolean
    statusChangedAt?: boolean
    inactiveReason?: boolean
    suspensionReason?: boolean
    banReason?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    userRoles?: boolean | User$userRolesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    staffProfiles?: boolean | User$staffProfilesArgs<ExtArgs>
    beneficiaries?: boolean | User$beneficiariesArgs<ExtArgs>
    guardianOf?: boolean | User$guardianOfArgs<ExtArgs>
    statusTransitions?: boolean | User$statusTransitionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    emailVerified?: boolean
    lastLoginAt?: boolean
    preferredLanguage?: boolean
    timezone?: boolean
    isTwoFactorEnabled?: boolean
    status?: boolean
    statusChangedAt?: boolean
    inactiveReason?: boolean
    suspensionReason?: boolean
    banReason?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    emailVerified?: boolean
    lastLoginAt?: boolean
    preferredLanguage?: boolean
    timezone?: boolean
    isTwoFactorEnabled?: boolean
    status?: boolean
    statusChangedAt?: boolean
    inactiveReason?: boolean
    suspensionReason?: boolean
    banReason?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    emailVerified?: boolean
    lastLoginAt?: boolean
    preferredLanguage?: boolean
    timezone?: boolean
    isTwoFactorEnabled?: boolean
    status?: boolean
    statusChangedAt?: boolean
    inactiveReason?: boolean
    suspensionReason?: boolean
    banReason?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "emailVerified" | "lastLoginAt" | "preferredLanguage" | "timezone" | "isTwoFactorEnabled" | "status" | "statusChangedAt" | "inactiveReason" | "suspensionReason" | "banReason" | "metadata" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    userRoles?: boolean | User$userRolesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    documents?: boolean | User$documentsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    staffProfiles?: boolean | User$staffProfilesArgs<ExtArgs>
    beneficiaries?: boolean | User$beneficiariesArgs<ExtArgs>
    guardianOf?: boolean | User$guardianOfArgs<ExtArgs>
    statusTransitions?: boolean | User$statusTransitionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      userRoles: Prisma.$UserRolePayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      staffProfiles: Prisma.$StaffPayload<ExtArgs>[]
      beneficiaries: Prisma.$BeneficiaryPayload<ExtArgs>[]
      guardianOf: Prisma.$BeneficiaryPayload<ExtArgs>[]
      statusTransitions: Prisma.$UserStatusTransitionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string | null
      password: string | null
      emailVerified: Date | null
      lastLoginAt: Date | null
      preferredLanguage: $Enums.Language | null
      timezone: string | null
      isTwoFactorEnabled: boolean
      status: $Enums.UserStatus
      statusChangedAt: Date | null
      inactiveReason: string | null
      suspensionReason: string | null
      banReason: string | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userRoles<T extends User$userRolesArgs<ExtArgs> = {}>(args?: Subset<T, User$userRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends User$documentsArgs<ExtArgs> = {}>(args?: Subset<T, User$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    staffProfiles<T extends User$staffProfilesArgs<ExtArgs> = {}>(args?: Subset<T, User$staffProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    beneficiaries<T extends User$beneficiariesArgs<ExtArgs> = {}>(args?: Subset<T, User$beneficiariesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    guardianOf<T extends User$guardianOfArgs<ExtArgs> = {}>(args?: Subset<T, User$guardianOfArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    statusTransitions<T extends User$statusTransitionsArgs<ExtArgs> = {}>(args?: Subset<T, User$statusTransitionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly preferredLanguage: FieldRef<"User", 'Language'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly isTwoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly statusChangedAt: FieldRef<"User", 'DateTime'>
    readonly inactiveReason: FieldRef<"User", 'String'>
    readonly suspensionReason: FieldRef<"User", 'String'>
    readonly banReason: FieldRef<"User", 'String'>
    readonly metadata: FieldRef<"User", 'Json'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.userRoles
   */
  export type User$userRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.documents
   */
  export type User$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User.staffProfiles
   */
  export type User$staffProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    cursor?: StaffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * User.beneficiaries
   */
  export type User$beneficiariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    where?: BeneficiaryWhereInput
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    cursor?: BeneficiaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BeneficiaryScalarFieldEnum | BeneficiaryScalarFieldEnum[]
  }

  /**
   * User.guardianOf
   */
  export type User$guardianOfArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    where?: BeneficiaryWhereInput
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    cursor?: BeneficiaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BeneficiaryScalarFieldEnum | BeneficiaryScalarFieldEnum[]
  }

  /**
   * User.statusTransitions
   */
  export type User$statusTransitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    where?: UserStatusTransitionWhereInput
    orderBy?: UserStatusTransitionOrderByWithRelationInput | UserStatusTransitionOrderByWithRelationInput[]
    cursor?: UserStatusTransitionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserStatusTransitionScalarFieldEnum | UserStatusTransitionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    lastLoginAt: Date | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    lastLoginAt: Date | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    lastLoginAt: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    lastLoginAt?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    lastLoginAt?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    lastLoginAt?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    lastLoginAt: Date | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    lastLoginAt?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    lastLoginAt?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    lastLoginAt?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    lastLoginAt?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state" | "lastLoginAt" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      lastLoginAt: Date | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly lastLoginAt: FieldRef<"Account", 'DateTime'>
    readonly deletedAt: FieldRef<"Account", 'DateTime'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    ipAddress: string | null
    userAgent: string | null
    isValid: boolean | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    ipAddress: string | null
    userAgent: string | null
    isValid: boolean | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    ipAddress: number
    userAgent: number
    isValid: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    ipAddress?: true
    userAgent?: true
    isValid?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    ipAddress?: true
    userAgent?: true
    isValid?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    ipAddress?: true
    userAgent?: true
    isValid?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    ipAddress: string | null
    userAgent: string | null
    isValid: boolean
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isValid?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isValid?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isValid?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isValid?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires" | "ipAddress" | "userAgent" | "isValid", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
      ipAddress: string | null
      userAgent: string | null
      isValid: boolean
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly isValid: FieldRef<"Session", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    deletedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    deletedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    deletedAt: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    deletedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    deletedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    deletedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    description: string | null
    deletedAt: Date | null
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    deletedAt?: boolean
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    deletedAt?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "deletedAt", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      permissions: Prisma.$RolePermissionPayload<ExtArgs>[]
      users: Prisma.$UserRolePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      deletedAt: Date | null
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permissions<T extends Role$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Role$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly deletedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.permissions
   */
  export type Role$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    deletedAt: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    deletedAt: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    description: number
    deletedAt: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    deletedAt?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    deletedAt?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    deletedAt?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    name: string
    description: string | null
    deletedAt: Date | null
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    deletedAt?: boolean
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    deletedAt?: boolean
  }

  export type PermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "deletedAt", ExtArgs["result"]["permission"]>
  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      roles: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      deletedAt: Date | null
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions and returns the data updated in the database.
     * @param {PermissionUpdateManyAndReturnArgs} args - Arguments to update many Permissions.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, PermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roles<T extends Permission$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly deletedAt: FieldRef<"Permission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission updateManyAndReturn
   */
  export type PermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to delete.
     */
    limit?: number
  }

  /**
   * Permission.roles
   */
  export type Permission$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionMinAggregateOutputType = {
    id: string | null
    roleId: string | null
    permissionId: string | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    id: string | null
    roleId: string | null
    permissionId: string | null
  }

  export type RolePermissionCountAggregateOutputType = {
    id: number
    roleId: number
    permissionId: number
    _all: number
  }


  export type RolePermissionMinAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
  }

  export type RolePermissionCountAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    id: string
    roleId: string
    permissionId: string
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectScalar = {
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
  }

  export type RolePermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roleId" | "permissionId", ExtArgs["result"]["rolePermission"]>
  export type RolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type RolePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type RolePermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $RolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roleId: string
      permissionId: string
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }

  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolePermissionFindUniqueArgs>(args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolePermissionFindFirstArgs>(args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RolePermissionFindManyArgs>(args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
     */
    create<T extends RolePermissionCreateArgs>(args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RolePermissions.
     * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolePermissionCreateManyArgs>(args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RolePermissions and returns the data saved in the database.
     * @param {RolePermissionCreateManyAndReturnArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RolePermissions and only return the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RolePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, RolePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
     */
    delete<T extends RolePermissionDeleteArgs>(args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolePermissionUpdateArgs>(args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolePermissionDeleteManyArgs>(args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolePermissionUpdateManyArgs>(args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions and returns the data updated in the database.
     * @param {RolePermissionUpdateManyAndReturnArgs} args - Arguments to update many RolePermissions.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RolePermissions and only return the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RolePermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, RolePermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
     */
    upsert<T extends RolePermissionUpsertArgs>(args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolePermission model
   */
  interface RolePermissionFieldRefs {
    readonly id: FieldRef<"RolePermission", 'String'>
    readonly roleId: FieldRef<"RolePermission", 'String'>
    readonly permissionId: FieldRef<"RolePermission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }

  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RolePermission createManyAndReturn
   */
  export type RolePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
    /**
     * Limit how many RolePermissions to update.
     */
    limit?: number
  }

  /**
   * RolePermission updateManyAndReturn
   */
  export type RolePermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
    /**
     * Limit how many RolePermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }

  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
    /**
     * Limit how many RolePermissions to delete.
     */
    limit?: number
  }

  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RolePermission
     */
    omit?: RolePermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleMinAggregateOutputType = {
    id: string | null
    userId: string | null
    roleId: string | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    roleId: string | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    userId: number
    roleId: number
    _all: number
  }


  export type UserRoleMinAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    userId?: true
    roleId?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    id: string
    userId: string
    roleId: string
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    id?: boolean
    userId?: boolean
    roleId?: boolean
  }

  export type UserRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "roleId", ExtArgs["result"]["userRole"]>
  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      roleId: string
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoles and returns the data saved in the database.
     * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoles and only return the `id`
     * const userRoleWithIdOnly = await prisma.userRole.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles and returns the data updated in the database.
     * @param {UserRoleUpdateManyAndReturnArgs} args - Arguments to update many UserRoles.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserRoles and only return the `id`
     * const userRoleWithIdOnly = await prisma.userRole.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserRoleUpdateManyAndReturnArgs>(args: SelectSubset<T, UserRoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */
  interface UserRoleFieldRefs {
    readonly id: FieldRef<"UserRole", 'String'>
    readonly userId: FieldRef<"UserRole", 'String'>
    readonly roleId: FieldRef<"UserRole", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole createManyAndReturn
   */
  export type UserRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
  }

  /**
   * UserRole updateManyAndReturn
   */
  export type UserRoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
    /**
     * Limit how many UserRoles to delete.
     */
    limit?: number
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserRole
     */
    omit?: UserRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    preferredName: string | null
    dob: Date | null
    gender: $Enums.Gender | null
    phone: string | null
    email: string | null
    image: string | null
    address: string | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    emergencyContactEmail: string | null
    preferredLanguage: $Enums.Language | null
    preferredContactMethod: $Enums.ContactMethod | null
    deletedAt: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    preferredName: string | null
    dob: Date | null
    gender: $Enums.Gender | null
    phone: string | null
    email: string | null
    image: string | null
    address: string | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    emergencyContactEmail: string | null
    preferredLanguage: $Enums.Language | null
    preferredContactMethod: $Enums.ContactMethod | null
    deletedAt: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    fullName: number
    preferredName: number
    dob: number
    gender: number
    phone: number
    email: number
    image: number
    address: number
    emergencyContactName: number
    emergencyContactPhone: number
    emergencyContactEmail: number
    preferredLanguage: number
    preferredContactMethod: number
    metadata: number
    deletedAt: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    fullName?: true
    preferredName?: true
    dob?: true
    gender?: true
    phone?: true
    email?: true
    image?: true
    address?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    emergencyContactEmail?: true
    preferredLanguage?: true
    preferredContactMethod?: true
    deletedAt?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    fullName?: true
    preferredName?: true
    dob?: true
    gender?: true
    phone?: true
    email?: true
    image?: true
    address?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    emergencyContactEmail?: true
    preferredLanguage?: true
    preferredContactMethod?: true
    deletedAt?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    fullName?: true
    preferredName?: true
    dob?: true
    gender?: true
    phone?: true
    email?: true
    image?: true
    address?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    emergencyContactEmail?: true
    preferredLanguage?: true
    preferredContactMethod?: true
    metadata?: true
    deletedAt?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    fullName: string
    preferredName: string | null
    dob: Date | null
    gender: $Enums.Gender | null
    phone: string | null
    email: string | null
    image: string | null
    address: string | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    emergencyContactEmail: string | null
    preferredLanguage: $Enums.Language | null
    preferredContactMethod: $Enums.ContactMethod | null
    metadata: JsonValue | null
    deletedAt: Date | null
    userId: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    preferredName?: boolean
    dob?: boolean
    gender?: boolean
    phone?: boolean
    email?: boolean
    image?: boolean
    address?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    preferredLanguage?: boolean
    preferredContactMethod?: boolean
    metadata?: boolean
    deletedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Profile$userArgs<ExtArgs>
    staff?: boolean | Profile$staffArgs<ExtArgs>
    beneficiary?: boolean | Profile$beneficiaryArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    preferredName?: boolean
    dob?: boolean
    gender?: boolean
    phone?: boolean
    email?: boolean
    image?: boolean
    address?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    preferredLanguage?: boolean
    preferredContactMethod?: boolean
    metadata?: boolean
    deletedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Profile$userArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    preferredName?: boolean
    dob?: boolean
    gender?: boolean
    phone?: boolean
    email?: boolean
    image?: boolean
    address?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    preferredLanguage?: boolean
    preferredContactMethod?: boolean
    metadata?: boolean
    deletedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Profile$userArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    fullName?: boolean
    preferredName?: boolean
    dob?: boolean
    gender?: boolean
    phone?: boolean
    email?: boolean
    image?: boolean
    address?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    preferredLanguage?: boolean
    preferredContactMethod?: boolean
    metadata?: boolean
    deletedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "preferredName" | "dob" | "gender" | "phone" | "email" | "image" | "address" | "emergencyContactName" | "emergencyContactPhone" | "emergencyContactEmail" | "preferredLanguage" | "preferredContactMethod" | "metadata" | "deletedAt" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Profile$userArgs<ExtArgs>
    staff?: boolean | Profile$staffArgs<ExtArgs>
    beneficiary?: boolean | Profile$beneficiaryArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Profile$userArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Profile$userArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      staff: Prisma.$StaffPayload<ExtArgs> | null
      beneficiary: Prisma.$BeneficiaryPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      preferredName: string | null
      dob: Date | null
      gender: $Enums.Gender | null
      phone: string | null
      email: string | null
      image: string | null
      address: string | null
      emergencyContactName: string | null
      emergencyContactPhone: string | null
      emergencyContactEmail: string | null
      preferredLanguage: $Enums.Language | null
      preferredContactMethod: $Enums.ContactMethod | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      userId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Profile$userArgs<ExtArgs> = {}>(args?: Subset<T, Profile$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    staff<T extends Profile$staffArgs<ExtArgs> = {}>(args?: Subset<T, Profile$staffArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    beneficiary<T extends Profile$beneficiaryArgs<ExtArgs> = {}>(args?: Subset<T, Profile$beneficiaryArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly fullName: FieldRef<"Profile", 'String'>
    readonly preferredName: FieldRef<"Profile", 'String'>
    readonly dob: FieldRef<"Profile", 'DateTime'>
    readonly gender: FieldRef<"Profile", 'Gender'>
    readonly phone: FieldRef<"Profile", 'String'>
    readonly email: FieldRef<"Profile", 'String'>
    readonly image: FieldRef<"Profile", 'String'>
    readonly address: FieldRef<"Profile", 'String'>
    readonly emergencyContactName: FieldRef<"Profile", 'String'>
    readonly emergencyContactPhone: FieldRef<"Profile", 'String'>
    readonly emergencyContactEmail: FieldRef<"Profile", 'String'>
    readonly preferredLanguage: FieldRef<"Profile", 'Language'>
    readonly preferredContactMethod: FieldRef<"Profile", 'ContactMethod'>
    readonly metadata: FieldRef<"Profile", 'Json'>
    readonly deletedAt: FieldRef<"Profile", 'DateTime'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile.user
   */
  export type Profile$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Profile.staff
   */
  export type Profile$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * Profile.beneficiary
   */
  export type Profile$beneficiaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    where?: BeneficiaryWhereInput
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    website: string | null
    address: string | null
    billingAddress: string | null
    taxId: string | null
    contactPerson: string | null
    contactEmail: string | null
    contactPhone: string | null
    industryId: string | null
    status: $Enums.BaseStatus | null
    preferredContactMethod: $Enums.ContactMethod | null
    timezone: string | null
    isVerified: boolean | null
    notes: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    website: string | null
    address: string | null
    billingAddress: string | null
    taxId: string | null
    contactPerson: string | null
    contactEmail: string | null
    contactPhone: string | null
    industryId: string | null
    status: $Enums.BaseStatus | null
    preferredContactMethod: $Enums.ContactMethod | null
    timezone: string | null
    isVerified: boolean | null
    notes: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    website: number
    address: number
    billingAddress: number
    taxId: number
    contactPerson: number
    contactEmail: number
    contactPhone: number
    industryId: number
    status: number
    preferredContactMethod: number
    timezone: number
    isVerified: number
    notes: number
    metadata: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    website?: true
    address?: true
    billingAddress?: true
    taxId?: true
    contactPerson?: true
    contactEmail?: true
    contactPhone?: true
    industryId?: true
    status?: true
    preferredContactMethod?: true
    timezone?: true
    isVerified?: true
    notes?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    website?: true
    address?: true
    billingAddress?: true
    taxId?: true
    contactPerson?: true
    contactEmail?: true
    contactPhone?: true
    industryId?: true
    status?: true
    preferredContactMethod?: true
    timezone?: true
    isVerified?: true
    notes?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    website?: true
    address?: true
    billingAddress?: true
    taxId?: true
    contactPerson?: true
    contactEmail?: true
    contactPhone?: true
    industryId?: true
    status?: true
    preferredContactMethod?: true
    timezone?: true
    isVerified?: true
    notes?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Client to aggregate.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithAggregationInput | ClientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: string
    name: string
    email: string | null
    phone: string | null
    website: string | null
    address: string | null
    billingAddress: string | null
    taxId: string | null
    contactPerson: string | null
    contactEmail: string | null
    contactPhone: string | null
    industryId: string | null
    status: $Enums.BaseStatus
    preferredContactMethod: $Enums.ContactMethod | null
    timezone: string | null
    isVerified: boolean
    notes: string | null
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ClientCountAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    website?: boolean
    address?: boolean
    billingAddress?: boolean
    taxId?: boolean
    contactPerson?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    industryId?: boolean
    status?: boolean
    preferredContactMethod?: boolean
    timezone?: boolean
    isVerified?: boolean
    notes?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    industry?: boolean | Client$industryArgs<ExtArgs>
    contracts?: boolean | Client$contractsArgs<ExtArgs>
    documents?: boolean | Client$documentsArgs<ExtArgs>
    kpis?: boolean | Client$kpisArgs<ExtArgs>
    kpiAssignments?: boolean | Client$kpiAssignmentsArgs<ExtArgs>
    serviceAssignments?: boolean | Client$serviceAssignmentsArgs<ExtArgs>
    staff?: boolean | Client$staffArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    website?: boolean
    address?: boolean
    billingAddress?: boolean
    taxId?: boolean
    contactPerson?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    industryId?: boolean
    status?: boolean
    preferredContactMethod?: boolean
    timezone?: boolean
    isVerified?: boolean
    notes?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    industry?: boolean | Client$industryArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    website?: boolean
    address?: boolean
    billingAddress?: boolean
    taxId?: boolean
    contactPerson?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    industryId?: boolean
    status?: boolean
    preferredContactMethod?: boolean
    timezone?: boolean
    isVerified?: boolean
    notes?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    industry?: boolean | Client$industryArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>

  export type ClientSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    website?: boolean
    address?: boolean
    billingAddress?: boolean
    taxId?: boolean
    contactPerson?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    industryId?: boolean
    status?: boolean
    preferredContactMethod?: boolean
    timezone?: boolean
    isVerified?: boolean
    notes?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "website" | "address" | "billingAddress" | "taxId" | "contactPerson" | "contactEmail" | "contactPhone" | "industryId" | "status" | "preferredContactMethod" | "timezone" | "isVerified" | "notes" | "metadata" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["client"]>
  export type ClientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    industry?: boolean | Client$industryArgs<ExtArgs>
    contracts?: boolean | Client$contractsArgs<ExtArgs>
    documents?: boolean | Client$documentsArgs<ExtArgs>
    kpis?: boolean | Client$kpisArgs<ExtArgs>
    kpiAssignments?: boolean | Client$kpiAssignmentsArgs<ExtArgs>
    serviceAssignments?: boolean | Client$serviceAssignmentsArgs<ExtArgs>
    staff?: boolean | Client$staffArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    industry?: boolean | Client$industryArgs<ExtArgs>
  }
  export type ClientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    industry?: boolean | Client$industryArgs<ExtArgs>
  }

  export type $ClientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Client"
    objects: {
      industry: Prisma.$IndustryPayload<ExtArgs> | null
      contracts: Prisma.$ContractPayload<ExtArgs>[]
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      kpis: Prisma.$KPIPayload<ExtArgs>[]
      kpiAssignments: Prisma.$KPIAssignmentPayload<ExtArgs>[]
      serviceAssignments: Prisma.$ServiceAssignmentPayload<ExtArgs>[]
      staff: Prisma.$StaffPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string | null
      phone: string | null
      website: string | null
      address: string | null
      billingAddress: string | null
      taxId: string | null
      contactPerson: string | null
      contactEmail: string | null
      contactPhone: string | null
      industryId: string | null
      status: $Enums.BaseStatus
      preferredContactMethod: $Enums.ContactMethod | null
      timezone: string | null
      isVerified: boolean
      notes: string | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type ClientGetPayload<S extends boolean | null | undefined | ClientDefaultArgs> = $Result.GetResult<Prisma.$ClientPayload, S>

  type ClientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface ClientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Client'], meta: { name: 'Client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientFindUniqueArgs>(args: SelectSubset<T, ClientFindUniqueArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientFindFirstArgs>(args?: SelectSubset<T, ClientFindFirstArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientFindManyArgs>(args?: SelectSubset<T, ClientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends ClientCreateArgs>(args: SelectSubset<T, ClientCreateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientCreateManyArgs>(args?: SelectSubset<T, ClientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clients and returns the data saved in the database.
     * @param {ClientCreateManyAndReturnArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends ClientDeleteArgs>(args: SelectSubset<T, ClientDeleteArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientUpdateArgs>(args: SelectSubset<T, ClientUpdateArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientDeleteManyArgs>(args?: SelectSubset<T, ClientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientUpdateManyArgs>(args: SelectSubset<T, ClientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients and returns the data updated in the database.
     * @param {ClientUpdateManyAndReturnArgs} args - Arguments to update many Clients.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Clients and only return the `id`
     * const clientWithIdOnly = await prisma.client.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends ClientUpsertArgs>(args: SelectSubset<T, ClientUpsertArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Client model
   */
  readonly fields: ClientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    industry<T extends Client$industryArgs<ExtArgs> = {}>(args?: Subset<T, Client$industryArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    contracts<T extends Client$contractsArgs<ExtArgs> = {}>(args?: Subset<T, Client$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    documents<T extends Client$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Client$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    kpis<T extends Client$kpisArgs<ExtArgs> = {}>(args?: Subset<T, Client$kpisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    kpiAssignments<T extends Client$kpiAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Client$kpiAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    serviceAssignments<T extends Client$serviceAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Client$serviceAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    staff<T extends Client$staffArgs<ExtArgs> = {}>(args?: Subset<T, Client$staffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Client model
   */
  interface ClientFieldRefs {
    readonly id: FieldRef<"Client", 'String'>
    readonly name: FieldRef<"Client", 'String'>
    readonly email: FieldRef<"Client", 'String'>
    readonly phone: FieldRef<"Client", 'String'>
    readonly website: FieldRef<"Client", 'String'>
    readonly address: FieldRef<"Client", 'String'>
    readonly billingAddress: FieldRef<"Client", 'String'>
    readonly taxId: FieldRef<"Client", 'String'>
    readonly contactPerson: FieldRef<"Client", 'String'>
    readonly contactEmail: FieldRef<"Client", 'String'>
    readonly contactPhone: FieldRef<"Client", 'String'>
    readonly industryId: FieldRef<"Client", 'String'>
    readonly status: FieldRef<"Client", 'BaseStatus'>
    readonly preferredContactMethod: FieldRef<"Client", 'ContactMethod'>
    readonly timezone: FieldRef<"Client", 'String'>
    readonly isVerified: FieldRef<"Client", 'Boolean'>
    readonly notes: FieldRef<"Client", 'String'>
    readonly metadata: FieldRef<"Client", 'Json'>
    readonly deletedAt: FieldRef<"Client", 'DateTime'>
    readonly createdAt: FieldRef<"Client", 'DateTime'>
    readonly updatedAt: FieldRef<"Client", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Client findUnique
   */
  export type ClientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client findFirst
   */
  export type ClientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Client to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client findMany
   */
  export type ClientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter, which Clients to fetch.
     */
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     */
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     */
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Client create
   */
  export type ClientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to create a Client.
     */
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }

  /**
   * Client createMany
   */
  export type ClientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Client createManyAndReturn
   */
  export type ClientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to create many Clients.
     */
    data: ClientCreateManyInput | ClientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Client update
   */
  export type ClientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The data needed to update a Client.
     */
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
  }

  /**
   * Client updateManyAndReturn
   */
  export type ClientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * The data used to update Clients.
     */
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Client upsert
   */
  export type ClientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * The filter to search for the Client to update in case it exists.
     */
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     */
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }

  /**
   * Client delete
   */
  export type ClientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    /**
     * Filter which Client to delete.
     */
    where: ClientWhereUniqueInput
  }

  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clients to delete
     */
    where?: ClientWhereInput
    /**
     * Limit how many Clients to delete.
     */
    limit?: number
  }

  /**
   * Client.industry
   */
  export type Client$industryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    where?: IndustryWhereInput
  }

  /**
   * Client.contracts
   */
  export type Client$contractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    cursor?: ContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Client.documents
   */
  export type Client$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Client.kpis
   */
  export type Client$kpisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    where?: KPIWhereInput
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    cursor?: KPIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KPIScalarFieldEnum | KPIScalarFieldEnum[]
  }

  /**
   * Client.kpiAssignments
   */
  export type Client$kpiAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    where?: KPIAssignmentWhereInput
    orderBy?: KPIAssignmentOrderByWithRelationInput | KPIAssignmentOrderByWithRelationInput[]
    cursor?: KPIAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KPIAssignmentScalarFieldEnum | KPIAssignmentScalarFieldEnum[]
  }

  /**
   * Client.serviceAssignments
   */
  export type Client$serviceAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    where?: ServiceAssignmentWhereInput
    orderBy?: ServiceAssignmentOrderByWithRelationInput | ServiceAssignmentOrderByWithRelationInput[]
    cursor?: ServiceAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceAssignmentScalarFieldEnum | ServiceAssignmentScalarFieldEnum[]
  }

  /**
   * Client.staff
   */
  export type Client$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    cursor?: StaffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Client without action
   */
  export type ClientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
  }


  /**
   * Model Industry
   */

  export type AggregateIndustry = {
    _count: IndustryCountAggregateOutputType | null
    _min: IndustryMinAggregateOutputType | null
    _max: IndustryMaxAggregateOutputType | null
  }

  export type IndustryMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    parentId: string | null
    externalId: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IndustryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    parentId: string | null
    externalId: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IndustryCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    parentId: number
    externalId: number
    metadata: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IndustryMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    parentId?: true
    externalId?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IndustryMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    parentId?: true
    externalId?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IndustryCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    parentId?: true
    externalId?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IndustryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Industry to aggregate.
     */
    where?: IndustryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Industries to fetch.
     */
    orderBy?: IndustryOrderByWithRelationInput | IndustryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IndustryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Industries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Industries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Industries
    **/
    _count?: true | IndustryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IndustryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IndustryMaxAggregateInputType
  }

  export type GetIndustryAggregateType<T extends IndustryAggregateArgs> = {
        [P in keyof T & keyof AggregateIndustry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIndustry[P]>
      : GetScalarType<T[P], AggregateIndustry[P]>
  }




  export type IndustryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IndustryWhereInput
    orderBy?: IndustryOrderByWithAggregationInput | IndustryOrderByWithAggregationInput[]
    by: IndustryScalarFieldEnum[] | IndustryScalarFieldEnum
    having?: IndustryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IndustryCountAggregateInputType | true
    _min?: IndustryMinAggregateInputType
    _max?: IndustryMaxAggregateInputType
  }

  export type IndustryGroupByOutputType = {
    id: string
    name: string
    code: string | null
    description: string | null
    parentId: string | null
    externalId: string | null
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: IndustryCountAggregateOutputType | null
    _min: IndustryMinAggregateOutputType | null
    _max: IndustryMaxAggregateOutputType | null
  }

  type GetIndustryGroupByPayload<T extends IndustryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IndustryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IndustryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IndustryGroupByOutputType[P]>
            : GetScalarType<T[P], IndustryGroupByOutputType[P]>
        }
      >
    >


  export type IndustrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    parentId?: boolean
    externalId?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Industry$parentArgs<ExtArgs>
    children?: boolean | Industry$childrenArgs<ExtArgs>
    clients?: boolean | Industry$clientsArgs<ExtArgs>
    _count?: boolean | IndustryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["industry"]>

  export type IndustrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    parentId?: boolean
    externalId?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Industry$parentArgs<ExtArgs>
  }, ExtArgs["result"]["industry"]>

  export type IndustrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    parentId?: boolean
    externalId?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | Industry$parentArgs<ExtArgs>
  }, ExtArgs["result"]["industry"]>

  export type IndustrySelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    parentId?: boolean
    externalId?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type IndustryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "description" | "parentId" | "externalId" | "metadata" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["industry"]>
  export type IndustryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Industry$parentArgs<ExtArgs>
    children?: boolean | Industry$childrenArgs<ExtArgs>
    clients?: boolean | Industry$clientsArgs<ExtArgs>
    _count?: boolean | IndustryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IndustryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Industry$parentArgs<ExtArgs>
  }
  export type IndustryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Industry$parentArgs<ExtArgs>
  }

  export type $IndustryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Industry"
    objects: {
      parent: Prisma.$IndustryPayload<ExtArgs> | null
      children: Prisma.$IndustryPayload<ExtArgs>[]
      clients: Prisma.$ClientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string | null
      description: string | null
      parentId: string | null
      externalId: string | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["industry"]>
    composites: {}
  }

  type IndustryGetPayload<S extends boolean | null | undefined | IndustryDefaultArgs> = $Result.GetResult<Prisma.$IndustryPayload, S>

  type IndustryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IndustryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IndustryCountAggregateInputType | true
    }

  export interface IndustryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Industry'], meta: { name: 'Industry' } }
    /**
     * Find zero or one Industry that matches the filter.
     * @param {IndustryFindUniqueArgs} args - Arguments to find a Industry
     * @example
     * // Get one Industry
     * const industry = await prisma.industry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IndustryFindUniqueArgs>(args: SelectSubset<T, IndustryFindUniqueArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Industry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IndustryFindUniqueOrThrowArgs} args - Arguments to find a Industry
     * @example
     * // Get one Industry
     * const industry = await prisma.industry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IndustryFindUniqueOrThrowArgs>(args: SelectSubset<T, IndustryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Industry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustryFindFirstArgs} args - Arguments to find a Industry
     * @example
     * // Get one Industry
     * const industry = await prisma.industry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IndustryFindFirstArgs>(args?: SelectSubset<T, IndustryFindFirstArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Industry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustryFindFirstOrThrowArgs} args - Arguments to find a Industry
     * @example
     * // Get one Industry
     * const industry = await prisma.industry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IndustryFindFirstOrThrowArgs>(args?: SelectSubset<T, IndustryFindFirstOrThrowArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Industries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Industries
     * const industries = await prisma.industry.findMany()
     * 
     * // Get first 10 Industries
     * const industries = await prisma.industry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const industryWithIdOnly = await prisma.industry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IndustryFindManyArgs>(args?: SelectSubset<T, IndustryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Industry.
     * @param {IndustryCreateArgs} args - Arguments to create a Industry.
     * @example
     * // Create one Industry
     * const Industry = await prisma.industry.create({
     *   data: {
     *     // ... data to create a Industry
     *   }
     * })
     * 
     */
    create<T extends IndustryCreateArgs>(args: SelectSubset<T, IndustryCreateArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Industries.
     * @param {IndustryCreateManyArgs} args - Arguments to create many Industries.
     * @example
     * // Create many Industries
     * const industry = await prisma.industry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IndustryCreateManyArgs>(args?: SelectSubset<T, IndustryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Industries and returns the data saved in the database.
     * @param {IndustryCreateManyAndReturnArgs} args - Arguments to create many Industries.
     * @example
     * // Create many Industries
     * const industry = await prisma.industry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Industries and only return the `id`
     * const industryWithIdOnly = await prisma.industry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IndustryCreateManyAndReturnArgs>(args?: SelectSubset<T, IndustryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Industry.
     * @param {IndustryDeleteArgs} args - Arguments to delete one Industry.
     * @example
     * // Delete one Industry
     * const Industry = await prisma.industry.delete({
     *   where: {
     *     // ... filter to delete one Industry
     *   }
     * })
     * 
     */
    delete<T extends IndustryDeleteArgs>(args: SelectSubset<T, IndustryDeleteArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Industry.
     * @param {IndustryUpdateArgs} args - Arguments to update one Industry.
     * @example
     * // Update one Industry
     * const industry = await prisma.industry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IndustryUpdateArgs>(args: SelectSubset<T, IndustryUpdateArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Industries.
     * @param {IndustryDeleteManyArgs} args - Arguments to filter Industries to delete.
     * @example
     * // Delete a few Industries
     * const { count } = await prisma.industry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IndustryDeleteManyArgs>(args?: SelectSubset<T, IndustryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Industries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Industries
     * const industry = await prisma.industry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IndustryUpdateManyArgs>(args: SelectSubset<T, IndustryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Industries and returns the data updated in the database.
     * @param {IndustryUpdateManyAndReturnArgs} args - Arguments to update many Industries.
     * @example
     * // Update many Industries
     * const industry = await prisma.industry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Industries and only return the `id`
     * const industryWithIdOnly = await prisma.industry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IndustryUpdateManyAndReturnArgs>(args: SelectSubset<T, IndustryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Industry.
     * @param {IndustryUpsertArgs} args - Arguments to update or create a Industry.
     * @example
     * // Update or create a Industry
     * const industry = await prisma.industry.upsert({
     *   create: {
     *     // ... data to create a Industry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Industry we want to update
     *   }
     * })
     */
    upsert<T extends IndustryUpsertArgs>(args: SelectSubset<T, IndustryUpsertArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Industries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustryCountArgs} args - Arguments to filter Industries to count.
     * @example
     * // Count the number of Industries
     * const count = await prisma.industry.count({
     *   where: {
     *     // ... the filter for the Industries we want to count
     *   }
     * })
    **/
    count<T extends IndustryCountArgs>(
      args?: Subset<T, IndustryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IndustryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Industry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IndustryAggregateArgs>(args: Subset<T, IndustryAggregateArgs>): Prisma.PrismaPromise<GetIndustryAggregateType<T>>

    /**
     * Group by Industry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IndustryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IndustryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IndustryGroupByArgs['orderBy'] }
        : { orderBy?: IndustryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IndustryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIndustryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Industry model
   */
  readonly fields: IndustryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Industry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IndustryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Industry$parentArgs<ExtArgs> = {}>(args?: Subset<T, Industry$parentArgs<ExtArgs>>): Prisma__IndustryClient<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends Industry$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Industry$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IndustryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clients<T extends Industry$clientsArgs<ExtArgs> = {}>(args?: Subset<T, Industry$clientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Industry model
   */
  interface IndustryFieldRefs {
    readonly id: FieldRef<"Industry", 'String'>
    readonly name: FieldRef<"Industry", 'String'>
    readonly code: FieldRef<"Industry", 'String'>
    readonly description: FieldRef<"Industry", 'String'>
    readonly parentId: FieldRef<"Industry", 'String'>
    readonly externalId: FieldRef<"Industry", 'String'>
    readonly metadata: FieldRef<"Industry", 'Json'>
    readonly deletedAt: FieldRef<"Industry", 'DateTime'>
    readonly createdAt: FieldRef<"Industry", 'DateTime'>
    readonly updatedAt: FieldRef<"Industry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Industry findUnique
   */
  export type IndustryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    /**
     * Filter, which Industry to fetch.
     */
    where: IndustryWhereUniqueInput
  }

  /**
   * Industry findUniqueOrThrow
   */
  export type IndustryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    /**
     * Filter, which Industry to fetch.
     */
    where: IndustryWhereUniqueInput
  }

  /**
   * Industry findFirst
   */
  export type IndustryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    /**
     * Filter, which Industry to fetch.
     */
    where?: IndustryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Industries to fetch.
     */
    orderBy?: IndustryOrderByWithRelationInput | IndustryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Industries.
     */
    cursor?: IndustryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Industries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Industries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Industries.
     */
    distinct?: IndustryScalarFieldEnum | IndustryScalarFieldEnum[]
  }

  /**
   * Industry findFirstOrThrow
   */
  export type IndustryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    /**
     * Filter, which Industry to fetch.
     */
    where?: IndustryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Industries to fetch.
     */
    orderBy?: IndustryOrderByWithRelationInput | IndustryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Industries.
     */
    cursor?: IndustryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Industries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Industries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Industries.
     */
    distinct?: IndustryScalarFieldEnum | IndustryScalarFieldEnum[]
  }

  /**
   * Industry findMany
   */
  export type IndustryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    /**
     * Filter, which Industries to fetch.
     */
    where?: IndustryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Industries to fetch.
     */
    orderBy?: IndustryOrderByWithRelationInput | IndustryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Industries.
     */
    cursor?: IndustryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Industries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Industries.
     */
    skip?: number
    distinct?: IndustryScalarFieldEnum | IndustryScalarFieldEnum[]
  }

  /**
   * Industry create
   */
  export type IndustryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    /**
     * The data needed to create a Industry.
     */
    data: XOR<IndustryCreateInput, IndustryUncheckedCreateInput>
  }

  /**
   * Industry createMany
   */
  export type IndustryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Industries.
     */
    data: IndustryCreateManyInput | IndustryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Industry createManyAndReturn
   */
  export type IndustryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * The data used to create many Industries.
     */
    data: IndustryCreateManyInput | IndustryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Industry update
   */
  export type IndustryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    /**
     * The data needed to update a Industry.
     */
    data: XOR<IndustryUpdateInput, IndustryUncheckedUpdateInput>
    /**
     * Choose, which Industry to update.
     */
    where: IndustryWhereUniqueInput
  }

  /**
   * Industry updateMany
   */
  export type IndustryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Industries.
     */
    data: XOR<IndustryUpdateManyMutationInput, IndustryUncheckedUpdateManyInput>
    /**
     * Filter which Industries to update
     */
    where?: IndustryWhereInput
    /**
     * Limit how many Industries to update.
     */
    limit?: number
  }

  /**
   * Industry updateManyAndReturn
   */
  export type IndustryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * The data used to update Industries.
     */
    data: XOR<IndustryUpdateManyMutationInput, IndustryUncheckedUpdateManyInput>
    /**
     * Filter which Industries to update
     */
    where?: IndustryWhereInput
    /**
     * Limit how many Industries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Industry upsert
   */
  export type IndustryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    /**
     * The filter to search for the Industry to update in case it exists.
     */
    where: IndustryWhereUniqueInput
    /**
     * In case the Industry found by the `where` argument doesn't exist, create a new Industry with this data.
     */
    create: XOR<IndustryCreateInput, IndustryUncheckedCreateInput>
    /**
     * In case the Industry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IndustryUpdateInput, IndustryUncheckedUpdateInput>
  }

  /**
   * Industry delete
   */
  export type IndustryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    /**
     * Filter which Industry to delete.
     */
    where: IndustryWhereUniqueInput
  }

  /**
   * Industry deleteMany
   */
  export type IndustryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Industries to delete
     */
    where?: IndustryWhereInput
    /**
     * Limit how many Industries to delete.
     */
    limit?: number
  }

  /**
   * Industry.parent
   */
  export type Industry$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    where?: IndustryWhereInput
  }

  /**
   * Industry.children
   */
  export type Industry$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
    where?: IndustryWhereInput
    orderBy?: IndustryOrderByWithRelationInput | IndustryOrderByWithRelationInput[]
    cursor?: IndustryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IndustryScalarFieldEnum | IndustryScalarFieldEnum[]
  }

  /**
   * Industry.clients
   */
  export type Industry$clientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
    orderBy?: ClientOrderByWithRelationInput | ClientOrderByWithRelationInput[]
    cursor?: ClientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * Industry without action
   */
  export type IndustryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Industry
     */
    select?: IndustrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Industry
     */
    omit?: IndustryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IndustryInclude<ExtArgs> | null
  }


  /**
   * Model Contract
   */

  export type AggregateContract = {
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  export type ContractAvgAggregateOutputType = {
    billingRate: number | null
  }

  export type ContractSumAggregateOutputType = {
    billingRate: number | null
  }

  export type ContractMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    startDate: Date | null
    endDate: Date | null
    renewalDate: Date | null
    billingRate: number | null
    isRenewable: boolean | null
    isAutoRenew: boolean | null
    paymentStatus: $Enums.PaymentStatus | null
    paymentFrequency: string | null
    paymentTerms: string | null
    currency: string | null
    lastBillingDate: Date | null
    nextBillingDate: Date | null
    documentUrl: string | null
    status: $Enums.ContractStatus | null
    signedBy: string | null
    signedAt: Date | null
    terminationReason: string | null
    notes: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    startDate: Date | null
    endDate: Date | null
    renewalDate: Date | null
    billingRate: number | null
    isRenewable: boolean | null
    isAutoRenew: boolean | null
    paymentStatus: $Enums.PaymentStatus | null
    paymentFrequency: string | null
    paymentTerms: string | null
    currency: string | null
    lastBillingDate: Date | null
    nextBillingDate: Date | null
    documentUrl: string | null
    status: $Enums.ContractStatus | null
    signedBy: string | null
    signedAt: Date | null
    terminationReason: string | null
    notes: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContractCountAggregateOutputType = {
    id: number
    clientId: number
    startDate: number
    endDate: number
    renewalDate: number
    billingRate: number
    isRenewable: number
    isAutoRenew: number
    paymentStatus: number
    paymentFrequency: number
    paymentTerms: number
    currency: number
    lastBillingDate: number
    nextBillingDate: number
    documentUrl: number
    status: number
    signedBy: number
    signedAt: number
    terminationReason: number
    notes: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContractAvgAggregateInputType = {
    billingRate?: true
  }

  export type ContractSumAggregateInputType = {
    billingRate?: true
  }

  export type ContractMinAggregateInputType = {
    id?: true
    clientId?: true
    startDate?: true
    endDate?: true
    renewalDate?: true
    billingRate?: true
    isRenewable?: true
    isAutoRenew?: true
    paymentStatus?: true
    paymentFrequency?: true
    paymentTerms?: true
    currency?: true
    lastBillingDate?: true
    nextBillingDate?: true
    documentUrl?: true
    status?: true
    signedBy?: true
    signedAt?: true
    terminationReason?: true
    notes?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractMaxAggregateInputType = {
    id?: true
    clientId?: true
    startDate?: true
    endDate?: true
    renewalDate?: true
    billingRate?: true
    isRenewable?: true
    isAutoRenew?: true
    paymentStatus?: true
    paymentFrequency?: true
    paymentTerms?: true
    currency?: true
    lastBillingDate?: true
    nextBillingDate?: true
    documentUrl?: true
    status?: true
    signedBy?: true
    signedAt?: true
    terminationReason?: true
    notes?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContractCountAggregateInputType = {
    id?: true
    clientId?: true
    startDate?: true
    endDate?: true
    renewalDate?: true
    billingRate?: true
    isRenewable?: true
    isAutoRenew?: true
    paymentStatus?: true
    paymentFrequency?: true
    paymentTerms?: true
    currency?: true
    lastBillingDate?: true
    nextBillingDate?: true
    documentUrl?: true
    status?: true
    signedBy?: true
    signedAt?: true
    terminationReason?: true
    notes?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contract to aggregate.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contracts
    **/
    _count?: true | ContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContractMaxAggregateInputType
  }

  export type GetContractAggregateType<T extends ContractAggregateArgs> = {
        [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContract[P]>
      : GetScalarType<T[P], AggregateContract[P]>
  }




  export type ContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContractWhereInput
    orderBy?: ContractOrderByWithAggregationInput | ContractOrderByWithAggregationInput[]
    by: ContractScalarFieldEnum[] | ContractScalarFieldEnum
    having?: ContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContractCountAggregateInputType | true
    _avg?: ContractAvgAggregateInputType
    _sum?: ContractSumAggregateInputType
    _min?: ContractMinAggregateInputType
    _max?: ContractMaxAggregateInputType
  }

  export type ContractGroupByOutputType = {
    id: string
    clientId: string
    startDate: Date
    endDate: Date
    renewalDate: Date | null
    billingRate: number
    isRenewable: boolean
    isAutoRenew: boolean
    paymentStatus: $Enums.PaymentStatus
    paymentFrequency: string | null
    paymentTerms: string | null
    currency: string | null
    lastBillingDate: Date | null
    nextBillingDate: Date | null
    documentUrl: string | null
    status: $Enums.ContractStatus
    signedBy: string | null
    signedAt: Date | null
    terminationReason: string | null
    notes: string | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ContractCountAggregateOutputType | null
    _avg: ContractAvgAggregateOutputType | null
    _sum: ContractSumAggregateOutputType | null
    _min: ContractMinAggregateOutputType | null
    _max: ContractMaxAggregateOutputType | null
  }

  type GetContractGroupByPayload<T extends ContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContractGroupByOutputType[P]>
            : GetScalarType<T[P], ContractGroupByOutputType[P]>
        }
      >
    >


  export type ContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    startDate?: boolean
    endDate?: boolean
    renewalDate?: boolean
    billingRate?: boolean
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: boolean
    paymentFrequency?: boolean
    paymentTerms?: boolean
    currency?: boolean
    lastBillingDate?: boolean
    nextBillingDate?: boolean
    documentUrl?: boolean
    status?: boolean
    signedBy?: boolean
    signedAt?: boolean
    terminationReason?: boolean
    notes?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
    documents?: boolean | Contract$documentsArgs<ExtArgs>
    kpis?: boolean | Contract$kpisArgs<ExtArgs>
    kpiAssignments?: boolean | Contract$kpiAssignmentsArgs<ExtArgs>
    serviceAssignments?: boolean | Contract$serviceAssignmentsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    startDate?: boolean
    endDate?: boolean
    renewalDate?: boolean
    billingRate?: boolean
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: boolean
    paymentFrequency?: boolean
    paymentTerms?: boolean
    currency?: boolean
    lastBillingDate?: boolean
    nextBillingDate?: boolean
    documentUrl?: boolean
    status?: boolean
    signedBy?: boolean
    signedAt?: boolean
    terminationReason?: boolean
    notes?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    startDate?: boolean
    endDate?: boolean
    renewalDate?: boolean
    billingRate?: boolean
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: boolean
    paymentFrequency?: boolean
    paymentTerms?: boolean
    currency?: boolean
    lastBillingDate?: boolean
    nextBillingDate?: boolean
    documentUrl?: boolean
    status?: boolean
    signedBy?: boolean
    signedAt?: boolean
    terminationReason?: boolean
    notes?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contract"]>

  export type ContractSelectScalar = {
    id?: boolean
    clientId?: boolean
    startDate?: boolean
    endDate?: boolean
    renewalDate?: boolean
    billingRate?: boolean
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: boolean
    paymentFrequency?: boolean
    paymentTerms?: boolean
    currency?: boolean
    lastBillingDate?: boolean
    nextBillingDate?: boolean
    documentUrl?: boolean
    status?: boolean
    signedBy?: boolean
    signedAt?: boolean
    terminationReason?: boolean
    notes?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContractOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "startDate" | "endDate" | "renewalDate" | "billingRate" | "isRenewable" | "isAutoRenew" | "paymentStatus" | "paymentFrequency" | "paymentTerms" | "currency" | "lastBillingDate" | "nextBillingDate" | "documentUrl" | "status" | "signedBy" | "signedAt" | "terminationReason" | "notes" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["contract"]>
  export type ContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
    documents?: boolean | Contract$documentsArgs<ExtArgs>
    kpis?: boolean | Contract$kpisArgs<ExtArgs>
    kpiAssignments?: boolean | Contract$kpiAssignmentsArgs<ExtArgs>
    serviceAssignments?: boolean | Contract$serviceAssignmentsArgs<ExtArgs>
    _count?: boolean | ContractCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type ContractIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $ContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contract"
    objects: {
      client: Prisma.$ClientPayload<ExtArgs>
      documents: Prisma.$DocumentPayload<ExtArgs>[]
      kpis: Prisma.$KPIPayload<ExtArgs>[]
      kpiAssignments: Prisma.$KPIAssignmentPayload<ExtArgs>[]
      serviceAssignments: Prisma.$ServiceAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      startDate: Date
      endDate: Date
      renewalDate: Date | null
      billingRate: number
      isRenewable: boolean
      isAutoRenew: boolean
      paymentStatus: $Enums.PaymentStatus
      paymentFrequency: string | null
      paymentTerms: string | null
      currency: string | null
      lastBillingDate: Date | null
      nextBillingDate: Date | null
      documentUrl: string | null
      status: $Enums.ContractStatus
      signedBy: string | null
      signedAt: Date | null
      terminationReason: string | null
      notes: string | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contract"]>
    composites: {}
  }

  type ContractGetPayload<S extends boolean | null | undefined | ContractDefaultArgs> = $Result.GetResult<Prisma.$ContractPayload, S>

  type ContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContractCountAggregateInputType | true
    }

  export interface ContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contract'], meta: { name: 'Contract' } }
    /**
     * Find zero or one Contract that matches the filter.
     * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContractFindUniqueArgs>(args: SelectSubset<T, ContractFindUniqueArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contract that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContractFindUniqueOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContractFindUniqueOrThrowArgs>(args: SelectSubset<T, ContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContractFindFirstArgs>(args?: SelectSubset<T, ContractFindFirstArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindFirstOrThrowArgs} args - Arguments to find a Contract
     * @example
     * // Get one Contract
     * const contract = await prisma.contract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContractFindFirstOrThrowArgs>(args?: SelectSubset<T, ContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contracts
     * const contracts = await prisma.contract.findMany()
     * 
     * // Get first 10 Contracts
     * const contracts = await prisma.contract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contractWithIdOnly = await prisma.contract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContractFindManyArgs>(args?: SelectSubset<T, ContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contract.
     * @param {ContractCreateArgs} args - Arguments to create a Contract.
     * @example
     * // Create one Contract
     * const Contract = await prisma.contract.create({
     *   data: {
     *     // ... data to create a Contract
     *   }
     * })
     * 
     */
    create<T extends ContractCreateArgs>(args: SelectSubset<T, ContractCreateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contracts.
     * @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContractCreateManyArgs>(args?: SelectSubset<T, ContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contracts and returns the data saved in the database.
     * @param {ContractCreateManyAndReturnArgs} args - Arguments to create many Contracts.
     * @example
     * // Create many Contracts
     * const contract = await prisma.contract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contracts and only return the `id`
     * const contractWithIdOnly = await prisma.contract.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContractCreateManyAndReturnArgs>(args?: SelectSubset<T, ContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contract.
     * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
     * @example
     * // Delete one Contract
     * const Contract = await prisma.contract.delete({
     *   where: {
     *     // ... filter to delete one Contract
     *   }
     * })
     * 
     */
    delete<T extends ContractDeleteArgs>(args: SelectSubset<T, ContractDeleteArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contract.
     * @param {ContractUpdateArgs} args - Arguments to update one Contract.
     * @example
     * // Update one Contract
     * const contract = await prisma.contract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContractUpdateArgs>(args: SelectSubset<T, ContractUpdateArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contracts.
     * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
     * @example
     * // Delete a few Contracts
     * const { count } = await prisma.contract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContractDeleteManyArgs>(args?: SelectSubset<T, ContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContractUpdateManyArgs>(args: SelectSubset<T, ContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contracts and returns the data updated in the database.
     * @param {ContractUpdateManyAndReturnArgs} args - Arguments to update many Contracts.
     * @example
     * // Update many Contracts
     * const contract = await prisma.contract.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contracts and only return the `id`
     * const contractWithIdOnly = await prisma.contract.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContractUpdateManyAndReturnArgs>(args: SelectSubset<T, ContractUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contract.
     * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
     * @example
     * // Update or create a Contract
     * const contract = await prisma.contract.upsert({
     *   create: {
     *     // ... data to create a Contract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contract we want to update
     *   }
     * })
     */
    upsert<T extends ContractUpsertArgs>(args: SelectSubset<T, ContractUpsertArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
     * @example
     * // Count the number of Contracts
     * const count = await prisma.contract.count({
     *   where: {
     *     // ... the filter for the Contracts we want to count
     *   }
     * })
    **/
    count<T extends ContractCountArgs>(
      args?: Subset<T, ContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContractAggregateArgs>(args: Subset<T, ContractAggregateArgs>): Prisma.PrismaPromise<GetContractAggregateType<T>>

    /**
     * Group by Contract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContractGroupByArgs['orderBy'] }
        : { orderBy?: ContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contract model
   */
  readonly fields: ContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    documents<T extends Contract$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    kpis<T extends Contract$kpisArgs<ExtArgs> = {}>(args?: Subset<T, Contract$kpisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    kpiAssignments<T extends Contract$kpiAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$kpiAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    serviceAssignments<T extends Contract$serviceAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Contract$serviceAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contract model
   */
  interface ContractFieldRefs {
    readonly id: FieldRef<"Contract", 'String'>
    readonly clientId: FieldRef<"Contract", 'String'>
    readonly startDate: FieldRef<"Contract", 'DateTime'>
    readonly endDate: FieldRef<"Contract", 'DateTime'>
    readonly renewalDate: FieldRef<"Contract", 'DateTime'>
    readonly billingRate: FieldRef<"Contract", 'Float'>
    readonly isRenewable: FieldRef<"Contract", 'Boolean'>
    readonly isAutoRenew: FieldRef<"Contract", 'Boolean'>
    readonly paymentStatus: FieldRef<"Contract", 'PaymentStatus'>
    readonly paymentFrequency: FieldRef<"Contract", 'String'>
    readonly paymentTerms: FieldRef<"Contract", 'String'>
    readonly currency: FieldRef<"Contract", 'String'>
    readonly lastBillingDate: FieldRef<"Contract", 'DateTime'>
    readonly nextBillingDate: FieldRef<"Contract", 'DateTime'>
    readonly documentUrl: FieldRef<"Contract", 'String'>
    readonly status: FieldRef<"Contract", 'ContractStatus'>
    readonly signedBy: FieldRef<"Contract", 'String'>
    readonly signedAt: FieldRef<"Contract", 'DateTime'>
    readonly terminationReason: FieldRef<"Contract", 'String'>
    readonly notes: FieldRef<"Contract", 'String'>
    readonly deletedAt: FieldRef<"Contract", 'DateTime'>
    readonly createdAt: FieldRef<"Contract", 'DateTime'>
    readonly updatedAt: FieldRef<"Contract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Contract findUnique
   */
  export type ContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findUniqueOrThrow
   */
  export type ContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract findFirst
   */
  export type ContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findFirstOrThrow
   */
  export type ContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contract to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contracts.
     */
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract findMany
   */
  export type ContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter, which Contracts to fetch.
     */
    where?: ContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contracts to fetch.
     */
    orderBy?: ContractOrderByWithRelationInput | ContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contracts.
     */
    cursor?: ContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contracts.
     */
    skip?: number
    distinct?: ContractScalarFieldEnum | ContractScalarFieldEnum[]
  }

  /**
   * Contract create
   */
  export type ContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to create a Contract.
     */
    data: XOR<ContractCreateInput, ContractUncheckedCreateInput>
  }

  /**
   * Contract createMany
   */
  export type ContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contract createManyAndReturn
   */
  export type ContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * The data used to create many Contracts.
     */
    data: ContractCreateManyInput | ContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract update
   */
  export type ContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The data needed to update a Contract.
     */
    data: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
    /**
     * Choose, which Contract to update.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract updateMany
   */
  export type ContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
  }

  /**
   * Contract updateManyAndReturn
   */
  export type ContractUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * The data used to update Contracts.
     */
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyInput>
    /**
     * Filter which Contracts to update
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contract upsert
   */
  export type ContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * The filter to search for the Contract to update in case it exists.
     */
    where: ContractWhereUniqueInput
    /**
     * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
     */
    create: XOR<ContractCreateInput, ContractUncheckedCreateInput>
    /**
     * In case the Contract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContractUpdateInput, ContractUncheckedUpdateInput>
  }

  /**
   * Contract delete
   */
  export type ContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    /**
     * Filter which Contract to delete.
     */
    where: ContractWhereUniqueInput
  }

  /**
   * Contract deleteMany
   */
  export type ContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contracts to delete
     */
    where?: ContractWhereInput
    /**
     * Limit how many Contracts to delete.
     */
    limit?: number
  }

  /**
   * Contract.documents
   */
  export type Contract$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Contract.kpis
   */
  export type Contract$kpisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    where?: KPIWhereInput
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    cursor?: KPIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KPIScalarFieldEnum | KPIScalarFieldEnum[]
  }

  /**
   * Contract.kpiAssignments
   */
  export type Contract$kpiAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    where?: KPIAssignmentWhereInput
    orderBy?: KPIAssignmentOrderByWithRelationInput | KPIAssignmentOrderByWithRelationInput[]
    cursor?: KPIAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KPIAssignmentScalarFieldEnum | KPIAssignmentScalarFieldEnum[]
  }

  /**
   * Contract.serviceAssignments
   */
  export type Contract$serviceAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    where?: ServiceAssignmentWhereInput
    orderBy?: ServiceAssignmentOrderByWithRelationInput | ServiceAssignmentOrderByWithRelationInput[]
    cursor?: ServiceAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceAssignmentScalarFieldEnum | ServiceAssignmentScalarFieldEnum[]
  }

  /**
   * Contract without action
   */
  export type ContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
  }


  /**
   * Model ServiceCategory
   */

  export type AggregateServiceCategory = {
    _count: ServiceCategoryCountAggregateOutputType | null
    _min: ServiceCategoryMinAggregateOutputType | null
    _max: ServiceCategoryMaxAggregateOutputType | null
  }

  export type ServiceCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    metadata: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCategory to aggregate.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceCategories
    **/
    _count?: true | ServiceCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceCategoryMaxAggregateInputType
  }

  export type GetServiceCategoryAggregateType<T extends ServiceCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceCategory[P]>
      : GetScalarType<T[P], AggregateServiceCategory[P]>
  }




  export type ServiceCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceCategoryWhereInput
    orderBy?: ServiceCategoryOrderByWithAggregationInput | ServiceCategoryOrderByWithAggregationInput[]
    by: ServiceCategoryScalarFieldEnum[] | ServiceCategoryScalarFieldEnum
    having?: ServiceCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCategoryCountAggregateInputType | true
    _min?: ServiceCategoryMinAggregateInputType
    _max?: ServiceCategoryMaxAggregateInputType
  }

  export type ServiceCategoryGroupByOutputType = {
    id: string
    name: string
    description: string | null
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ServiceCategoryCountAggregateOutputType | null
    _min: ServiceCategoryMinAggregateOutputType | null
    _max: ServiceCategoryMaxAggregateOutputType | null
  }

  type GetServiceCategoryGroupByPayload<T extends ServiceCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ServiceCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    services?: boolean | ServiceCategory$servicesArgs<ExtArgs>
    _count?: boolean | ServiceCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["serviceCategory"]>

  export type ServiceCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "metadata" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["serviceCategory"]>
  export type ServiceCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | ServiceCategory$servicesArgs<ExtArgs>
    _count?: boolean | ServiceCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServiceCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServiceCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceCategory"
    objects: {
      services: Prisma.$ServicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["serviceCategory"]>
    composites: {}
  }

  type ServiceCategoryGetPayload<S extends boolean | null | undefined | ServiceCategoryDefaultArgs> = $Result.GetResult<Prisma.$ServiceCategoryPayload, S>

  type ServiceCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCategoryCountAggregateInputType | true
    }

  export interface ServiceCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceCategory'], meta: { name: 'ServiceCategory' } }
    /**
     * Find zero or one ServiceCategory that matches the filter.
     * @param {ServiceCategoryFindUniqueArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceCategoryFindUniqueArgs>(args: SelectSubset<T, ServiceCategoryFindUniqueArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceCategoryFindUniqueOrThrowArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindFirstArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceCategoryFindFirstArgs>(args?: SelectSubset<T, ServiceCategoryFindFirstArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindFirstOrThrowArgs} args - Arguments to find a ServiceCategory
     * @example
     * // Get one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceCategories
     * const serviceCategories = await prisma.serviceCategory.findMany()
     * 
     * // Get first 10 ServiceCategories
     * const serviceCategories = await prisma.serviceCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceCategoryFindManyArgs>(args?: SelectSubset<T, ServiceCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceCategory.
     * @param {ServiceCategoryCreateArgs} args - Arguments to create a ServiceCategory.
     * @example
     * // Create one ServiceCategory
     * const ServiceCategory = await prisma.serviceCategory.create({
     *   data: {
     *     // ... data to create a ServiceCategory
     *   }
     * })
     * 
     */
    create<T extends ServiceCategoryCreateArgs>(args: SelectSubset<T, ServiceCategoryCreateArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceCategories.
     * @param {ServiceCategoryCreateManyArgs} args - Arguments to create many ServiceCategories.
     * @example
     * // Create many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCategoryCreateManyArgs>(args?: SelectSubset<T, ServiceCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceCategories and returns the data saved in the database.
     * @param {ServiceCategoryCreateManyAndReturnArgs} args - Arguments to create many ServiceCategories.
     * @example
     * // Create many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceCategories and only return the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceCategory.
     * @param {ServiceCategoryDeleteArgs} args - Arguments to delete one ServiceCategory.
     * @example
     * // Delete one ServiceCategory
     * const ServiceCategory = await prisma.serviceCategory.delete({
     *   where: {
     *     // ... filter to delete one ServiceCategory
     *   }
     * })
     * 
     */
    delete<T extends ServiceCategoryDeleteArgs>(args: SelectSubset<T, ServiceCategoryDeleteArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceCategory.
     * @param {ServiceCategoryUpdateArgs} args - Arguments to update one ServiceCategory.
     * @example
     * // Update one ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceCategoryUpdateArgs>(args: SelectSubset<T, ServiceCategoryUpdateArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceCategories.
     * @param {ServiceCategoryDeleteManyArgs} args - Arguments to filter ServiceCategories to delete.
     * @example
     * // Delete a few ServiceCategories
     * const { count } = await prisma.serviceCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceCategoryDeleteManyArgs>(args?: SelectSubset<T, ServiceCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceCategoryUpdateManyArgs>(args: SelectSubset<T, ServiceCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceCategories and returns the data updated in the database.
     * @param {ServiceCategoryUpdateManyAndReturnArgs} args - Arguments to update many ServiceCategories.
     * @example
     * // Update many ServiceCategories
     * const serviceCategory = await prisma.serviceCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceCategories and only return the `id`
     * const serviceCategoryWithIdOnly = await prisma.serviceCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceCategory.
     * @param {ServiceCategoryUpsertArgs} args - Arguments to update or create a ServiceCategory.
     * @example
     * // Update or create a ServiceCategory
     * const serviceCategory = await prisma.serviceCategory.upsert({
     *   create: {
     *     // ... data to create a ServiceCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceCategory we want to update
     *   }
     * })
     */
    upsert<T extends ServiceCategoryUpsertArgs>(args: SelectSubset<T, ServiceCategoryUpsertArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryCountArgs} args - Arguments to filter ServiceCategories to count.
     * @example
     * // Count the number of ServiceCategories
     * const count = await prisma.serviceCategory.count({
     *   where: {
     *     // ... the filter for the ServiceCategories we want to count
     *   }
     * })
    **/
    count<T extends ServiceCategoryCountArgs>(
      args?: Subset<T, ServiceCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceCategoryAggregateArgs>(args: Subset<T, ServiceCategoryAggregateArgs>): Prisma.PrismaPromise<GetServiceCategoryAggregateType<T>>

    /**
     * Group by ServiceCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ServiceCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceCategory model
   */
  readonly fields: ServiceCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    services<T extends ServiceCategory$servicesArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategory$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceCategory model
   */
  interface ServiceCategoryFieldRefs {
    readonly id: FieldRef<"ServiceCategory", 'String'>
    readonly name: FieldRef<"ServiceCategory", 'String'>
    readonly description: FieldRef<"ServiceCategory", 'String'>
    readonly metadata: FieldRef<"ServiceCategory", 'Json'>
    readonly deletedAt: FieldRef<"ServiceCategory", 'DateTime'>
    readonly createdAt: FieldRef<"ServiceCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"ServiceCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceCategory findUnique
   */
  export type ServiceCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory findUniqueOrThrow
   */
  export type ServiceCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory findFirst
   */
  export type ServiceCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCategories.
     */
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * ServiceCategory findFirstOrThrow
   */
  export type ServiceCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategory to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceCategories.
     */
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * ServiceCategory findMany
   */
  export type ServiceCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ServiceCategories to fetch.
     */
    where?: ServiceCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceCategories to fetch.
     */
    orderBy?: ServiceCategoryOrderByWithRelationInput | ServiceCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceCategories.
     */
    cursor?: ServiceCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceCategories.
     */
    skip?: number
    distinct?: ServiceCategoryScalarFieldEnum | ServiceCategoryScalarFieldEnum[]
  }

  /**
   * ServiceCategory create
   */
  export type ServiceCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceCategory.
     */
    data: XOR<ServiceCategoryCreateInput, ServiceCategoryUncheckedCreateInput>
  }

  /**
   * ServiceCategory createMany
   */
  export type ServiceCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceCategories.
     */
    data: ServiceCategoryCreateManyInput | ServiceCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceCategory createManyAndReturn
   */
  export type ServiceCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceCategories.
     */
    data: ServiceCategoryCreateManyInput | ServiceCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceCategory update
   */
  export type ServiceCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceCategory.
     */
    data: XOR<ServiceCategoryUpdateInput, ServiceCategoryUncheckedUpdateInput>
    /**
     * Choose, which ServiceCategory to update.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory updateMany
   */
  export type ServiceCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceCategories.
     */
    data: XOR<ServiceCategoryUpdateManyMutationInput, ServiceCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ServiceCategories to update
     */
    where?: ServiceCategoryWhereInput
    /**
     * Limit how many ServiceCategories to update.
     */
    limit?: number
  }

  /**
   * ServiceCategory updateManyAndReturn
   */
  export type ServiceCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * The data used to update ServiceCategories.
     */
    data: XOR<ServiceCategoryUpdateManyMutationInput, ServiceCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ServiceCategories to update
     */
    where?: ServiceCategoryWhereInput
    /**
     * Limit how many ServiceCategories to update.
     */
    limit?: number
  }

  /**
   * ServiceCategory upsert
   */
  export type ServiceCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceCategory to update in case it exists.
     */
    where: ServiceCategoryWhereUniqueInput
    /**
     * In case the ServiceCategory found by the `where` argument doesn't exist, create a new ServiceCategory with this data.
     */
    create: XOR<ServiceCategoryCreateInput, ServiceCategoryUncheckedCreateInput>
    /**
     * In case the ServiceCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceCategoryUpdateInput, ServiceCategoryUncheckedUpdateInput>
  }

  /**
   * ServiceCategory delete
   */
  export type ServiceCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
    /**
     * Filter which ServiceCategory to delete.
     */
    where: ServiceCategoryWhereUniqueInput
  }

  /**
   * ServiceCategory deleteMany
   */
  export type ServiceCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceCategories to delete
     */
    where?: ServiceCategoryWhereInput
    /**
     * Limit how many ServiceCategories to delete.
     */
    limit?: number
  }

  /**
   * ServiceCategory.services
   */
  export type ServiceCategory$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * ServiceCategory without action
   */
  export type ServiceCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCategory
     */
    select?: ServiceCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceCategory
     */
    omit?: ServiceCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    duration: number | null
    capacity: number | null
    price: number | null
  }

  export type ServiceSumAggregateOutputType = {
    duration: number | null
    capacity: number | null
    price: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    categoryId: string | null
    status: $Enums.BaseStatus | null
    duration: number | null
    capacity: number | null
    prerequisites: string | null
    isPublic: boolean | null
    price: number | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    serviceProviderId: string | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    categoryId: string | null
    status: $Enums.BaseStatus | null
    duration: number | null
    capacity: number | null
    prerequisites: string | null
    isPublic: boolean | null
    price: number | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    serviceProviderId: string | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    name: number
    description: number
    categoryId: number
    status: number
    duration: number
    capacity: number
    prerequisites: number
    isPublic: number
    price: number
    metadata: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    serviceProviderId: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    duration?: true
    capacity?: true
    price?: true
  }

  export type ServiceSumAggregateInputType = {
    duration?: true
    capacity?: true
    price?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    categoryId?: true
    status?: true
    duration?: true
    capacity?: true
    prerequisites?: true
    isPublic?: true
    price?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    serviceProviderId?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    categoryId?: true
    status?: true
    duration?: true
    capacity?: true
    prerequisites?: true
    isPublic?: true
    price?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    serviceProviderId?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    categoryId?: true
    status?: true
    duration?: true
    capacity?: true
    prerequisites?: true
    isPublic?: true
    price?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    serviceProviderId?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: string
    name: string
    description: string | null
    categoryId: string
    status: $Enums.BaseStatus
    duration: number | null
    capacity: number | null
    prerequisites: string | null
    isPublic: boolean
    price: number | null
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    serviceProviderId: string | null
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    status?: boolean
    duration?: boolean
    capacity?: boolean
    prerequisites?: boolean
    isPublic?: boolean
    price?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceProviderId?: boolean
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    assignments?: boolean | Service$assignmentsArgs<ExtArgs>
    ServiceProvider?: boolean | Service$ServiceProviderArgs<ExtArgs>
    ServiceSession?: boolean | Service$ServiceSessionArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    status?: boolean
    duration?: boolean
    capacity?: boolean
    prerequisites?: boolean
    isPublic?: boolean
    price?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceProviderId?: boolean
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    ServiceProvider?: boolean | Service$ServiceProviderArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    status?: boolean
    duration?: boolean
    capacity?: boolean
    prerequisites?: boolean
    isPublic?: boolean
    price?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceProviderId?: boolean
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    ServiceProvider?: boolean | Service$ServiceProviderArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    categoryId?: boolean
    status?: boolean
    duration?: boolean
    capacity?: boolean
    prerequisites?: boolean
    isPublic?: boolean
    price?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serviceProviderId?: boolean
  }

  export type ServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "categoryId" | "status" | "duration" | "capacity" | "prerequisites" | "isPublic" | "price" | "metadata" | "deletedAt" | "createdAt" | "updatedAt" | "serviceProviderId", ExtArgs["result"]["service"]>
  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    assignments?: boolean | Service$assignmentsArgs<ExtArgs>
    ServiceProvider?: boolean | Service$ServiceProviderArgs<ExtArgs>
    ServiceSession?: boolean | Service$ServiceSessionArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    ServiceProvider?: boolean | Service$ServiceProviderArgs<ExtArgs>
  }
  export type ServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ServiceCategoryDefaultArgs<ExtArgs>
    ServiceProvider?: boolean | Service$ServiceProviderArgs<ExtArgs>
  }

  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      category: Prisma.$ServiceCategoryPayload<ExtArgs>
      assignments: Prisma.$ServiceAssignmentPayload<ExtArgs>[]
      ServiceProvider: Prisma.$ServiceProviderPayload<ExtArgs> | null
      ServiceSession: Prisma.$ServiceSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      categoryId: string
      status: $Enums.BaseStatus
      duration: number | null
      capacity: number | null
      prerequisites: string | null
      isPublic: boolean
      price: number | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
      serviceProviderId: string | null
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceFindUniqueArgs>(args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceFindFirstArgs>(args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceFindManyArgs>(args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends ServiceCreateArgs>(args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Services.
     * @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCreateManyArgs>(args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Services and returns the data saved in the database.
     * @param {ServiceCreateManyAndReturnArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends ServiceDeleteArgs>(args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceUpdateArgs>(args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceDeleteManyArgs>(args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceUpdateManyArgs>(args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services and returns the data updated in the database.
     * @param {ServiceUpdateManyAndReturnArgs} args - Arguments to update many Services.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends ServiceUpsertArgs>(args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends ServiceCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceCategoryDefaultArgs<ExtArgs>>): Prisma__ServiceCategoryClient<$Result.GetResult<Prisma.$ServiceCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignments<T extends Service$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Service$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ServiceProvider<T extends Service$ServiceProviderArgs<ExtArgs> = {}>(args?: Subset<T, Service$ServiceProviderArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ServiceSession<T extends Service$ServiceSessionArgs<ExtArgs> = {}>(args?: Subset<T, Service$ServiceSessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Service model
   */
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'String'>
    readonly name: FieldRef<"Service", 'String'>
    readonly description: FieldRef<"Service", 'String'>
    readonly categoryId: FieldRef<"Service", 'String'>
    readonly status: FieldRef<"Service", 'BaseStatus'>
    readonly duration: FieldRef<"Service", 'Int'>
    readonly capacity: FieldRef<"Service", 'Int'>
    readonly prerequisites: FieldRef<"Service", 'String'>
    readonly isPublic: FieldRef<"Service", 'Boolean'>
    readonly price: FieldRef<"Service", 'Float'>
    readonly metadata: FieldRef<"Service", 'Json'>
    readonly deletedAt: FieldRef<"Service", 'DateTime'>
    readonly createdAt: FieldRef<"Service", 'DateTime'>
    readonly updatedAt: FieldRef<"Service", 'DateTime'>
    readonly serviceProviderId: FieldRef<"Service", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }

  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service createManyAndReturn
   */
  export type ServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service updateManyAndReturn
   */
  export type ServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }

  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to delete.
     */
    limit?: number
  }

  /**
   * Service.assignments
   */
  export type Service$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    where?: ServiceAssignmentWhereInput
    orderBy?: ServiceAssignmentOrderByWithRelationInput | ServiceAssignmentOrderByWithRelationInput[]
    cursor?: ServiceAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceAssignmentScalarFieldEnum | ServiceAssignmentScalarFieldEnum[]
  }

  /**
   * Service.ServiceProvider
   */
  export type Service$ServiceProviderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    where?: ServiceProviderWhereInput
  }

  /**
   * Service.ServiceSession
   */
  export type Service$ServiceSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    where?: ServiceSessionWhereInput
    orderBy?: ServiceSessionOrderByWithRelationInput | ServiceSessionOrderByWithRelationInput[]
    cursor?: ServiceSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceSessionScalarFieldEnum | ServiceSessionScalarFieldEnum[]
  }

  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
  }


  /**
   * Model ServiceAssignment
   */

  export type AggregateServiceAssignment = {
    _count: ServiceAssignmentCountAggregateOutputType | null
    _min: ServiceAssignmentMinAggregateOutputType | null
    _max: ServiceAssignmentMaxAggregateOutputType | null
  }

  export type ServiceAssignmentMinAggregateOutputType = {
    id: string | null
    serviceId: string | null
    contractId: string | null
    status: $Enums.AssignmentStatus | null
    startDate: Date | null
    endDate: Date | null
    frequency: $Enums.Frequency | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    clientId: string | null
  }

  export type ServiceAssignmentMaxAggregateOutputType = {
    id: string | null
    serviceId: string | null
    contractId: string | null
    status: $Enums.AssignmentStatus | null
    startDate: Date | null
    endDate: Date | null
    frequency: $Enums.Frequency | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    clientId: string | null
  }

  export type ServiceAssignmentCountAggregateOutputType = {
    id: number
    serviceId: number
    contractId: number
    status: number
    startDate: number
    endDate: number
    frequency: number
    metadata: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    clientId: number
    _all: number
  }


  export type ServiceAssignmentMinAggregateInputType = {
    id?: true
    serviceId?: true
    contractId?: true
    status?: true
    startDate?: true
    endDate?: true
    frequency?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    clientId?: true
  }

  export type ServiceAssignmentMaxAggregateInputType = {
    id?: true
    serviceId?: true
    contractId?: true
    status?: true
    startDate?: true
    endDate?: true
    frequency?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    clientId?: true
  }

  export type ServiceAssignmentCountAggregateInputType = {
    id?: true
    serviceId?: true
    contractId?: true
    status?: true
    startDate?: true
    endDate?: true
    frequency?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    clientId?: true
    _all?: true
  }

  export type ServiceAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceAssignment to aggregate.
     */
    where?: ServiceAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceAssignments to fetch.
     */
    orderBy?: ServiceAssignmentOrderByWithRelationInput | ServiceAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceAssignments
    **/
    _count?: true | ServiceAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceAssignmentMaxAggregateInputType
  }

  export type GetServiceAssignmentAggregateType<T extends ServiceAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceAssignment[P]>
      : GetScalarType<T[P], AggregateServiceAssignment[P]>
  }




  export type ServiceAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceAssignmentWhereInput
    orderBy?: ServiceAssignmentOrderByWithAggregationInput | ServiceAssignmentOrderByWithAggregationInput[]
    by: ServiceAssignmentScalarFieldEnum[] | ServiceAssignmentScalarFieldEnum
    having?: ServiceAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceAssignmentCountAggregateInputType | true
    _min?: ServiceAssignmentMinAggregateInputType
    _max?: ServiceAssignmentMaxAggregateInputType
  }

  export type ServiceAssignmentGroupByOutputType = {
    id: string
    serviceId: string
    contractId: string
    status: $Enums.AssignmentStatus
    startDate: Date
    endDate: Date | null
    frequency: $Enums.Frequency
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    clientId: string | null
    _count: ServiceAssignmentCountAggregateOutputType | null
    _min: ServiceAssignmentMinAggregateOutputType | null
    _max: ServiceAssignmentMaxAggregateOutputType | null
  }

  type GetServiceAssignmentGroupByPayload<T extends ServiceAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type ServiceAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    contractId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    frequency?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | ServiceAssignment$clientArgs<ExtArgs>
  }, ExtArgs["result"]["serviceAssignment"]>

  export type ServiceAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    contractId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    frequency?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | ServiceAssignment$clientArgs<ExtArgs>
  }, ExtArgs["result"]["serviceAssignment"]>

  export type ServiceAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    contractId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    frequency?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | ServiceAssignment$clientArgs<ExtArgs>
  }, ExtArgs["result"]["serviceAssignment"]>

  export type ServiceAssignmentSelectScalar = {
    id?: boolean
    serviceId?: boolean
    contractId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    frequency?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
  }

  export type ServiceAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceId" | "contractId" | "status" | "startDate" | "endDate" | "frequency" | "metadata" | "deletedAt" | "createdAt" | "updatedAt" | "clientId", ExtArgs["result"]["serviceAssignment"]>
  export type ServiceAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | ServiceAssignment$clientArgs<ExtArgs>
  }
  export type ServiceAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | ServiceAssignment$clientArgs<ExtArgs>
  }
  export type ServiceAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | ServiceAssignment$clientArgs<ExtArgs>
  }

  export type $ServiceAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceAssignment"
    objects: {
      service: Prisma.$ServicePayload<ExtArgs>
      contract: Prisma.$ContractPayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      serviceId: string
      contractId: string
      status: $Enums.AssignmentStatus
      startDate: Date
      endDate: Date | null
      frequency: $Enums.Frequency
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
      clientId: string | null
    }, ExtArgs["result"]["serviceAssignment"]>
    composites: {}
  }

  type ServiceAssignmentGetPayload<S extends boolean | null | undefined | ServiceAssignmentDefaultArgs> = $Result.GetResult<Prisma.$ServiceAssignmentPayload, S>

  type ServiceAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceAssignmentCountAggregateInputType | true
    }

  export interface ServiceAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceAssignment'], meta: { name: 'ServiceAssignment' } }
    /**
     * Find zero or one ServiceAssignment that matches the filter.
     * @param {ServiceAssignmentFindUniqueArgs} args - Arguments to find a ServiceAssignment
     * @example
     * // Get one ServiceAssignment
     * const serviceAssignment = await prisma.serviceAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceAssignmentFindUniqueArgs>(args: SelectSubset<T, ServiceAssignmentFindUniqueArgs<ExtArgs>>): Prisma__ServiceAssignmentClient<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceAssignmentFindUniqueOrThrowArgs} args - Arguments to find a ServiceAssignment
     * @example
     * // Get one ServiceAssignment
     * const serviceAssignment = await prisma.serviceAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceAssignmentClient<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAssignmentFindFirstArgs} args - Arguments to find a ServiceAssignment
     * @example
     * // Get one ServiceAssignment
     * const serviceAssignment = await prisma.serviceAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceAssignmentFindFirstArgs>(args?: SelectSubset<T, ServiceAssignmentFindFirstArgs<ExtArgs>>): Prisma__ServiceAssignmentClient<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAssignmentFindFirstOrThrowArgs} args - Arguments to find a ServiceAssignment
     * @example
     * // Get one ServiceAssignment
     * const serviceAssignment = await prisma.serviceAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceAssignmentClient<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceAssignments
     * const serviceAssignments = await prisma.serviceAssignment.findMany()
     * 
     * // Get first 10 ServiceAssignments
     * const serviceAssignments = await prisma.serviceAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceAssignmentWithIdOnly = await prisma.serviceAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceAssignmentFindManyArgs>(args?: SelectSubset<T, ServiceAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceAssignment.
     * @param {ServiceAssignmentCreateArgs} args - Arguments to create a ServiceAssignment.
     * @example
     * // Create one ServiceAssignment
     * const ServiceAssignment = await prisma.serviceAssignment.create({
     *   data: {
     *     // ... data to create a ServiceAssignment
     *   }
     * })
     * 
     */
    create<T extends ServiceAssignmentCreateArgs>(args: SelectSubset<T, ServiceAssignmentCreateArgs<ExtArgs>>): Prisma__ServiceAssignmentClient<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceAssignments.
     * @param {ServiceAssignmentCreateManyArgs} args - Arguments to create many ServiceAssignments.
     * @example
     * // Create many ServiceAssignments
     * const serviceAssignment = await prisma.serviceAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceAssignmentCreateManyArgs>(args?: SelectSubset<T, ServiceAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceAssignments and returns the data saved in the database.
     * @param {ServiceAssignmentCreateManyAndReturnArgs} args - Arguments to create many ServiceAssignments.
     * @example
     * // Create many ServiceAssignments
     * const serviceAssignment = await prisma.serviceAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceAssignments and only return the `id`
     * const serviceAssignmentWithIdOnly = await prisma.serviceAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceAssignment.
     * @param {ServiceAssignmentDeleteArgs} args - Arguments to delete one ServiceAssignment.
     * @example
     * // Delete one ServiceAssignment
     * const ServiceAssignment = await prisma.serviceAssignment.delete({
     *   where: {
     *     // ... filter to delete one ServiceAssignment
     *   }
     * })
     * 
     */
    delete<T extends ServiceAssignmentDeleteArgs>(args: SelectSubset<T, ServiceAssignmentDeleteArgs<ExtArgs>>): Prisma__ServiceAssignmentClient<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceAssignment.
     * @param {ServiceAssignmentUpdateArgs} args - Arguments to update one ServiceAssignment.
     * @example
     * // Update one ServiceAssignment
     * const serviceAssignment = await prisma.serviceAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceAssignmentUpdateArgs>(args: SelectSubset<T, ServiceAssignmentUpdateArgs<ExtArgs>>): Prisma__ServiceAssignmentClient<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceAssignments.
     * @param {ServiceAssignmentDeleteManyArgs} args - Arguments to filter ServiceAssignments to delete.
     * @example
     * // Delete a few ServiceAssignments
     * const { count } = await prisma.serviceAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceAssignmentDeleteManyArgs>(args?: SelectSubset<T, ServiceAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceAssignments
     * const serviceAssignment = await prisma.serviceAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceAssignmentUpdateManyArgs>(args: SelectSubset<T, ServiceAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceAssignments and returns the data updated in the database.
     * @param {ServiceAssignmentUpdateManyAndReturnArgs} args - Arguments to update many ServiceAssignments.
     * @example
     * // Update many ServiceAssignments
     * const serviceAssignment = await prisma.serviceAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceAssignments and only return the `id`
     * const serviceAssignmentWithIdOnly = await prisma.serviceAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceAssignment.
     * @param {ServiceAssignmentUpsertArgs} args - Arguments to update or create a ServiceAssignment.
     * @example
     * // Update or create a ServiceAssignment
     * const serviceAssignment = await prisma.serviceAssignment.upsert({
     *   create: {
     *     // ... data to create a ServiceAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceAssignment we want to update
     *   }
     * })
     */
    upsert<T extends ServiceAssignmentUpsertArgs>(args: SelectSubset<T, ServiceAssignmentUpsertArgs<ExtArgs>>): Prisma__ServiceAssignmentClient<$Result.GetResult<Prisma.$ServiceAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAssignmentCountArgs} args - Arguments to filter ServiceAssignments to count.
     * @example
     * // Count the number of ServiceAssignments
     * const count = await prisma.serviceAssignment.count({
     *   where: {
     *     // ... the filter for the ServiceAssignments we want to count
     *   }
     * })
    **/
    count<T extends ServiceAssignmentCountArgs>(
      args?: Subset<T, ServiceAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAssignmentAggregateArgs>(args: Subset<T, ServiceAssignmentAggregateArgs>): Prisma.PrismaPromise<GetServiceAssignmentAggregateType<T>>

    /**
     * Group by ServiceAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: ServiceAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceAssignment model
   */
  readonly fields: ServiceAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ServiceAssignment$clientArgs<ExtArgs> = {}>(args?: Subset<T, ServiceAssignment$clientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceAssignment model
   */
  interface ServiceAssignmentFieldRefs {
    readonly id: FieldRef<"ServiceAssignment", 'String'>
    readonly serviceId: FieldRef<"ServiceAssignment", 'String'>
    readonly contractId: FieldRef<"ServiceAssignment", 'String'>
    readonly status: FieldRef<"ServiceAssignment", 'AssignmentStatus'>
    readonly startDate: FieldRef<"ServiceAssignment", 'DateTime'>
    readonly endDate: FieldRef<"ServiceAssignment", 'DateTime'>
    readonly frequency: FieldRef<"ServiceAssignment", 'Frequency'>
    readonly metadata: FieldRef<"ServiceAssignment", 'Json'>
    readonly deletedAt: FieldRef<"ServiceAssignment", 'DateTime'>
    readonly createdAt: FieldRef<"ServiceAssignment", 'DateTime'>
    readonly updatedAt: FieldRef<"ServiceAssignment", 'DateTime'>
    readonly clientId: FieldRef<"ServiceAssignment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ServiceAssignment findUnique
   */
  export type ServiceAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which ServiceAssignment to fetch.
     */
    where: ServiceAssignmentWhereUniqueInput
  }

  /**
   * ServiceAssignment findUniqueOrThrow
   */
  export type ServiceAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which ServiceAssignment to fetch.
     */
    where: ServiceAssignmentWhereUniqueInput
  }

  /**
   * ServiceAssignment findFirst
   */
  export type ServiceAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which ServiceAssignment to fetch.
     */
    where?: ServiceAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceAssignments to fetch.
     */
    orderBy?: ServiceAssignmentOrderByWithRelationInput | ServiceAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceAssignments.
     */
    cursor?: ServiceAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceAssignments.
     */
    distinct?: ServiceAssignmentScalarFieldEnum | ServiceAssignmentScalarFieldEnum[]
  }

  /**
   * ServiceAssignment findFirstOrThrow
   */
  export type ServiceAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which ServiceAssignment to fetch.
     */
    where?: ServiceAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceAssignments to fetch.
     */
    orderBy?: ServiceAssignmentOrderByWithRelationInput | ServiceAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceAssignments.
     */
    cursor?: ServiceAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceAssignments.
     */
    distinct?: ServiceAssignmentScalarFieldEnum | ServiceAssignmentScalarFieldEnum[]
  }

  /**
   * ServiceAssignment findMany
   */
  export type ServiceAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which ServiceAssignments to fetch.
     */
    where?: ServiceAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceAssignments to fetch.
     */
    orderBy?: ServiceAssignmentOrderByWithRelationInput | ServiceAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceAssignments.
     */
    cursor?: ServiceAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceAssignments.
     */
    skip?: number
    distinct?: ServiceAssignmentScalarFieldEnum | ServiceAssignmentScalarFieldEnum[]
  }

  /**
   * ServiceAssignment create
   */
  export type ServiceAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceAssignment.
     */
    data: XOR<ServiceAssignmentCreateInput, ServiceAssignmentUncheckedCreateInput>
  }

  /**
   * ServiceAssignment createMany
   */
  export type ServiceAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceAssignments.
     */
    data: ServiceAssignmentCreateManyInput | ServiceAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceAssignment createManyAndReturn
   */
  export type ServiceAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceAssignments.
     */
    data: ServiceAssignmentCreateManyInput | ServiceAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceAssignment update
   */
  export type ServiceAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceAssignment.
     */
    data: XOR<ServiceAssignmentUpdateInput, ServiceAssignmentUncheckedUpdateInput>
    /**
     * Choose, which ServiceAssignment to update.
     */
    where: ServiceAssignmentWhereUniqueInput
  }

  /**
   * ServiceAssignment updateMany
   */
  export type ServiceAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceAssignments.
     */
    data: XOR<ServiceAssignmentUpdateManyMutationInput, ServiceAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which ServiceAssignments to update
     */
    where?: ServiceAssignmentWhereInput
    /**
     * Limit how many ServiceAssignments to update.
     */
    limit?: number
  }

  /**
   * ServiceAssignment updateManyAndReturn
   */
  export type ServiceAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update ServiceAssignments.
     */
    data: XOR<ServiceAssignmentUpdateManyMutationInput, ServiceAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which ServiceAssignments to update
     */
    where?: ServiceAssignmentWhereInput
    /**
     * Limit how many ServiceAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceAssignment upsert
   */
  export type ServiceAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceAssignment to update in case it exists.
     */
    where: ServiceAssignmentWhereUniqueInput
    /**
     * In case the ServiceAssignment found by the `where` argument doesn't exist, create a new ServiceAssignment with this data.
     */
    create: XOR<ServiceAssignmentCreateInput, ServiceAssignmentUncheckedCreateInput>
    /**
     * In case the ServiceAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceAssignmentUpdateInput, ServiceAssignmentUncheckedUpdateInput>
  }

  /**
   * ServiceAssignment delete
   */
  export type ServiceAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
    /**
     * Filter which ServiceAssignment to delete.
     */
    where: ServiceAssignmentWhereUniqueInput
  }

  /**
   * ServiceAssignment deleteMany
   */
  export type ServiceAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceAssignments to delete
     */
    where?: ServiceAssignmentWhereInput
    /**
     * Limit how many ServiceAssignments to delete.
     */
    limit?: number
  }

  /**
   * ServiceAssignment.client
   */
  export type ServiceAssignment$clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * ServiceAssignment without action
   */
  export type ServiceAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceAssignment
     */
    select?: ServiceAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceAssignment
     */
    omit?: ServiceAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model ServiceProvider
   */

  export type AggregateServiceProvider = {
    _count: ServiceProviderCountAggregateOutputType | null
    _avg: ServiceProviderAvgAggregateOutputType | null
    _sum: ServiceProviderSumAggregateOutputType | null
    _min: ServiceProviderMinAggregateOutputType | null
    _max: ServiceProviderMaxAggregateOutputType | null
  }

  export type ServiceProviderAvgAggregateOutputType = {
    rating: number | null
  }

  export type ServiceProviderSumAggregateOutputType = {
    rating: number | null
  }

  export type ServiceProviderMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ServiceProviderType | null
    contactEmail: string | null
    contactPhone: string | null
    location: string | null
    rating: number | null
    isVerified: boolean | null
    deletedAt: Date | null
    status: $Enums.WorkStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceProviderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.ServiceProviderType | null
    contactEmail: string | null
    contactPhone: string | null
    location: string | null
    rating: number | null
    isVerified: boolean | null
    deletedAt: Date | null
    status: $Enums.WorkStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceProviderCountAggregateOutputType = {
    id: number
    name: number
    type: number
    contactEmail: number
    contactPhone: number
    location: number
    qualifications: number
    specializations: number
    availability: number
    rating: number
    isVerified: number
    metadata: number
    deletedAt: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceProviderAvgAggregateInputType = {
    rating?: true
  }

  export type ServiceProviderSumAggregateInputType = {
    rating?: true
  }

  export type ServiceProviderMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    contactEmail?: true
    contactPhone?: true
    location?: true
    rating?: true
    isVerified?: true
    deletedAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceProviderMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    contactEmail?: true
    contactPhone?: true
    location?: true
    rating?: true
    isVerified?: true
    deletedAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceProviderCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    contactEmail?: true
    contactPhone?: true
    location?: true
    qualifications?: true
    specializations?: true
    availability?: true
    rating?: true
    isVerified?: true
    metadata?: true
    deletedAt?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceProviderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceProvider to aggregate.
     */
    where?: ServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceProviders to fetch.
     */
    orderBy?: ServiceProviderOrderByWithRelationInput | ServiceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceProviders
    **/
    _count?: true | ServiceProviderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceProviderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceProviderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceProviderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceProviderMaxAggregateInputType
  }

  export type GetServiceProviderAggregateType<T extends ServiceProviderAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceProvider]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceProvider[P]>
      : GetScalarType<T[P], AggregateServiceProvider[P]>
  }




  export type ServiceProviderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceProviderWhereInput
    orderBy?: ServiceProviderOrderByWithAggregationInput | ServiceProviderOrderByWithAggregationInput[]
    by: ServiceProviderScalarFieldEnum[] | ServiceProviderScalarFieldEnum
    having?: ServiceProviderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceProviderCountAggregateInputType | true
    _avg?: ServiceProviderAvgAggregateInputType
    _sum?: ServiceProviderSumAggregateInputType
    _min?: ServiceProviderMinAggregateInputType
    _max?: ServiceProviderMaxAggregateInputType
  }

  export type ServiceProviderGroupByOutputType = {
    id: string
    name: string
    type: $Enums.ServiceProviderType
    contactEmail: string | null
    contactPhone: string | null
    location: string | null
    qualifications: string[]
    specializations: string[]
    availability: JsonValue | null
    rating: number | null
    isVerified: boolean
    metadata: JsonValue | null
    deletedAt: Date | null
    status: $Enums.WorkStatus
    createdAt: Date
    updatedAt: Date
    _count: ServiceProviderCountAggregateOutputType | null
    _avg: ServiceProviderAvgAggregateOutputType | null
    _sum: ServiceProviderSumAggregateOutputType | null
    _min: ServiceProviderMinAggregateOutputType | null
    _max: ServiceProviderMaxAggregateOutputType | null
  }

  type GetServiceProviderGroupByPayload<T extends ServiceProviderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceProviderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceProviderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceProviderGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceProviderGroupByOutputType[P]>
        }
      >
    >


  export type ServiceProviderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    location?: boolean
    qualifications?: boolean
    specializations?: boolean
    availability?: boolean
    rating?: boolean
    isVerified?: boolean
    metadata?: boolean
    deletedAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    services?: boolean | ServiceProvider$servicesArgs<ExtArgs>
    sessions?: boolean | ServiceProvider$sessionsArgs<ExtArgs>
    _count?: boolean | ServiceProviderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceProvider"]>

  export type ServiceProviderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    location?: boolean
    qualifications?: boolean
    specializations?: boolean
    availability?: boolean
    rating?: boolean
    isVerified?: boolean
    metadata?: boolean
    deletedAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["serviceProvider"]>

  export type ServiceProviderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    location?: boolean
    qualifications?: boolean
    specializations?: boolean
    availability?: boolean
    rating?: boolean
    isVerified?: boolean
    metadata?: boolean
    deletedAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["serviceProvider"]>

  export type ServiceProviderSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    location?: boolean
    qualifications?: boolean
    specializations?: boolean
    availability?: boolean
    rating?: boolean
    isVerified?: boolean
    metadata?: boolean
    deletedAt?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceProviderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "contactEmail" | "contactPhone" | "location" | "qualifications" | "specializations" | "availability" | "rating" | "isVerified" | "metadata" | "deletedAt" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["serviceProvider"]>
  export type ServiceProviderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | ServiceProvider$servicesArgs<ExtArgs>
    sessions?: boolean | ServiceProvider$sessionsArgs<ExtArgs>
    _count?: boolean | ServiceProviderCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceProviderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServiceProviderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServiceProviderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceProvider"
    objects: {
      services: Prisma.$ServicePayload<ExtArgs>[]
      sessions: Prisma.$ServiceSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.ServiceProviderType
      contactEmail: string | null
      contactPhone: string | null
      location: string | null
      qualifications: string[]
      specializations: string[]
      availability: Prisma.JsonValue | null
      rating: number | null
      isVerified: boolean
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      status: $Enums.WorkStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["serviceProvider"]>
    composites: {}
  }

  type ServiceProviderGetPayload<S extends boolean | null | undefined | ServiceProviderDefaultArgs> = $Result.GetResult<Prisma.$ServiceProviderPayload, S>

  type ServiceProviderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceProviderCountAggregateInputType | true
    }

  export interface ServiceProviderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceProvider'], meta: { name: 'ServiceProvider' } }
    /**
     * Find zero or one ServiceProvider that matches the filter.
     * @param {ServiceProviderFindUniqueArgs} args - Arguments to find a ServiceProvider
     * @example
     * // Get one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceProviderFindUniqueArgs>(args: SelectSubset<T, ServiceProviderFindUniqueArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceProvider that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceProviderFindUniqueOrThrowArgs} args - Arguments to find a ServiceProvider
     * @example
     * // Get one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceProviderFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceProvider that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderFindFirstArgs} args - Arguments to find a ServiceProvider
     * @example
     * // Get one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceProviderFindFirstArgs>(args?: SelectSubset<T, ServiceProviderFindFirstArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceProvider that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderFindFirstOrThrowArgs} args - Arguments to find a ServiceProvider
     * @example
     * // Get one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceProviderFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceProviders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceProviders
     * const serviceProviders = await prisma.serviceProvider.findMany()
     * 
     * // Get first 10 ServiceProviders
     * const serviceProviders = await prisma.serviceProvider.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceProviderWithIdOnly = await prisma.serviceProvider.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceProviderFindManyArgs>(args?: SelectSubset<T, ServiceProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceProvider.
     * @param {ServiceProviderCreateArgs} args - Arguments to create a ServiceProvider.
     * @example
     * // Create one ServiceProvider
     * const ServiceProvider = await prisma.serviceProvider.create({
     *   data: {
     *     // ... data to create a ServiceProvider
     *   }
     * })
     * 
     */
    create<T extends ServiceProviderCreateArgs>(args: SelectSubset<T, ServiceProviderCreateArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceProviders.
     * @param {ServiceProviderCreateManyArgs} args - Arguments to create many ServiceProviders.
     * @example
     * // Create many ServiceProviders
     * const serviceProvider = await prisma.serviceProvider.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceProviderCreateManyArgs>(args?: SelectSubset<T, ServiceProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceProviders and returns the data saved in the database.
     * @param {ServiceProviderCreateManyAndReturnArgs} args - Arguments to create many ServiceProviders.
     * @example
     * // Create many ServiceProviders
     * const serviceProvider = await prisma.serviceProvider.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceProviders and only return the `id`
     * const serviceProviderWithIdOnly = await prisma.serviceProvider.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceProviderCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceProvider.
     * @param {ServiceProviderDeleteArgs} args - Arguments to delete one ServiceProvider.
     * @example
     * // Delete one ServiceProvider
     * const ServiceProvider = await prisma.serviceProvider.delete({
     *   where: {
     *     // ... filter to delete one ServiceProvider
     *   }
     * })
     * 
     */
    delete<T extends ServiceProviderDeleteArgs>(args: SelectSubset<T, ServiceProviderDeleteArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceProvider.
     * @param {ServiceProviderUpdateArgs} args - Arguments to update one ServiceProvider.
     * @example
     * // Update one ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceProviderUpdateArgs>(args: SelectSubset<T, ServiceProviderUpdateArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceProviders.
     * @param {ServiceProviderDeleteManyArgs} args - Arguments to filter ServiceProviders to delete.
     * @example
     * // Delete a few ServiceProviders
     * const { count } = await prisma.serviceProvider.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceProviderDeleteManyArgs>(args?: SelectSubset<T, ServiceProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceProviders
     * const serviceProvider = await prisma.serviceProvider.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceProviderUpdateManyArgs>(args: SelectSubset<T, ServiceProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceProviders and returns the data updated in the database.
     * @param {ServiceProviderUpdateManyAndReturnArgs} args - Arguments to update many ServiceProviders.
     * @example
     * // Update many ServiceProviders
     * const serviceProvider = await prisma.serviceProvider.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceProviders and only return the `id`
     * const serviceProviderWithIdOnly = await prisma.serviceProvider.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceProviderUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceProvider.
     * @param {ServiceProviderUpsertArgs} args - Arguments to update or create a ServiceProvider.
     * @example
     * // Update or create a ServiceProvider
     * const serviceProvider = await prisma.serviceProvider.upsert({
     *   create: {
     *     // ... data to create a ServiceProvider
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceProvider we want to update
     *   }
     * })
     */
    upsert<T extends ServiceProviderUpsertArgs>(args: SelectSubset<T, ServiceProviderUpsertArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceProviders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderCountArgs} args - Arguments to filter ServiceProviders to count.
     * @example
     * // Count the number of ServiceProviders
     * const count = await prisma.serviceProvider.count({
     *   where: {
     *     // ... the filter for the ServiceProviders we want to count
     *   }
     * })
    **/
    count<T extends ServiceProviderCountArgs>(
      args?: Subset<T, ServiceProviderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceProviderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceProviderAggregateArgs>(args: Subset<T, ServiceProviderAggregateArgs>): Prisma.PrismaPromise<GetServiceProviderAggregateType<T>>

    /**
     * Group by ServiceProvider.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceProviderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceProviderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceProviderGroupByArgs['orderBy'] }
        : { orderBy?: ServiceProviderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceProvider model
   */
  readonly fields: ServiceProviderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceProvider.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceProviderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    services<T extends ServiceProvider$servicesArgs<ExtArgs> = {}>(args?: Subset<T, ServiceProvider$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends ServiceProvider$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceProvider$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceProvider model
   */
  interface ServiceProviderFieldRefs {
    readonly id: FieldRef<"ServiceProvider", 'String'>
    readonly name: FieldRef<"ServiceProvider", 'String'>
    readonly type: FieldRef<"ServiceProvider", 'ServiceProviderType'>
    readonly contactEmail: FieldRef<"ServiceProvider", 'String'>
    readonly contactPhone: FieldRef<"ServiceProvider", 'String'>
    readonly location: FieldRef<"ServiceProvider", 'String'>
    readonly qualifications: FieldRef<"ServiceProvider", 'String[]'>
    readonly specializations: FieldRef<"ServiceProvider", 'String[]'>
    readonly availability: FieldRef<"ServiceProvider", 'Json'>
    readonly rating: FieldRef<"ServiceProvider", 'Float'>
    readonly isVerified: FieldRef<"ServiceProvider", 'Boolean'>
    readonly metadata: FieldRef<"ServiceProvider", 'Json'>
    readonly deletedAt: FieldRef<"ServiceProvider", 'DateTime'>
    readonly status: FieldRef<"ServiceProvider", 'WorkStatus'>
    readonly createdAt: FieldRef<"ServiceProvider", 'DateTime'>
    readonly updatedAt: FieldRef<"ServiceProvider", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceProvider findUnique
   */
  export type ServiceProviderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProvider to fetch.
     */
    where: ServiceProviderWhereUniqueInput
  }

  /**
   * ServiceProvider findUniqueOrThrow
   */
  export type ServiceProviderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProvider to fetch.
     */
    where: ServiceProviderWhereUniqueInput
  }

  /**
   * ServiceProvider findFirst
   */
  export type ServiceProviderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProvider to fetch.
     */
    where?: ServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceProviders to fetch.
     */
    orderBy?: ServiceProviderOrderByWithRelationInput | ServiceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceProviders.
     */
    cursor?: ServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceProviders.
     */
    distinct?: ServiceProviderScalarFieldEnum | ServiceProviderScalarFieldEnum[]
  }

  /**
   * ServiceProvider findFirstOrThrow
   */
  export type ServiceProviderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProvider to fetch.
     */
    where?: ServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceProviders to fetch.
     */
    orderBy?: ServiceProviderOrderByWithRelationInput | ServiceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceProviders.
     */
    cursor?: ServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceProviders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceProviders.
     */
    distinct?: ServiceProviderScalarFieldEnum | ServiceProviderScalarFieldEnum[]
  }

  /**
   * ServiceProvider findMany
   */
  export type ServiceProviderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter, which ServiceProviders to fetch.
     */
    where?: ServiceProviderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceProviders to fetch.
     */
    orderBy?: ServiceProviderOrderByWithRelationInput | ServiceProviderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceProviders.
     */
    cursor?: ServiceProviderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceProviders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceProviders.
     */
    skip?: number
    distinct?: ServiceProviderScalarFieldEnum | ServiceProviderScalarFieldEnum[]
  }

  /**
   * ServiceProvider create
   */
  export type ServiceProviderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceProvider.
     */
    data: XOR<ServiceProviderCreateInput, ServiceProviderUncheckedCreateInput>
  }

  /**
   * ServiceProvider createMany
   */
  export type ServiceProviderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceProviders.
     */
    data: ServiceProviderCreateManyInput | ServiceProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceProvider createManyAndReturn
   */
  export type ServiceProviderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceProviders.
     */
    data: ServiceProviderCreateManyInput | ServiceProviderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceProvider update
   */
  export type ServiceProviderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceProvider.
     */
    data: XOR<ServiceProviderUpdateInput, ServiceProviderUncheckedUpdateInput>
    /**
     * Choose, which ServiceProvider to update.
     */
    where: ServiceProviderWhereUniqueInput
  }

  /**
   * ServiceProvider updateMany
   */
  export type ServiceProviderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceProviders.
     */
    data: XOR<ServiceProviderUpdateManyMutationInput, ServiceProviderUncheckedUpdateManyInput>
    /**
     * Filter which ServiceProviders to update
     */
    where?: ServiceProviderWhereInput
    /**
     * Limit how many ServiceProviders to update.
     */
    limit?: number
  }

  /**
   * ServiceProvider updateManyAndReturn
   */
  export type ServiceProviderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * The data used to update ServiceProviders.
     */
    data: XOR<ServiceProviderUpdateManyMutationInput, ServiceProviderUncheckedUpdateManyInput>
    /**
     * Filter which ServiceProviders to update
     */
    where?: ServiceProviderWhereInput
    /**
     * Limit how many ServiceProviders to update.
     */
    limit?: number
  }

  /**
   * ServiceProvider upsert
   */
  export type ServiceProviderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceProvider to update in case it exists.
     */
    where: ServiceProviderWhereUniqueInput
    /**
     * In case the ServiceProvider found by the `where` argument doesn't exist, create a new ServiceProvider with this data.
     */
    create: XOR<ServiceProviderCreateInput, ServiceProviderUncheckedCreateInput>
    /**
     * In case the ServiceProvider was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceProviderUpdateInput, ServiceProviderUncheckedUpdateInput>
  }

  /**
   * ServiceProvider delete
   */
  export type ServiceProviderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
    /**
     * Filter which ServiceProvider to delete.
     */
    where: ServiceProviderWhereUniqueInput
  }

  /**
   * ServiceProvider deleteMany
   */
  export type ServiceProviderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceProviders to delete
     */
    where?: ServiceProviderWhereInput
    /**
     * Limit how many ServiceProviders to delete.
     */
    limit?: number
  }

  /**
   * ServiceProvider.services
   */
  export type ServiceProvider$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * ServiceProvider.sessions
   */
  export type ServiceProvider$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    where?: ServiceSessionWhereInput
    orderBy?: ServiceSessionOrderByWithRelationInput | ServiceSessionOrderByWithRelationInput[]
    cursor?: ServiceSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceSessionScalarFieldEnum | ServiceSessionScalarFieldEnum[]
  }

  /**
   * ServiceProvider without action
   */
  export type ServiceProviderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceProvider
     */
    select?: ServiceProviderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceProvider
     */
    omit?: ServiceProviderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceProviderInclude<ExtArgs> | null
  }


  /**
   * Model ServiceSession
   */

  export type AggregateServiceSession = {
    _count: ServiceSessionCountAggregateOutputType | null
    _avg: ServiceSessionAvgAggregateOutputType | null
    _sum: ServiceSessionSumAggregateOutputType | null
    _min: ServiceSessionMinAggregateOutputType | null
    _max: ServiceSessionMaxAggregateOutputType | null
  }

  export type ServiceSessionAvgAggregateOutputType = {
    duration: number | null
    rescheduleCount: number | null
  }

  export type ServiceSessionSumAggregateOutputType = {
    duration: number | null
    rescheduleCount: number | null
  }

  export type ServiceSessionMinAggregateOutputType = {
    id: string | null
    serviceId: string | null
    providerId: string | null
    scheduledAt: Date | null
    completedAt: Date | null
    status: $Enums.SessionStatus | null
    notes: string | null
    feedback: string | null
    duration: number | null
    location: string | null
    cancellationReason: string | null
    rescheduleCount: number | null
    isGroupSession: boolean | null
    deletedAt: Date | null
    staffId: string | null
    beneficiaryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceSessionMaxAggregateOutputType = {
    id: string | null
    serviceId: string | null
    providerId: string | null
    scheduledAt: Date | null
    completedAt: Date | null
    status: $Enums.SessionStatus | null
    notes: string | null
    feedback: string | null
    duration: number | null
    location: string | null
    cancellationReason: string | null
    rescheduleCount: number | null
    isGroupSession: boolean | null
    deletedAt: Date | null
    staffId: string | null
    beneficiaryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceSessionCountAggregateOutputType = {
    id: number
    serviceId: number
    providerId: number
    scheduledAt: number
    completedAt: number
    status: number
    notes: number
    feedback: number
    duration: number
    location: number
    cancellationReason: number
    rescheduleCount: number
    isGroupSession: number
    metadata: number
    deletedAt: number
    staffId: number
    beneficiaryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceSessionAvgAggregateInputType = {
    duration?: true
    rescheduleCount?: true
  }

  export type ServiceSessionSumAggregateInputType = {
    duration?: true
    rescheduleCount?: true
  }

  export type ServiceSessionMinAggregateInputType = {
    id?: true
    serviceId?: true
    providerId?: true
    scheduledAt?: true
    completedAt?: true
    status?: true
    notes?: true
    feedback?: true
    duration?: true
    location?: true
    cancellationReason?: true
    rescheduleCount?: true
    isGroupSession?: true
    deletedAt?: true
    staffId?: true
    beneficiaryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceSessionMaxAggregateInputType = {
    id?: true
    serviceId?: true
    providerId?: true
    scheduledAt?: true
    completedAt?: true
    status?: true
    notes?: true
    feedback?: true
    duration?: true
    location?: true
    cancellationReason?: true
    rescheduleCount?: true
    isGroupSession?: true
    deletedAt?: true
    staffId?: true
    beneficiaryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceSessionCountAggregateInputType = {
    id?: true
    serviceId?: true
    providerId?: true
    scheduledAt?: true
    completedAt?: true
    status?: true
    notes?: true
    feedback?: true
    duration?: true
    location?: true
    cancellationReason?: true
    rescheduleCount?: true
    isGroupSession?: true
    metadata?: true
    deletedAt?: true
    staffId?: true
    beneficiaryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceSession to aggregate.
     */
    where?: ServiceSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceSessions to fetch.
     */
    orderBy?: ServiceSessionOrderByWithRelationInput | ServiceSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceSessions
    **/
    _count?: true | ServiceSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceSessionMaxAggregateInputType
  }

  export type GetServiceSessionAggregateType<T extends ServiceSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceSession[P]>
      : GetScalarType<T[P], AggregateServiceSession[P]>
  }




  export type ServiceSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceSessionWhereInput
    orderBy?: ServiceSessionOrderByWithAggregationInput | ServiceSessionOrderByWithAggregationInput[]
    by: ServiceSessionScalarFieldEnum[] | ServiceSessionScalarFieldEnum
    having?: ServiceSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceSessionCountAggregateInputType | true
    _avg?: ServiceSessionAvgAggregateInputType
    _sum?: ServiceSessionSumAggregateInputType
    _min?: ServiceSessionMinAggregateInputType
    _max?: ServiceSessionMaxAggregateInputType
  }

  export type ServiceSessionGroupByOutputType = {
    id: string
    serviceId: string
    providerId: string
    scheduledAt: Date
    completedAt: Date | null
    status: $Enums.SessionStatus
    notes: string | null
    feedback: string | null
    duration: number | null
    location: string | null
    cancellationReason: string | null
    rescheduleCount: number
    isGroupSession: boolean
    metadata: JsonValue | null
    deletedAt: Date | null
    staffId: string | null
    beneficiaryId: string | null
    createdAt: Date
    updatedAt: Date
    _count: ServiceSessionCountAggregateOutputType | null
    _avg: ServiceSessionAvgAggregateOutputType | null
    _sum: ServiceSessionSumAggregateOutputType | null
    _min: ServiceSessionMinAggregateOutputType | null
    _max: ServiceSessionMaxAggregateOutputType | null
  }

  type GetServiceSessionGroupByPayload<T extends ServiceSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceSessionGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    providerId?: boolean
    scheduledAt?: boolean
    completedAt?: boolean
    status?: boolean
    notes?: boolean
    feedback?: boolean
    duration?: boolean
    location?: boolean
    cancellationReason?: boolean
    rescheduleCount?: boolean
    isGroupSession?: boolean
    metadata?: boolean
    deletedAt?: boolean
    staffId?: boolean
    beneficiaryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | ServiceSession$staffArgs<ExtArgs>
    beneficiary?: boolean | ServiceSession$beneficiaryArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ServiceProviderDefaultArgs<ExtArgs>
    SessionFeedback?: boolean | ServiceSession$SessionFeedbackArgs<ExtArgs>
    _count?: boolean | ServiceSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceSession"]>

  export type ServiceSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    providerId?: boolean
    scheduledAt?: boolean
    completedAt?: boolean
    status?: boolean
    notes?: boolean
    feedback?: boolean
    duration?: boolean
    location?: boolean
    cancellationReason?: boolean
    rescheduleCount?: boolean
    isGroupSession?: boolean
    metadata?: boolean
    deletedAt?: boolean
    staffId?: boolean
    beneficiaryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | ServiceSession$staffArgs<ExtArgs>
    beneficiary?: boolean | ServiceSession$beneficiaryArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ServiceProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceSession"]>

  export type ServiceSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    providerId?: boolean
    scheduledAt?: boolean
    completedAt?: boolean
    status?: boolean
    notes?: boolean
    feedback?: boolean
    duration?: boolean
    location?: boolean
    cancellationReason?: boolean
    rescheduleCount?: boolean
    isGroupSession?: boolean
    metadata?: boolean
    deletedAt?: boolean
    staffId?: boolean
    beneficiaryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | ServiceSession$staffArgs<ExtArgs>
    beneficiary?: boolean | ServiceSession$beneficiaryArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ServiceProviderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceSession"]>

  export type ServiceSessionSelectScalar = {
    id?: boolean
    serviceId?: boolean
    providerId?: boolean
    scheduledAt?: boolean
    completedAt?: boolean
    status?: boolean
    notes?: boolean
    feedback?: boolean
    duration?: boolean
    location?: boolean
    cancellationReason?: boolean
    rescheduleCount?: boolean
    isGroupSession?: boolean
    metadata?: boolean
    deletedAt?: boolean
    staffId?: boolean
    beneficiaryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceId" | "providerId" | "scheduledAt" | "completedAt" | "status" | "notes" | "feedback" | "duration" | "location" | "cancellationReason" | "rescheduleCount" | "isGroupSession" | "metadata" | "deletedAt" | "staffId" | "beneficiaryId" | "createdAt" | "updatedAt", ExtArgs["result"]["serviceSession"]>
  export type ServiceSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | ServiceSession$staffArgs<ExtArgs>
    beneficiary?: boolean | ServiceSession$beneficiaryArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ServiceProviderDefaultArgs<ExtArgs>
    SessionFeedback?: boolean | ServiceSession$SessionFeedbackArgs<ExtArgs>
    _count?: boolean | ServiceSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | ServiceSession$staffArgs<ExtArgs>
    beneficiary?: boolean | ServiceSession$beneficiaryArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ServiceProviderDefaultArgs<ExtArgs>
  }
  export type ServiceSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | ServiceSession$staffArgs<ExtArgs>
    beneficiary?: boolean | ServiceSession$beneficiaryArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    provider?: boolean | ServiceProviderDefaultArgs<ExtArgs>
  }

  export type $ServiceSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceSession"
    objects: {
      staff: Prisma.$StaffPayload<ExtArgs> | null
      beneficiary: Prisma.$BeneficiaryPayload<ExtArgs> | null
      service: Prisma.$ServicePayload<ExtArgs>
      provider: Prisma.$ServiceProviderPayload<ExtArgs>
      SessionFeedback: Prisma.$SessionFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      serviceId: string
      providerId: string
      scheduledAt: Date
      completedAt: Date | null
      status: $Enums.SessionStatus
      notes: string | null
      feedback: string | null
      duration: number | null
      location: string | null
      cancellationReason: string | null
      rescheduleCount: number
      isGroupSession: boolean
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      staffId: string | null
      beneficiaryId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["serviceSession"]>
    composites: {}
  }

  type ServiceSessionGetPayload<S extends boolean | null | undefined | ServiceSessionDefaultArgs> = $Result.GetResult<Prisma.$ServiceSessionPayload, S>

  type ServiceSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceSessionCountAggregateInputType | true
    }

  export interface ServiceSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceSession'], meta: { name: 'ServiceSession' } }
    /**
     * Find zero or one ServiceSession that matches the filter.
     * @param {ServiceSessionFindUniqueArgs} args - Arguments to find a ServiceSession
     * @example
     * // Get one ServiceSession
     * const serviceSession = await prisma.serviceSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceSessionFindUniqueArgs>(args: SelectSubset<T, ServiceSessionFindUniqueArgs<ExtArgs>>): Prisma__ServiceSessionClient<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceSessionFindUniqueOrThrowArgs} args - Arguments to find a ServiceSession
     * @example
     * // Get one ServiceSession
     * const serviceSession = await prisma.serviceSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceSessionClient<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceSessionFindFirstArgs} args - Arguments to find a ServiceSession
     * @example
     * // Get one ServiceSession
     * const serviceSession = await prisma.serviceSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceSessionFindFirstArgs>(args?: SelectSubset<T, ServiceSessionFindFirstArgs<ExtArgs>>): Prisma__ServiceSessionClient<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceSessionFindFirstOrThrowArgs} args - Arguments to find a ServiceSession
     * @example
     * // Get one ServiceSession
     * const serviceSession = await prisma.serviceSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceSessionClient<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceSessions
     * const serviceSessions = await prisma.serviceSession.findMany()
     * 
     * // Get first 10 ServiceSessions
     * const serviceSessions = await prisma.serviceSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceSessionWithIdOnly = await prisma.serviceSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceSessionFindManyArgs>(args?: SelectSubset<T, ServiceSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceSession.
     * @param {ServiceSessionCreateArgs} args - Arguments to create a ServiceSession.
     * @example
     * // Create one ServiceSession
     * const ServiceSession = await prisma.serviceSession.create({
     *   data: {
     *     // ... data to create a ServiceSession
     *   }
     * })
     * 
     */
    create<T extends ServiceSessionCreateArgs>(args: SelectSubset<T, ServiceSessionCreateArgs<ExtArgs>>): Prisma__ServiceSessionClient<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceSessions.
     * @param {ServiceSessionCreateManyArgs} args - Arguments to create many ServiceSessions.
     * @example
     * // Create many ServiceSessions
     * const serviceSession = await prisma.serviceSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceSessionCreateManyArgs>(args?: SelectSubset<T, ServiceSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceSessions and returns the data saved in the database.
     * @param {ServiceSessionCreateManyAndReturnArgs} args - Arguments to create many ServiceSessions.
     * @example
     * // Create many ServiceSessions
     * const serviceSession = await prisma.serviceSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceSessions and only return the `id`
     * const serviceSessionWithIdOnly = await prisma.serviceSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceSession.
     * @param {ServiceSessionDeleteArgs} args - Arguments to delete one ServiceSession.
     * @example
     * // Delete one ServiceSession
     * const ServiceSession = await prisma.serviceSession.delete({
     *   where: {
     *     // ... filter to delete one ServiceSession
     *   }
     * })
     * 
     */
    delete<T extends ServiceSessionDeleteArgs>(args: SelectSubset<T, ServiceSessionDeleteArgs<ExtArgs>>): Prisma__ServiceSessionClient<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceSession.
     * @param {ServiceSessionUpdateArgs} args - Arguments to update one ServiceSession.
     * @example
     * // Update one ServiceSession
     * const serviceSession = await prisma.serviceSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceSessionUpdateArgs>(args: SelectSubset<T, ServiceSessionUpdateArgs<ExtArgs>>): Prisma__ServiceSessionClient<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceSessions.
     * @param {ServiceSessionDeleteManyArgs} args - Arguments to filter ServiceSessions to delete.
     * @example
     * // Delete a few ServiceSessions
     * const { count } = await prisma.serviceSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceSessionDeleteManyArgs>(args?: SelectSubset<T, ServiceSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceSessions
     * const serviceSession = await prisma.serviceSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceSessionUpdateManyArgs>(args: SelectSubset<T, ServiceSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceSessions and returns the data updated in the database.
     * @param {ServiceSessionUpdateManyAndReturnArgs} args - Arguments to update many ServiceSessions.
     * @example
     * // Update many ServiceSessions
     * const serviceSession = await prisma.serviceSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceSessions and only return the `id`
     * const serviceSessionWithIdOnly = await prisma.serviceSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceSession.
     * @param {ServiceSessionUpsertArgs} args - Arguments to update or create a ServiceSession.
     * @example
     * // Update or create a ServiceSession
     * const serviceSession = await prisma.serviceSession.upsert({
     *   create: {
     *     // ... data to create a ServiceSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceSession we want to update
     *   }
     * })
     */
    upsert<T extends ServiceSessionUpsertArgs>(args: SelectSubset<T, ServiceSessionUpsertArgs<ExtArgs>>): Prisma__ServiceSessionClient<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceSessionCountArgs} args - Arguments to filter ServiceSessions to count.
     * @example
     * // Count the number of ServiceSessions
     * const count = await prisma.serviceSession.count({
     *   where: {
     *     // ... the filter for the ServiceSessions we want to count
     *   }
     * })
    **/
    count<T extends ServiceSessionCountArgs>(
      args?: Subset<T, ServiceSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceSessionAggregateArgs>(args: Subset<T, ServiceSessionAggregateArgs>): Prisma.PrismaPromise<GetServiceSessionAggregateType<T>>

    /**
     * Group by ServiceSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceSessionGroupByArgs['orderBy'] }
        : { orderBy?: ServiceSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceSession model
   */
  readonly fields: ServiceSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends ServiceSession$staffArgs<ExtArgs> = {}>(args?: Subset<T, ServiceSession$staffArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    beneficiary<T extends ServiceSession$beneficiaryArgs<ExtArgs> = {}>(args?: Subset<T, ServiceSession$beneficiaryArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    provider<T extends ServiceProviderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceProviderDefaultArgs<ExtArgs>>): Prisma__ServiceProviderClient<$Result.GetResult<Prisma.$ServiceProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    SessionFeedback<T extends ServiceSession$SessionFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, ServiceSession$SessionFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceSession model
   */
  interface ServiceSessionFieldRefs {
    readonly id: FieldRef<"ServiceSession", 'String'>
    readonly serviceId: FieldRef<"ServiceSession", 'String'>
    readonly providerId: FieldRef<"ServiceSession", 'String'>
    readonly scheduledAt: FieldRef<"ServiceSession", 'DateTime'>
    readonly completedAt: FieldRef<"ServiceSession", 'DateTime'>
    readonly status: FieldRef<"ServiceSession", 'SessionStatus'>
    readonly notes: FieldRef<"ServiceSession", 'String'>
    readonly feedback: FieldRef<"ServiceSession", 'String'>
    readonly duration: FieldRef<"ServiceSession", 'Int'>
    readonly location: FieldRef<"ServiceSession", 'String'>
    readonly cancellationReason: FieldRef<"ServiceSession", 'String'>
    readonly rescheduleCount: FieldRef<"ServiceSession", 'Int'>
    readonly isGroupSession: FieldRef<"ServiceSession", 'Boolean'>
    readonly metadata: FieldRef<"ServiceSession", 'Json'>
    readonly deletedAt: FieldRef<"ServiceSession", 'DateTime'>
    readonly staffId: FieldRef<"ServiceSession", 'String'>
    readonly beneficiaryId: FieldRef<"ServiceSession", 'String'>
    readonly createdAt: FieldRef<"ServiceSession", 'DateTime'>
    readonly updatedAt: FieldRef<"ServiceSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceSession findUnique
   */
  export type ServiceSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceSession to fetch.
     */
    where: ServiceSessionWhereUniqueInput
  }

  /**
   * ServiceSession findUniqueOrThrow
   */
  export type ServiceSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceSession to fetch.
     */
    where: ServiceSessionWhereUniqueInput
  }

  /**
   * ServiceSession findFirst
   */
  export type ServiceSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceSession to fetch.
     */
    where?: ServiceSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceSessions to fetch.
     */
    orderBy?: ServiceSessionOrderByWithRelationInput | ServiceSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceSessions.
     */
    cursor?: ServiceSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceSessions.
     */
    distinct?: ServiceSessionScalarFieldEnum | ServiceSessionScalarFieldEnum[]
  }

  /**
   * ServiceSession findFirstOrThrow
   */
  export type ServiceSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceSession to fetch.
     */
    where?: ServiceSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceSessions to fetch.
     */
    orderBy?: ServiceSessionOrderByWithRelationInput | ServiceSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceSessions.
     */
    cursor?: ServiceSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceSessions.
     */
    distinct?: ServiceSessionScalarFieldEnum | ServiceSessionScalarFieldEnum[]
  }

  /**
   * ServiceSession findMany
   */
  export type ServiceSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceSessions to fetch.
     */
    where?: ServiceSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceSessions to fetch.
     */
    orderBy?: ServiceSessionOrderByWithRelationInput | ServiceSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceSessions.
     */
    cursor?: ServiceSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceSessions.
     */
    skip?: number
    distinct?: ServiceSessionScalarFieldEnum | ServiceSessionScalarFieldEnum[]
  }

  /**
   * ServiceSession create
   */
  export type ServiceSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceSession.
     */
    data: XOR<ServiceSessionCreateInput, ServiceSessionUncheckedCreateInput>
  }

  /**
   * ServiceSession createMany
   */
  export type ServiceSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceSessions.
     */
    data: ServiceSessionCreateManyInput | ServiceSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceSession createManyAndReturn
   */
  export type ServiceSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceSessions.
     */
    data: ServiceSessionCreateManyInput | ServiceSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceSession update
   */
  export type ServiceSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceSession.
     */
    data: XOR<ServiceSessionUpdateInput, ServiceSessionUncheckedUpdateInput>
    /**
     * Choose, which ServiceSession to update.
     */
    where: ServiceSessionWhereUniqueInput
  }

  /**
   * ServiceSession updateMany
   */
  export type ServiceSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceSessions.
     */
    data: XOR<ServiceSessionUpdateManyMutationInput, ServiceSessionUncheckedUpdateManyInput>
    /**
     * Filter which ServiceSessions to update
     */
    where?: ServiceSessionWhereInput
    /**
     * Limit how many ServiceSessions to update.
     */
    limit?: number
  }

  /**
   * ServiceSession updateManyAndReturn
   */
  export type ServiceSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * The data used to update ServiceSessions.
     */
    data: XOR<ServiceSessionUpdateManyMutationInput, ServiceSessionUncheckedUpdateManyInput>
    /**
     * Filter which ServiceSessions to update
     */
    where?: ServiceSessionWhereInput
    /**
     * Limit how many ServiceSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceSession upsert
   */
  export type ServiceSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceSession to update in case it exists.
     */
    where: ServiceSessionWhereUniqueInput
    /**
     * In case the ServiceSession found by the `where` argument doesn't exist, create a new ServiceSession with this data.
     */
    create: XOR<ServiceSessionCreateInput, ServiceSessionUncheckedCreateInput>
    /**
     * In case the ServiceSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceSessionUpdateInput, ServiceSessionUncheckedUpdateInput>
  }

  /**
   * ServiceSession delete
   */
  export type ServiceSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    /**
     * Filter which ServiceSession to delete.
     */
    where: ServiceSessionWhereUniqueInput
  }

  /**
   * ServiceSession deleteMany
   */
  export type ServiceSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceSessions to delete
     */
    where?: ServiceSessionWhereInput
    /**
     * Limit how many ServiceSessions to delete.
     */
    limit?: number
  }

  /**
   * ServiceSession.staff
   */
  export type ServiceSession$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    where?: StaffWhereInput
  }

  /**
   * ServiceSession.beneficiary
   */
  export type ServiceSession$beneficiaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    where?: BeneficiaryWhereInput
  }

  /**
   * ServiceSession.SessionFeedback
   */
  export type ServiceSession$SessionFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    where?: SessionFeedbackWhereInput
    orderBy?: SessionFeedbackOrderByWithRelationInput | SessionFeedbackOrderByWithRelationInput[]
    cursor?: SessionFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionFeedbackScalarFieldEnum | SessionFeedbackScalarFieldEnum[]
  }

  /**
   * ServiceSession without action
   */
  export type ServiceSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
  }


  /**
   * Model SessionFeedback
   */

  export type AggregateSessionFeedback = {
    _count: SessionFeedbackCountAggregateOutputType | null
    _avg: SessionFeedbackAvgAggregateOutputType | null
    _sum: SessionFeedbackSumAggregateOutputType | null
    _min: SessionFeedbackMinAggregateOutputType | null
    _max: SessionFeedbackMaxAggregateOutputType | null
  }

  export type SessionFeedbackAvgAggregateOutputType = {
    rating: number | null
  }

  export type SessionFeedbackSumAggregateOutputType = {
    rating: number | null
  }

  export type SessionFeedbackMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    rating: number | null
    comment: string | null
    deletedAt: Date | null
    createdAt: Date | null
  }

  export type SessionFeedbackMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    rating: number | null
    comment: string | null
    deletedAt: Date | null
    createdAt: Date | null
  }

  export type SessionFeedbackCountAggregateOutputType = {
    id: number
    sessionId: number
    rating: number
    comment: number
    metadata: number
    deletedAt: number
    createdAt: number
    _all: number
  }


  export type SessionFeedbackAvgAggregateInputType = {
    rating?: true
  }

  export type SessionFeedbackSumAggregateInputType = {
    rating?: true
  }

  export type SessionFeedbackMinAggregateInputType = {
    id?: true
    sessionId?: true
    rating?: true
    comment?: true
    deletedAt?: true
    createdAt?: true
  }

  export type SessionFeedbackMaxAggregateInputType = {
    id?: true
    sessionId?: true
    rating?: true
    comment?: true
    deletedAt?: true
    createdAt?: true
  }

  export type SessionFeedbackCountAggregateInputType = {
    id?: true
    sessionId?: true
    rating?: true
    comment?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    _all?: true
  }

  export type SessionFeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionFeedback to aggregate.
     */
    where?: SessionFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionFeedbacks to fetch.
     */
    orderBy?: SessionFeedbackOrderByWithRelationInput | SessionFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionFeedbacks
    **/
    _count?: true | SessionFeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionFeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionFeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionFeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionFeedbackMaxAggregateInputType
  }

  export type GetSessionFeedbackAggregateType<T extends SessionFeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionFeedback[P]>
      : GetScalarType<T[P], AggregateSessionFeedback[P]>
  }




  export type SessionFeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionFeedbackWhereInput
    orderBy?: SessionFeedbackOrderByWithAggregationInput | SessionFeedbackOrderByWithAggregationInput[]
    by: SessionFeedbackScalarFieldEnum[] | SessionFeedbackScalarFieldEnum
    having?: SessionFeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionFeedbackCountAggregateInputType | true
    _avg?: SessionFeedbackAvgAggregateInputType
    _sum?: SessionFeedbackSumAggregateInputType
    _min?: SessionFeedbackMinAggregateInputType
    _max?: SessionFeedbackMaxAggregateInputType
  }

  export type SessionFeedbackGroupByOutputType = {
    id: string
    sessionId: string
    rating: number
    comment: string | null
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    _count: SessionFeedbackCountAggregateOutputType | null
    _avg: SessionFeedbackAvgAggregateOutputType | null
    _sum: SessionFeedbackSumAggregateOutputType | null
    _min: SessionFeedbackMinAggregateOutputType | null
    _max: SessionFeedbackMaxAggregateOutputType | null
  }

  type GetSessionFeedbackGroupByPayload<T extends SessionFeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionFeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionFeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionFeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], SessionFeedbackGroupByOutputType[P]>
        }
      >
    >


  export type SessionFeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    rating?: boolean
    comment?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    session?: boolean | ServiceSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionFeedback"]>

  export type SessionFeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    rating?: boolean
    comment?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    session?: boolean | ServiceSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionFeedback"]>

  export type SessionFeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    rating?: boolean
    comment?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    session?: boolean | ServiceSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionFeedback"]>

  export type SessionFeedbackSelectScalar = {
    id?: boolean
    sessionId?: boolean
    rating?: boolean
    comment?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
  }

  export type SessionFeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionId" | "rating" | "comment" | "metadata" | "deletedAt" | "createdAt", ExtArgs["result"]["sessionFeedback"]>
  export type SessionFeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ServiceSessionDefaultArgs<ExtArgs>
  }
  export type SessionFeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ServiceSessionDefaultArgs<ExtArgs>
  }
  export type SessionFeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ServiceSessionDefaultArgs<ExtArgs>
  }

  export type $SessionFeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionFeedback"
    objects: {
      session: Prisma.$ServiceSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      rating: number
      comment: string | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["sessionFeedback"]>
    composites: {}
  }

  type SessionFeedbackGetPayload<S extends boolean | null | undefined | SessionFeedbackDefaultArgs> = $Result.GetResult<Prisma.$SessionFeedbackPayload, S>

  type SessionFeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionFeedbackCountAggregateInputType | true
    }

  export interface SessionFeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionFeedback'], meta: { name: 'SessionFeedback' } }
    /**
     * Find zero or one SessionFeedback that matches the filter.
     * @param {SessionFeedbackFindUniqueArgs} args - Arguments to find a SessionFeedback
     * @example
     * // Get one SessionFeedback
     * const sessionFeedback = await prisma.sessionFeedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFeedbackFindUniqueArgs>(args: SelectSubset<T, SessionFeedbackFindUniqueArgs<ExtArgs>>): Prisma__SessionFeedbackClient<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SessionFeedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFeedbackFindUniqueOrThrowArgs} args - Arguments to find a SessionFeedback
     * @example
     * // Get one SessionFeedback
     * const sessionFeedback = await prisma.sessionFeedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionFeedbackClient<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionFeedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFeedbackFindFirstArgs} args - Arguments to find a SessionFeedback
     * @example
     * // Get one SessionFeedback
     * const sessionFeedback = await prisma.sessionFeedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFeedbackFindFirstArgs>(args?: SelectSubset<T, SessionFeedbackFindFirstArgs<ExtArgs>>): Prisma__SessionFeedbackClient<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SessionFeedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFeedbackFindFirstOrThrowArgs} args - Arguments to find a SessionFeedback
     * @example
     * // Get one SessionFeedback
     * const sessionFeedback = await prisma.sessionFeedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionFeedbackClient<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SessionFeedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionFeedbacks
     * const sessionFeedbacks = await prisma.sessionFeedback.findMany()
     * 
     * // Get first 10 SessionFeedbacks
     * const sessionFeedbacks = await prisma.sessionFeedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionFeedbackWithIdOnly = await prisma.sessionFeedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFeedbackFindManyArgs>(args?: SelectSubset<T, SessionFeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SessionFeedback.
     * @param {SessionFeedbackCreateArgs} args - Arguments to create a SessionFeedback.
     * @example
     * // Create one SessionFeedback
     * const SessionFeedback = await prisma.sessionFeedback.create({
     *   data: {
     *     // ... data to create a SessionFeedback
     *   }
     * })
     * 
     */
    create<T extends SessionFeedbackCreateArgs>(args: SelectSubset<T, SessionFeedbackCreateArgs<ExtArgs>>): Prisma__SessionFeedbackClient<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SessionFeedbacks.
     * @param {SessionFeedbackCreateManyArgs} args - Arguments to create many SessionFeedbacks.
     * @example
     * // Create many SessionFeedbacks
     * const sessionFeedback = await prisma.sessionFeedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionFeedbackCreateManyArgs>(args?: SelectSubset<T, SessionFeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionFeedbacks and returns the data saved in the database.
     * @param {SessionFeedbackCreateManyAndReturnArgs} args - Arguments to create many SessionFeedbacks.
     * @example
     * // Create many SessionFeedbacks
     * const sessionFeedback = await prisma.sessionFeedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionFeedbacks and only return the `id`
     * const sessionFeedbackWithIdOnly = await prisma.sessionFeedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionFeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionFeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SessionFeedback.
     * @param {SessionFeedbackDeleteArgs} args - Arguments to delete one SessionFeedback.
     * @example
     * // Delete one SessionFeedback
     * const SessionFeedback = await prisma.sessionFeedback.delete({
     *   where: {
     *     // ... filter to delete one SessionFeedback
     *   }
     * })
     * 
     */
    delete<T extends SessionFeedbackDeleteArgs>(args: SelectSubset<T, SessionFeedbackDeleteArgs<ExtArgs>>): Prisma__SessionFeedbackClient<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SessionFeedback.
     * @param {SessionFeedbackUpdateArgs} args - Arguments to update one SessionFeedback.
     * @example
     * // Update one SessionFeedback
     * const sessionFeedback = await prisma.sessionFeedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionFeedbackUpdateArgs>(args: SelectSubset<T, SessionFeedbackUpdateArgs<ExtArgs>>): Prisma__SessionFeedbackClient<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SessionFeedbacks.
     * @param {SessionFeedbackDeleteManyArgs} args - Arguments to filter SessionFeedbacks to delete.
     * @example
     * // Delete a few SessionFeedbacks
     * const { count } = await prisma.sessionFeedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionFeedbackDeleteManyArgs>(args?: SelectSubset<T, SessionFeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionFeedbacks
     * const sessionFeedback = await prisma.sessionFeedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionFeedbackUpdateManyArgs>(args: SelectSubset<T, SessionFeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionFeedbacks and returns the data updated in the database.
     * @param {SessionFeedbackUpdateManyAndReturnArgs} args - Arguments to update many SessionFeedbacks.
     * @example
     * // Update many SessionFeedbacks
     * const sessionFeedback = await prisma.sessionFeedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SessionFeedbacks and only return the `id`
     * const sessionFeedbackWithIdOnly = await prisma.sessionFeedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionFeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionFeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SessionFeedback.
     * @param {SessionFeedbackUpsertArgs} args - Arguments to update or create a SessionFeedback.
     * @example
     * // Update or create a SessionFeedback
     * const sessionFeedback = await prisma.sessionFeedback.upsert({
     *   create: {
     *     // ... data to create a SessionFeedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionFeedback we want to update
     *   }
     * })
     */
    upsert<T extends SessionFeedbackUpsertArgs>(args: SelectSubset<T, SessionFeedbackUpsertArgs<ExtArgs>>): Prisma__SessionFeedbackClient<$Result.GetResult<Prisma.$SessionFeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SessionFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFeedbackCountArgs} args - Arguments to filter SessionFeedbacks to count.
     * @example
     * // Count the number of SessionFeedbacks
     * const count = await prisma.sessionFeedback.count({
     *   where: {
     *     // ... the filter for the SessionFeedbacks we want to count
     *   }
     * })
    **/
    count<T extends SessionFeedbackCountArgs>(
      args?: Subset<T, SessionFeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionFeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionFeedbackAggregateArgs>(args: Subset<T, SessionFeedbackAggregateArgs>): Prisma.PrismaPromise<GetSessionFeedbackAggregateType<T>>

    /**
     * Group by SessionFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionFeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionFeedbackGroupByArgs['orderBy'] }
        : { orderBy?: SessionFeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionFeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionFeedback model
   */
  readonly fields: SessionFeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionFeedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionFeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ServiceSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceSessionDefaultArgs<ExtArgs>>): Prisma__ServiceSessionClient<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionFeedback model
   */
  interface SessionFeedbackFieldRefs {
    readonly id: FieldRef<"SessionFeedback", 'String'>
    readonly sessionId: FieldRef<"SessionFeedback", 'String'>
    readonly rating: FieldRef<"SessionFeedback", 'Int'>
    readonly comment: FieldRef<"SessionFeedback", 'String'>
    readonly metadata: FieldRef<"SessionFeedback", 'Json'>
    readonly deletedAt: FieldRef<"SessionFeedback", 'DateTime'>
    readonly createdAt: FieldRef<"SessionFeedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionFeedback findUnique
   */
  export type SessionFeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which SessionFeedback to fetch.
     */
    where: SessionFeedbackWhereUniqueInput
  }

  /**
   * SessionFeedback findUniqueOrThrow
   */
  export type SessionFeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which SessionFeedback to fetch.
     */
    where: SessionFeedbackWhereUniqueInput
  }

  /**
   * SessionFeedback findFirst
   */
  export type SessionFeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which SessionFeedback to fetch.
     */
    where?: SessionFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionFeedbacks to fetch.
     */
    orderBy?: SessionFeedbackOrderByWithRelationInput | SessionFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionFeedbacks.
     */
    cursor?: SessionFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionFeedbacks.
     */
    distinct?: SessionFeedbackScalarFieldEnum | SessionFeedbackScalarFieldEnum[]
  }

  /**
   * SessionFeedback findFirstOrThrow
   */
  export type SessionFeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which SessionFeedback to fetch.
     */
    where?: SessionFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionFeedbacks to fetch.
     */
    orderBy?: SessionFeedbackOrderByWithRelationInput | SessionFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionFeedbacks.
     */
    cursor?: SessionFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionFeedbacks.
     */
    distinct?: SessionFeedbackScalarFieldEnum | SessionFeedbackScalarFieldEnum[]
  }

  /**
   * SessionFeedback findMany
   */
  export type SessionFeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which SessionFeedbacks to fetch.
     */
    where?: SessionFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionFeedbacks to fetch.
     */
    orderBy?: SessionFeedbackOrderByWithRelationInput | SessionFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionFeedbacks.
     */
    cursor?: SessionFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionFeedbacks.
     */
    skip?: number
    distinct?: SessionFeedbackScalarFieldEnum | SessionFeedbackScalarFieldEnum[]
  }

  /**
   * SessionFeedback create
   */
  export type SessionFeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionFeedback.
     */
    data: XOR<SessionFeedbackCreateInput, SessionFeedbackUncheckedCreateInput>
  }

  /**
   * SessionFeedback createMany
   */
  export type SessionFeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionFeedbacks.
     */
    data: SessionFeedbackCreateManyInput | SessionFeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionFeedback createManyAndReturn
   */
  export type SessionFeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many SessionFeedbacks.
     */
    data: SessionFeedbackCreateManyInput | SessionFeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionFeedback update
   */
  export type SessionFeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionFeedback.
     */
    data: XOR<SessionFeedbackUpdateInput, SessionFeedbackUncheckedUpdateInput>
    /**
     * Choose, which SessionFeedback to update.
     */
    where: SessionFeedbackWhereUniqueInput
  }

  /**
   * SessionFeedback updateMany
   */
  export type SessionFeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionFeedbacks.
     */
    data: XOR<SessionFeedbackUpdateManyMutationInput, SessionFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which SessionFeedbacks to update
     */
    where?: SessionFeedbackWhereInput
    /**
     * Limit how many SessionFeedbacks to update.
     */
    limit?: number
  }

  /**
   * SessionFeedback updateManyAndReturn
   */
  export type SessionFeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * The data used to update SessionFeedbacks.
     */
    data: XOR<SessionFeedbackUpdateManyMutationInput, SessionFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which SessionFeedbacks to update
     */
    where?: SessionFeedbackWhereInput
    /**
     * Limit how many SessionFeedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionFeedback upsert
   */
  export type SessionFeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionFeedback to update in case it exists.
     */
    where: SessionFeedbackWhereUniqueInput
    /**
     * In case the SessionFeedback found by the `where` argument doesn't exist, create a new SessionFeedback with this data.
     */
    create: XOR<SessionFeedbackCreateInput, SessionFeedbackUncheckedCreateInput>
    /**
     * In case the SessionFeedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionFeedbackUpdateInput, SessionFeedbackUncheckedUpdateInput>
  }

  /**
   * SessionFeedback delete
   */
  export type SessionFeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
    /**
     * Filter which SessionFeedback to delete.
     */
    where: SessionFeedbackWhereUniqueInput
  }

  /**
   * SessionFeedback deleteMany
   */
  export type SessionFeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionFeedbacks to delete
     */
    where?: SessionFeedbackWhereInput
    /**
     * Limit how many SessionFeedbacks to delete.
     */
    limit?: number
  }

  /**
   * SessionFeedback without action
   */
  export type SessionFeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFeedback
     */
    select?: SessionFeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SessionFeedback
     */
    omit?: SessionFeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFeedbackInclude<ExtArgs> | null
  }


  /**
   * Model Staff
   */

  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffMinAggregateOutputType = {
    id: string | null
    profileId: string | null
    clientId: string | null
    role: $Enums.StaffRole | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.WorkStatus | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    emergencyContactEmail: string | null
    deletedAt: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffMaxAggregateOutputType = {
    id: string | null
    profileId: string | null
    clientId: string | null
    role: $Enums.StaffRole | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.WorkStatus | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    emergencyContactEmail: string | null
    deletedAt: Date | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffCountAggregateOutputType = {
    id: number
    profileId: number
    clientId: number
    role: number
    startDate: number
    endDate: number
    status: number
    qualifications: number
    specializations: number
    preferredWorkingHours: number
    emergencyContactName: number
    emergencyContactPhone: number
    emergencyContactEmail: number
    metadata: number
    deletedAt: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffMinAggregateInputType = {
    id?: true
    profileId?: true
    clientId?: true
    role?: true
    startDate?: true
    endDate?: true
    status?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    emergencyContactEmail?: true
    deletedAt?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffMaxAggregateInputType = {
    id?: true
    profileId?: true
    clientId?: true
    role?: true
    startDate?: true
    endDate?: true
    status?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    emergencyContactEmail?: true
    deletedAt?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffCountAggregateInputType = {
    id?: true
    profileId?: true
    clientId?: true
    role?: true
    startDate?: true
    endDate?: true
    status?: true
    qualifications?: true
    specializations?: true
    preferredWorkingHours?: true
    emergencyContactName?: true
    emergencyContactPhone?: true
    emergencyContactEmail?: true
    metadata?: true
    deletedAt?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to aggregate.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffWhereInput
    orderBy?: StaffOrderByWithAggregationInput | StaffOrderByWithAggregationInput[]
    by: StaffScalarFieldEnum[] | StaffScalarFieldEnum
    having?: StaffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }

  export type StaffGroupByOutputType = {
    id: string
    profileId: string
    clientId: string
    role: $Enums.StaffRole
    startDate: Date
    endDate: Date | null
    status: $Enums.WorkStatus
    qualifications: string[]
    specializations: string[]
    preferredWorkingHours: JsonValue | null
    emergencyContactName: string | null
    emergencyContactPhone: string | null
    emergencyContactEmail: string | null
    metadata: JsonValue | null
    deletedAt: Date | null
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: StaffCountAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type StaffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    clientId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    qualifications?: boolean
    specializations?: boolean
    preferredWorkingHours?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    metadata?: boolean
    deletedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    beneficiaries?: boolean | Staff$beneficiariesArgs<ExtArgs>
    ServiceSession?: boolean | Staff$ServiceSessionArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    clientId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    qualifications?: boolean
    specializations?: boolean
    preferredWorkingHours?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    metadata?: boolean
    deletedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    clientId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    qualifications?: boolean
    specializations?: boolean
    preferredWorkingHours?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    metadata?: boolean
    deletedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type StaffSelectScalar = {
    id?: boolean
    profileId?: boolean
    clientId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    qualifications?: boolean
    specializations?: boolean
    preferredWorkingHours?: boolean
    emergencyContactName?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    metadata?: boolean
    deletedAt?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StaffOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "profileId" | "clientId" | "role" | "startDate" | "endDate" | "status" | "qualifications" | "specializations" | "preferredWorkingHours" | "emergencyContactName" | "emergencyContactPhone" | "emergencyContactEmail" | "metadata" | "deletedAt" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["staff"]>
  export type StaffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
    beneficiaries?: boolean | Staff$beneficiariesArgs<ExtArgs>
    ServiceSession?: boolean | Staff$ServiceSessionArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StaffIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }
  export type StaffIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    client?: boolean | ClientDefaultArgs<ExtArgs>
  }

  export type $StaffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Staff"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      profile: Prisma.$ProfilePayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs>
      beneficiaries: Prisma.$BeneficiaryPayload<ExtArgs>[]
      ServiceSession: Prisma.$ServiceSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profileId: string
      clientId: string
      role: $Enums.StaffRole
      startDate: Date
      endDate: Date | null
      status: $Enums.WorkStatus
      qualifications: string[]
      specializations: string[]
      preferredWorkingHours: Prisma.JsonValue | null
      emergencyContactName: string | null
      emergencyContactPhone: string | null
      emergencyContactEmail: string | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staff"]>
    composites: {}
  }

  type StaffGetPayload<S extends boolean | null | undefined | StaffDefaultArgs> = $Result.GetResult<Prisma.$StaffPayload, S>

  type StaffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffCountAggregateInputType | true
    }

  export interface StaffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Staff'], meta: { name: 'Staff' } }
    /**
     * Find zero or one Staff that matches the filter.
     * @param {StaffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffFindUniqueArgs>(args: SelectSubset<T, StaffFindUniqueArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Staff that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffFindFirstArgs>(args?: SelectSubset<T, StaffFindFirstArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffWithIdOnly = await prisma.staff.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffFindManyArgs>(args?: SelectSubset<T, StaffFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Staff.
     * @param {StaffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
     */
    create<T extends StaffCreateArgs>(args: SelectSubset<T, StaffCreateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Staff.
     * @param {StaffCreateManyArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffCreateManyArgs>(args?: SelectSubset<T, StaffCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Staff and returns the data saved in the database.
     * @param {StaffCreateManyAndReturnArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Staff and only return the `id`
     * const staffWithIdOnly = await prisma.staff.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Staff.
     * @param {StaffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
     */
    delete<T extends StaffDeleteArgs>(args: SelectSubset<T, StaffDeleteArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Staff.
     * @param {StaffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffUpdateArgs>(args: SelectSubset<T, StaffUpdateArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Staff.
     * @param {StaffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffDeleteManyArgs>(args?: SelectSubset<T, StaffDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffUpdateManyArgs>(args: SelectSubset<T, StaffUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff and returns the data updated in the database.
     * @param {StaffUpdateManyAndReturnArgs} args - Arguments to update many Staff.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Staff and only return the `id`
     * const staffWithIdOnly = await prisma.staff.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Staff.
     * @param {StaffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
     */
    upsert<T extends StaffUpsertArgs>(args: SelectSubset<T, StaffUpsertArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends StaffCountArgs>(
      args?: Subset<T, StaffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): Prisma.PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Staff model
   */
  readonly fields: StaffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends ClientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientDefaultArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    beneficiaries<T extends Staff$beneficiariesArgs<ExtArgs> = {}>(args?: Subset<T, Staff$beneficiariesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ServiceSession<T extends Staff$ServiceSessionArgs<ExtArgs> = {}>(args?: Subset<T, Staff$ServiceSessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Staff model
   */
  interface StaffFieldRefs {
    readonly id: FieldRef<"Staff", 'String'>
    readonly profileId: FieldRef<"Staff", 'String'>
    readonly clientId: FieldRef<"Staff", 'String'>
    readonly role: FieldRef<"Staff", 'StaffRole'>
    readonly startDate: FieldRef<"Staff", 'DateTime'>
    readonly endDate: FieldRef<"Staff", 'DateTime'>
    readonly status: FieldRef<"Staff", 'WorkStatus'>
    readonly qualifications: FieldRef<"Staff", 'String[]'>
    readonly specializations: FieldRef<"Staff", 'String[]'>
    readonly preferredWorkingHours: FieldRef<"Staff", 'Json'>
    readonly emergencyContactName: FieldRef<"Staff", 'String'>
    readonly emergencyContactPhone: FieldRef<"Staff", 'String'>
    readonly emergencyContactEmail: FieldRef<"Staff", 'String'>
    readonly metadata: FieldRef<"Staff", 'Json'>
    readonly deletedAt: FieldRef<"Staff", 'DateTime'>
    readonly userId: FieldRef<"Staff", 'String'>
    readonly createdAt: FieldRef<"Staff", 'DateTime'>
    readonly updatedAt: FieldRef<"Staff", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Staff findUnique
   */
  export type StaffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findUniqueOrThrow
   */
  export type StaffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff findFirst
   */
  export type StaffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findFirstOrThrow
   */
  export type StaffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff findMany
   */
  export type StaffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter, which Staff to fetch.
     */
    where?: StaffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Staff to fetch.
     */
    orderBy?: StaffOrderByWithRelationInput | StaffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Staff.
     */
    cursor?: StaffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Staff.
     */
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * Staff create
   */
  export type StaffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to create a Staff.
     */
    data: XOR<StaffCreateInput, StaffUncheckedCreateInput>
  }

  /**
   * Staff createMany
   */
  export type StaffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Staff createManyAndReturn
   */
  export type StaffCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * The data used to create many Staff.
     */
    data: StaffCreateManyInput | StaffCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Staff update
   */
  export type StaffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The data needed to update a Staff.
     */
    data: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
    /**
     * Choose, which Staff to update.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff updateMany
   */
  export type StaffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
  }

  /**
   * Staff updateManyAndReturn
   */
  export type StaffUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * The data used to update Staff.
     */
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyInput>
    /**
     * Filter which Staff to update
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Staff upsert
   */
  export type StaffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * The filter to search for the Staff to update in case it exists.
     */
    where: StaffWhereUniqueInput
    /**
     * In case the Staff found by the `where` argument doesn't exist, create a new Staff with this data.
     */
    create: XOR<StaffCreateInput, StaffUncheckedCreateInput>
    /**
     * In case the Staff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffUpdateInput, StaffUncheckedUpdateInput>
  }

  /**
   * Staff delete
   */
  export type StaffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
    /**
     * Filter which Staff to delete.
     */
    where: StaffWhereUniqueInput
  }

  /**
   * Staff deleteMany
   */
  export type StaffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Staff to delete
     */
    where?: StaffWhereInput
    /**
     * Limit how many Staff to delete.
     */
    limit?: number
  }

  /**
   * Staff.beneficiaries
   */
  export type Staff$beneficiariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    where?: BeneficiaryWhereInput
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    cursor?: BeneficiaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BeneficiaryScalarFieldEnum | BeneficiaryScalarFieldEnum[]
  }

  /**
   * Staff.ServiceSession
   */
  export type Staff$ServiceSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    where?: ServiceSessionWhereInput
    orderBy?: ServiceSessionOrderByWithRelationInput | ServiceSessionOrderByWithRelationInput[]
    cursor?: ServiceSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceSessionScalarFieldEnum | ServiceSessionScalarFieldEnum[]
  }

  /**
   * Staff without action
   */
  export type StaffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Staff
     */
    select?: StaffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Staff
     */
    omit?: StaffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffInclude<ExtArgs> | null
  }


  /**
   * Model Beneficiary
   */

  export type AggregateBeneficiary = {
    _count: BeneficiaryCountAggregateOutputType | null
    _min: BeneficiaryMinAggregateOutputType | null
    _max: BeneficiaryMaxAggregateOutputType | null
  }

  export type BeneficiaryMinAggregateOutputType = {
    id: string | null
    profileId: string | null
    relation: $Enums.RelationType | null
    isStaffLink: boolean | null
    staffId: string | null
    guardianId: string | null
    userLinkId: string | null
    status: $Enums.BaseStatus | null
    lastServiceDate: Date | null
    preferredLanguage: $Enums.Language | null
    notes: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BeneficiaryMaxAggregateOutputType = {
    id: string | null
    profileId: string | null
    relation: $Enums.RelationType | null
    isStaffLink: boolean | null
    staffId: string | null
    guardianId: string | null
    userLinkId: string | null
    status: $Enums.BaseStatus | null
    lastServiceDate: Date | null
    preferredLanguage: $Enums.Language | null
    notes: string | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BeneficiaryCountAggregateOutputType = {
    id: number
    profileId: number
    relation: number
    isStaffLink: number
    staffId: number
    guardianId: number
    userLinkId: number
    status: number
    lastServiceDate: number
    preferredLanguage: number
    notes: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BeneficiaryMinAggregateInputType = {
    id?: true
    profileId?: true
    relation?: true
    isStaffLink?: true
    staffId?: true
    guardianId?: true
    userLinkId?: true
    status?: true
    lastServiceDate?: true
    preferredLanguage?: true
    notes?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BeneficiaryMaxAggregateInputType = {
    id?: true
    profileId?: true
    relation?: true
    isStaffLink?: true
    staffId?: true
    guardianId?: true
    userLinkId?: true
    status?: true
    lastServiceDate?: true
    preferredLanguage?: true
    notes?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BeneficiaryCountAggregateInputType = {
    id?: true
    profileId?: true
    relation?: true
    isStaffLink?: true
    staffId?: true
    guardianId?: true
    userLinkId?: true
    status?: true
    lastServiceDate?: true
    preferredLanguage?: true
    notes?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BeneficiaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Beneficiary to aggregate.
     */
    where?: BeneficiaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beneficiaries to fetch.
     */
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BeneficiaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beneficiaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beneficiaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Beneficiaries
    **/
    _count?: true | BeneficiaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BeneficiaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BeneficiaryMaxAggregateInputType
  }

  export type GetBeneficiaryAggregateType<T extends BeneficiaryAggregateArgs> = {
        [P in keyof T & keyof AggregateBeneficiary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBeneficiary[P]>
      : GetScalarType<T[P], AggregateBeneficiary[P]>
  }




  export type BeneficiaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeneficiaryWhereInput
    orderBy?: BeneficiaryOrderByWithAggregationInput | BeneficiaryOrderByWithAggregationInput[]
    by: BeneficiaryScalarFieldEnum[] | BeneficiaryScalarFieldEnum
    having?: BeneficiaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BeneficiaryCountAggregateInputType | true
    _min?: BeneficiaryMinAggregateInputType
    _max?: BeneficiaryMaxAggregateInputType
  }

  export type BeneficiaryGroupByOutputType = {
    id: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink: boolean
    staffId: string
    guardianId: string | null
    userLinkId: string | null
    status: $Enums.BaseStatus
    lastServiceDate: Date | null
    preferredLanguage: $Enums.Language | null
    notes: string | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: BeneficiaryCountAggregateOutputType | null
    _min: BeneficiaryMinAggregateOutputType | null
    _max: BeneficiaryMaxAggregateOutputType | null
  }

  type GetBeneficiaryGroupByPayload<T extends BeneficiaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BeneficiaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BeneficiaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BeneficiaryGroupByOutputType[P]>
            : GetScalarType<T[P], BeneficiaryGroupByOutputType[P]>
        }
      >
    >


  export type BeneficiarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    relation?: boolean
    isStaffLink?: boolean
    staffId?: boolean
    guardianId?: boolean
    userLinkId?: boolean
    status?: boolean
    lastServiceDate?: boolean
    preferredLanguage?: boolean
    notes?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    guardian?: boolean | Beneficiary$guardianArgs<ExtArgs>
    userLink?: boolean | Beneficiary$userLinkArgs<ExtArgs>
    ServiceSession?: boolean | Beneficiary$ServiceSessionArgs<ExtArgs>
    _count?: boolean | BeneficiaryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["beneficiary"]>

  export type BeneficiarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    relation?: boolean
    isStaffLink?: boolean
    staffId?: boolean
    guardianId?: boolean
    userLinkId?: boolean
    status?: boolean
    lastServiceDate?: boolean
    preferredLanguage?: boolean
    notes?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    guardian?: boolean | Beneficiary$guardianArgs<ExtArgs>
    userLink?: boolean | Beneficiary$userLinkArgs<ExtArgs>
  }, ExtArgs["result"]["beneficiary"]>

  export type BeneficiarySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    profileId?: boolean
    relation?: boolean
    isStaffLink?: boolean
    staffId?: boolean
    guardianId?: boolean
    userLinkId?: boolean
    status?: boolean
    lastServiceDate?: boolean
    preferredLanguage?: boolean
    notes?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    guardian?: boolean | Beneficiary$guardianArgs<ExtArgs>
    userLink?: boolean | Beneficiary$userLinkArgs<ExtArgs>
  }, ExtArgs["result"]["beneficiary"]>

  export type BeneficiarySelectScalar = {
    id?: boolean
    profileId?: boolean
    relation?: boolean
    isStaffLink?: boolean
    staffId?: boolean
    guardianId?: boolean
    userLinkId?: boolean
    status?: boolean
    lastServiceDate?: boolean
    preferredLanguage?: boolean
    notes?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BeneficiaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "profileId" | "relation" | "isStaffLink" | "staffId" | "guardianId" | "userLinkId" | "status" | "lastServiceDate" | "preferredLanguage" | "notes" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["beneficiary"]>
  export type BeneficiaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    guardian?: boolean | Beneficiary$guardianArgs<ExtArgs>
    userLink?: boolean | Beneficiary$userLinkArgs<ExtArgs>
    ServiceSession?: boolean | Beneficiary$ServiceSessionArgs<ExtArgs>
    _count?: boolean | BeneficiaryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BeneficiaryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    guardian?: boolean | Beneficiary$guardianArgs<ExtArgs>
    userLink?: boolean | Beneficiary$userLinkArgs<ExtArgs>
  }
  export type BeneficiaryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    staff?: boolean | StaffDefaultArgs<ExtArgs>
    guardian?: boolean | Beneficiary$guardianArgs<ExtArgs>
    userLink?: boolean | Beneficiary$userLinkArgs<ExtArgs>
  }

  export type $BeneficiaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Beneficiary"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
      staff: Prisma.$StaffPayload<ExtArgs>
      guardian: Prisma.$UserPayload<ExtArgs> | null
      userLink: Prisma.$UserPayload<ExtArgs> | null
      ServiceSession: Prisma.$ServiceSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      profileId: string
      relation: $Enums.RelationType
      isStaffLink: boolean
      staffId: string
      guardianId: string | null
      userLinkId: string | null
      status: $Enums.BaseStatus
      lastServiceDate: Date | null
      preferredLanguage: $Enums.Language | null
      notes: string | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["beneficiary"]>
    composites: {}
  }

  type BeneficiaryGetPayload<S extends boolean | null | undefined | BeneficiaryDefaultArgs> = $Result.GetResult<Prisma.$BeneficiaryPayload, S>

  type BeneficiaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BeneficiaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BeneficiaryCountAggregateInputType | true
    }

  export interface BeneficiaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Beneficiary'], meta: { name: 'Beneficiary' } }
    /**
     * Find zero or one Beneficiary that matches the filter.
     * @param {BeneficiaryFindUniqueArgs} args - Arguments to find a Beneficiary
     * @example
     * // Get one Beneficiary
     * const beneficiary = await prisma.beneficiary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BeneficiaryFindUniqueArgs>(args: SelectSubset<T, BeneficiaryFindUniqueArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Beneficiary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BeneficiaryFindUniqueOrThrowArgs} args - Arguments to find a Beneficiary
     * @example
     * // Get one Beneficiary
     * const beneficiary = await prisma.beneficiary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BeneficiaryFindUniqueOrThrowArgs>(args: SelectSubset<T, BeneficiaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Beneficiary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryFindFirstArgs} args - Arguments to find a Beneficiary
     * @example
     * // Get one Beneficiary
     * const beneficiary = await prisma.beneficiary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BeneficiaryFindFirstArgs>(args?: SelectSubset<T, BeneficiaryFindFirstArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Beneficiary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryFindFirstOrThrowArgs} args - Arguments to find a Beneficiary
     * @example
     * // Get one Beneficiary
     * const beneficiary = await prisma.beneficiary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BeneficiaryFindFirstOrThrowArgs>(args?: SelectSubset<T, BeneficiaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Beneficiaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Beneficiaries
     * const beneficiaries = await prisma.beneficiary.findMany()
     * 
     * // Get first 10 Beneficiaries
     * const beneficiaries = await prisma.beneficiary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const beneficiaryWithIdOnly = await prisma.beneficiary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BeneficiaryFindManyArgs>(args?: SelectSubset<T, BeneficiaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Beneficiary.
     * @param {BeneficiaryCreateArgs} args - Arguments to create a Beneficiary.
     * @example
     * // Create one Beneficiary
     * const Beneficiary = await prisma.beneficiary.create({
     *   data: {
     *     // ... data to create a Beneficiary
     *   }
     * })
     * 
     */
    create<T extends BeneficiaryCreateArgs>(args: SelectSubset<T, BeneficiaryCreateArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Beneficiaries.
     * @param {BeneficiaryCreateManyArgs} args - Arguments to create many Beneficiaries.
     * @example
     * // Create many Beneficiaries
     * const beneficiary = await prisma.beneficiary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BeneficiaryCreateManyArgs>(args?: SelectSubset<T, BeneficiaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Beneficiaries and returns the data saved in the database.
     * @param {BeneficiaryCreateManyAndReturnArgs} args - Arguments to create many Beneficiaries.
     * @example
     * // Create many Beneficiaries
     * const beneficiary = await prisma.beneficiary.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Beneficiaries and only return the `id`
     * const beneficiaryWithIdOnly = await prisma.beneficiary.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BeneficiaryCreateManyAndReturnArgs>(args?: SelectSubset<T, BeneficiaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Beneficiary.
     * @param {BeneficiaryDeleteArgs} args - Arguments to delete one Beneficiary.
     * @example
     * // Delete one Beneficiary
     * const Beneficiary = await prisma.beneficiary.delete({
     *   where: {
     *     // ... filter to delete one Beneficiary
     *   }
     * })
     * 
     */
    delete<T extends BeneficiaryDeleteArgs>(args: SelectSubset<T, BeneficiaryDeleteArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Beneficiary.
     * @param {BeneficiaryUpdateArgs} args - Arguments to update one Beneficiary.
     * @example
     * // Update one Beneficiary
     * const beneficiary = await prisma.beneficiary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BeneficiaryUpdateArgs>(args: SelectSubset<T, BeneficiaryUpdateArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Beneficiaries.
     * @param {BeneficiaryDeleteManyArgs} args - Arguments to filter Beneficiaries to delete.
     * @example
     * // Delete a few Beneficiaries
     * const { count } = await prisma.beneficiary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BeneficiaryDeleteManyArgs>(args?: SelectSubset<T, BeneficiaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Beneficiaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Beneficiaries
     * const beneficiary = await prisma.beneficiary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BeneficiaryUpdateManyArgs>(args: SelectSubset<T, BeneficiaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Beneficiaries and returns the data updated in the database.
     * @param {BeneficiaryUpdateManyAndReturnArgs} args - Arguments to update many Beneficiaries.
     * @example
     * // Update many Beneficiaries
     * const beneficiary = await prisma.beneficiary.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Beneficiaries and only return the `id`
     * const beneficiaryWithIdOnly = await prisma.beneficiary.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BeneficiaryUpdateManyAndReturnArgs>(args: SelectSubset<T, BeneficiaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Beneficiary.
     * @param {BeneficiaryUpsertArgs} args - Arguments to update or create a Beneficiary.
     * @example
     * // Update or create a Beneficiary
     * const beneficiary = await prisma.beneficiary.upsert({
     *   create: {
     *     // ... data to create a Beneficiary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Beneficiary we want to update
     *   }
     * })
     */
    upsert<T extends BeneficiaryUpsertArgs>(args: SelectSubset<T, BeneficiaryUpsertArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Beneficiaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryCountArgs} args - Arguments to filter Beneficiaries to count.
     * @example
     * // Count the number of Beneficiaries
     * const count = await prisma.beneficiary.count({
     *   where: {
     *     // ... the filter for the Beneficiaries we want to count
     *   }
     * })
    **/
    count<T extends BeneficiaryCountArgs>(
      args?: Subset<T, BeneficiaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BeneficiaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Beneficiary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BeneficiaryAggregateArgs>(args: Subset<T, BeneficiaryAggregateArgs>): Prisma.PrismaPromise<GetBeneficiaryAggregateType<T>>

    /**
     * Group by Beneficiary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BeneficiaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BeneficiaryGroupByArgs['orderBy'] }
        : { orderBy?: BeneficiaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BeneficiaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBeneficiaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Beneficiary model
   */
  readonly fields: BeneficiaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Beneficiary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BeneficiaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    staff<T extends StaffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffDefaultArgs<ExtArgs>>): Prisma__StaffClient<$Result.GetResult<Prisma.$StaffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    guardian<T extends Beneficiary$guardianArgs<ExtArgs> = {}>(args?: Subset<T, Beneficiary$guardianArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    userLink<T extends Beneficiary$userLinkArgs<ExtArgs> = {}>(args?: Subset<T, Beneficiary$userLinkArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ServiceSession<T extends Beneficiary$ServiceSessionArgs<ExtArgs> = {}>(args?: Subset<T, Beneficiary$ServiceSessionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Beneficiary model
   */
  interface BeneficiaryFieldRefs {
    readonly id: FieldRef<"Beneficiary", 'String'>
    readonly profileId: FieldRef<"Beneficiary", 'String'>
    readonly relation: FieldRef<"Beneficiary", 'RelationType'>
    readonly isStaffLink: FieldRef<"Beneficiary", 'Boolean'>
    readonly staffId: FieldRef<"Beneficiary", 'String'>
    readonly guardianId: FieldRef<"Beneficiary", 'String'>
    readonly userLinkId: FieldRef<"Beneficiary", 'String'>
    readonly status: FieldRef<"Beneficiary", 'BaseStatus'>
    readonly lastServiceDate: FieldRef<"Beneficiary", 'DateTime'>
    readonly preferredLanguage: FieldRef<"Beneficiary", 'Language'>
    readonly notes: FieldRef<"Beneficiary", 'String'>
    readonly deletedAt: FieldRef<"Beneficiary", 'DateTime'>
    readonly createdAt: FieldRef<"Beneficiary", 'DateTime'>
    readonly updatedAt: FieldRef<"Beneficiary", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Beneficiary findUnique
   */
  export type BeneficiaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiary to fetch.
     */
    where: BeneficiaryWhereUniqueInput
  }

  /**
   * Beneficiary findUniqueOrThrow
   */
  export type BeneficiaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiary to fetch.
     */
    where: BeneficiaryWhereUniqueInput
  }

  /**
   * Beneficiary findFirst
   */
  export type BeneficiaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiary to fetch.
     */
    where?: BeneficiaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beneficiaries to fetch.
     */
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Beneficiaries.
     */
    cursor?: BeneficiaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beneficiaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beneficiaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Beneficiaries.
     */
    distinct?: BeneficiaryScalarFieldEnum | BeneficiaryScalarFieldEnum[]
  }

  /**
   * Beneficiary findFirstOrThrow
   */
  export type BeneficiaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiary to fetch.
     */
    where?: BeneficiaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beneficiaries to fetch.
     */
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Beneficiaries.
     */
    cursor?: BeneficiaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beneficiaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beneficiaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Beneficiaries.
     */
    distinct?: BeneficiaryScalarFieldEnum | BeneficiaryScalarFieldEnum[]
  }

  /**
   * Beneficiary findMany
   */
  export type BeneficiaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiaries to fetch.
     */
    where?: BeneficiaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beneficiaries to fetch.
     */
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Beneficiaries.
     */
    cursor?: BeneficiaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beneficiaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beneficiaries.
     */
    skip?: number
    distinct?: BeneficiaryScalarFieldEnum | BeneficiaryScalarFieldEnum[]
  }

  /**
   * Beneficiary create
   */
  export type BeneficiaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * The data needed to create a Beneficiary.
     */
    data: XOR<BeneficiaryCreateInput, BeneficiaryUncheckedCreateInput>
  }

  /**
   * Beneficiary createMany
   */
  export type BeneficiaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Beneficiaries.
     */
    data: BeneficiaryCreateManyInput | BeneficiaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Beneficiary createManyAndReturn
   */
  export type BeneficiaryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * The data used to create many Beneficiaries.
     */
    data: BeneficiaryCreateManyInput | BeneficiaryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Beneficiary update
   */
  export type BeneficiaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * The data needed to update a Beneficiary.
     */
    data: XOR<BeneficiaryUpdateInput, BeneficiaryUncheckedUpdateInput>
    /**
     * Choose, which Beneficiary to update.
     */
    where: BeneficiaryWhereUniqueInput
  }

  /**
   * Beneficiary updateMany
   */
  export type BeneficiaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Beneficiaries.
     */
    data: XOR<BeneficiaryUpdateManyMutationInput, BeneficiaryUncheckedUpdateManyInput>
    /**
     * Filter which Beneficiaries to update
     */
    where?: BeneficiaryWhereInput
    /**
     * Limit how many Beneficiaries to update.
     */
    limit?: number
  }

  /**
   * Beneficiary updateManyAndReturn
   */
  export type BeneficiaryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * The data used to update Beneficiaries.
     */
    data: XOR<BeneficiaryUpdateManyMutationInput, BeneficiaryUncheckedUpdateManyInput>
    /**
     * Filter which Beneficiaries to update
     */
    where?: BeneficiaryWhereInput
    /**
     * Limit how many Beneficiaries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Beneficiary upsert
   */
  export type BeneficiaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * The filter to search for the Beneficiary to update in case it exists.
     */
    where: BeneficiaryWhereUniqueInput
    /**
     * In case the Beneficiary found by the `where` argument doesn't exist, create a new Beneficiary with this data.
     */
    create: XOR<BeneficiaryCreateInput, BeneficiaryUncheckedCreateInput>
    /**
     * In case the Beneficiary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BeneficiaryUpdateInput, BeneficiaryUncheckedUpdateInput>
  }

  /**
   * Beneficiary delete
   */
  export type BeneficiaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter which Beneficiary to delete.
     */
    where: BeneficiaryWhereUniqueInput
  }

  /**
   * Beneficiary deleteMany
   */
  export type BeneficiaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Beneficiaries to delete
     */
    where?: BeneficiaryWhereInput
    /**
     * Limit how many Beneficiaries to delete.
     */
    limit?: number
  }

  /**
   * Beneficiary.guardian
   */
  export type Beneficiary$guardianArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Beneficiary.userLink
   */
  export type Beneficiary$userLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Beneficiary.ServiceSession
   */
  export type Beneficiary$ServiceSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceSession
     */
    select?: ServiceSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceSession
     */
    omit?: ServiceSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceSessionInclude<ExtArgs> | null
    where?: ServiceSessionWhereInput
    orderBy?: ServiceSessionOrderByWithRelationInput | ServiceSessionOrderByWithRelationInput[]
    cursor?: ServiceSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceSessionScalarFieldEnum | ServiceSessionScalarFieldEnum[]
  }

  /**
   * Beneficiary without action
   */
  export type BeneficiaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Beneficiary
     */
    omit?: BeneficiaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BeneficiaryInclude<ExtArgs> | null
  }


  /**
   * Model KPI
   */

  export type AggregateKPI = {
    _count: KPICountAggregateOutputType | null
    _min: KPIMinAggregateOutputType | null
    _max: KPIMaxAggregateOutputType | null
  }

  export type KPIMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    typeId: string | null
    unit: string | null
    unitType: $Enums.Unit | null
    targetValue: string | null
    isPublic: boolean | null
    calculationMethod: string | null
    frequency: $Enums.Frequency | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    clientId: string | null
    contractId: string | null
  }

  export type KPIMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    typeId: string | null
    unit: string | null
    unitType: $Enums.Unit | null
    targetValue: string | null
    isPublic: boolean | null
    calculationMethod: string | null
    frequency: $Enums.Frequency | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    clientId: string | null
    contractId: string | null
  }

  export type KPICountAggregateOutputType = {
    id: number
    name: number
    description: number
    typeId: number
    unit: number
    unitType: number
    targetValue: number
    isPublic: number
    calculationMethod: number
    frequency: number
    metadata: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    clientId: number
    contractId: number
    _all: number
  }


  export type KPIMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    typeId?: true
    unit?: true
    unitType?: true
    targetValue?: true
    isPublic?: true
    calculationMethod?: true
    frequency?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    clientId?: true
    contractId?: true
  }

  export type KPIMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    typeId?: true
    unit?: true
    unitType?: true
    targetValue?: true
    isPublic?: true
    calculationMethod?: true
    frequency?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    clientId?: true
    contractId?: true
  }

  export type KPICountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    typeId?: true
    unit?: true
    unitType?: true
    targetValue?: true
    isPublic?: true
    calculationMethod?: true
    frequency?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    clientId?: true
    contractId?: true
    _all?: true
  }

  export type KPIAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPI to aggregate.
     */
    where?: KPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIS to fetch.
     */
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KPIS
    **/
    _count?: true | KPICountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KPIMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KPIMaxAggregateInputType
  }

  export type GetKPIAggregateType<T extends KPIAggregateArgs> = {
        [P in keyof T & keyof AggregateKPI]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKPI[P]>
      : GetScalarType<T[P], AggregateKPI[P]>
  }




  export type KPIGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIWhereInput
    orderBy?: KPIOrderByWithAggregationInput | KPIOrderByWithAggregationInput[]
    by: KPIScalarFieldEnum[] | KPIScalarFieldEnum
    having?: KPIScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KPICountAggregateInputType | true
    _min?: KPIMinAggregateInputType
    _max?: KPIMaxAggregateInputType
  }

  export type KPIGroupByOutputType = {
    id: string
    name: string
    description: string | null
    typeId: string
    unit: string
    unitType: $Enums.Unit
    targetValue: string | null
    isPublic: boolean
    calculationMethod: string | null
    frequency: $Enums.Frequency | null
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    clientId: string | null
    contractId: string | null
    _count: KPICountAggregateOutputType | null
    _min: KPIMinAggregateOutputType | null
    _max: KPIMaxAggregateOutputType | null
  }

  type GetKPIGroupByPayload<T extends KPIGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KPIGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KPIGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KPIGroupByOutputType[P]>
            : GetScalarType<T[P], KPIGroupByOutputType[P]>
        }
      >
    >


  export type KPISelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    typeId?: boolean
    unit?: boolean
    unitType?: boolean
    targetValue?: boolean
    isPublic?: boolean
    calculationMethod?: boolean
    frequency?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    contractId?: boolean
    type?: boolean | KpiTypeDefaultArgs<ExtArgs>
    assignments?: boolean | KPI$assignmentsArgs<ExtArgs>
    client?: boolean | KPI$clientArgs<ExtArgs>
    Contract?: boolean | KPI$ContractArgs<ExtArgs>
    _count?: boolean | KPICountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kPI"]>

  export type KPISelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    typeId?: boolean
    unit?: boolean
    unitType?: boolean
    targetValue?: boolean
    isPublic?: boolean
    calculationMethod?: boolean
    frequency?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    contractId?: boolean
    type?: boolean | KpiTypeDefaultArgs<ExtArgs>
    client?: boolean | KPI$clientArgs<ExtArgs>
    Contract?: boolean | KPI$ContractArgs<ExtArgs>
  }, ExtArgs["result"]["kPI"]>

  export type KPISelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    typeId?: boolean
    unit?: boolean
    unitType?: boolean
    targetValue?: boolean
    isPublic?: boolean
    calculationMethod?: boolean
    frequency?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    contractId?: boolean
    type?: boolean | KpiTypeDefaultArgs<ExtArgs>
    client?: boolean | KPI$clientArgs<ExtArgs>
    Contract?: boolean | KPI$ContractArgs<ExtArgs>
  }, ExtArgs["result"]["kPI"]>

  export type KPISelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    typeId?: boolean
    unit?: boolean
    unitType?: boolean
    targetValue?: boolean
    isPublic?: boolean
    calculationMethod?: boolean
    frequency?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    contractId?: boolean
  }

  export type KPIOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "typeId" | "unit" | "unitType" | "targetValue" | "isPublic" | "calculationMethod" | "frequency" | "metadata" | "deletedAt" | "createdAt" | "updatedAt" | "clientId" | "contractId", ExtArgs["result"]["kPI"]>
  export type KPIInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | KpiTypeDefaultArgs<ExtArgs>
    assignments?: boolean | KPI$assignmentsArgs<ExtArgs>
    client?: boolean | KPI$clientArgs<ExtArgs>
    Contract?: boolean | KPI$ContractArgs<ExtArgs>
    _count?: boolean | KPICountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KPIIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | KpiTypeDefaultArgs<ExtArgs>
    client?: boolean | KPI$clientArgs<ExtArgs>
    Contract?: boolean | KPI$ContractArgs<ExtArgs>
  }
  export type KPIIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | KpiTypeDefaultArgs<ExtArgs>
    client?: boolean | KPI$clientArgs<ExtArgs>
    Contract?: boolean | KPI$ContractArgs<ExtArgs>
  }

  export type $KPIPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KPI"
    objects: {
      type: Prisma.$KpiTypePayload<ExtArgs>
      assignments: Prisma.$KPIAssignmentPayload<ExtArgs>[]
      client: Prisma.$ClientPayload<ExtArgs> | null
      Contract: Prisma.$ContractPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      typeId: string
      unit: string
      unitType: $Enums.Unit
      targetValue: string | null
      isPublic: boolean
      calculationMethod: string | null
      frequency: $Enums.Frequency | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
      clientId: string | null
      contractId: string | null
    }, ExtArgs["result"]["kPI"]>
    composites: {}
  }

  type KPIGetPayload<S extends boolean | null | undefined | KPIDefaultArgs> = $Result.GetResult<Prisma.$KPIPayload, S>

  type KPICountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KPIFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KPICountAggregateInputType | true
    }

  export interface KPIDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KPI'], meta: { name: 'KPI' } }
    /**
     * Find zero or one KPI that matches the filter.
     * @param {KPIFindUniqueArgs} args - Arguments to find a KPI
     * @example
     * // Get one KPI
     * const kPI = await prisma.kPI.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KPIFindUniqueArgs>(args: SelectSubset<T, KPIFindUniqueArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KPI that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KPIFindUniqueOrThrowArgs} args - Arguments to find a KPI
     * @example
     * // Get one KPI
     * const kPI = await prisma.kPI.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KPIFindUniqueOrThrowArgs>(args: SelectSubset<T, KPIFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPI that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIFindFirstArgs} args - Arguments to find a KPI
     * @example
     * // Get one KPI
     * const kPI = await prisma.kPI.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KPIFindFirstArgs>(args?: SelectSubset<T, KPIFindFirstArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPI that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIFindFirstOrThrowArgs} args - Arguments to find a KPI
     * @example
     * // Get one KPI
     * const kPI = await prisma.kPI.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KPIFindFirstOrThrowArgs>(args?: SelectSubset<T, KPIFindFirstOrThrowArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KPIS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KPIS
     * const kPIS = await prisma.kPI.findMany()
     * 
     * // Get first 10 KPIS
     * const kPIS = await prisma.kPI.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kPIWithIdOnly = await prisma.kPI.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KPIFindManyArgs>(args?: SelectSubset<T, KPIFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KPI.
     * @param {KPICreateArgs} args - Arguments to create a KPI.
     * @example
     * // Create one KPI
     * const KPI = await prisma.kPI.create({
     *   data: {
     *     // ... data to create a KPI
     *   }
     * })
     * 
     */
    create<T extends KPICreateArgs>(args: SelectSubset<T, KPICreateArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KPIS.
     * @param {KPICreateManyArgs} args - Arguments to create many KPIS.
     * @example
     * // Create many KPIS
     * const kPI = await prisma.kPI.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KPICreateManyArgs>(args?: SelectSubset<T, KPICreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KPIS and returns the data saved in the database.
     * @param {KPICreateManyAndReturnArgs} args - Arguments to create many KPIS.
     * @example
     * // Create many KPIS
     * const kPI = await prisma.kPI.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KPIS and only return the `id`
     * const kPIWithIdOnly = await prisma.kPI.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KPICreateManyAndReturnArgs>(args?: SelectSubset<T, KPICreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KPI.
     * @param {KPIDeleteArgs} args - Arguments to delete one KPI.
     * @example
     * // Delete one KPI
     * const KPI = await prisma.kPI.delete({
     *   where: {
     *     // ... filter to delete one KPI
     *   }
     * })
     * 
     */
    delete<T extends KPIDeleteArgs>(args: SelectSubset<T, KPIDeleteArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KPI.
     * @param {KPIUpdateArgs} args - Arguments to update one KPI.
     * @example
     * // Update one KPI
     * const kPI = await prisma.kPI.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KPIUpdateArgs>(args: SelectSubset<T, KPIUpdateArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KPIS.
     * @param {KPIDeleteManyArgs} args - Arguments to filter KPIS to delete.
     * @example
     * // Delete a few KPIS
     * const { count } = await prisma.kPI.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KPIDeleteManyArgs>(args?: SelectSubset<T, KPIDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KPIS
     * const kPI = await prisma.kPI.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KPIUpdateManyArgs>(args: SelectSubset<T, KPIUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIS and returns the data updated in the database.
     * @param {KPIUpdateManyAndReturnArgs} args - Arguments to update many KPIS.
     * @example
     * // Update many KPIS
     * const kPI = await prisma.kPI.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KPIS and only return the `id`
     * const kPIWithIdOnly = await prisma.kPI.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KPIUpdateManyAndReturnArgs>(args: SelectSubset<T, KPIUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KPI.
     * @param {KPIUpsertArgs} args - Arguments to update or create a KPI.
     * @example
     * // Update or create a KPI
     * const kPI = await prisma.kPI.upsert({
     *   create: {
     *     // ... data to create a KPI
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KPI we want to update
     *   }
     * })
     */
    upsert<T extends KPIUpsertArgs>(args: SelectSubset<T, KPIUpsertArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KPIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPICountArgs} args - Arguments to filter KPIS to count.
     * @example
     * // Count the number of KPIS
     * const count = await prisma.kPI.count({
     *   where: {
     *     // ... the filter for the KPIS we want to count
     *   }
     * })
    **/
    count<T extends KPICountArgs>(
      args?: Subset<T, KPICountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KPICountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KPI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KPIAggregateArgs>(args: Subset<T, KPIAggregateArgs>): Prisma.PrismaPromise<GetKPIAggregateType<T>>

    /**
     * Group by KPI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KPIGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KPIGroupByArgs['orderBy'] }
        : { orderBy?: KPIGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KPIGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKPIGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KPI model
   */
  readonly fields: KPIFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KPI.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KPIClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    type<T extends KpiTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KpiTypeDefaultArgs<ExtArgs>>): Prisma__KpiTypeClient<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignments<T extends KPI$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, KPI$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    client<T extends KPI$clientArgs<ExtArgs> = {}>(args?: Subset<T, KPI$clientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Contract<T extends KPI$ContractArgs<ExtArgs> = {}>(args?: Subset<T, KPI$ContractArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KPI model
   */
  interface KPIFieldRefs {
    readonly id: FieldRef<"KPI", 'String'>
    readonly name: FieldRef<"KPI", 'String'>
    readonly description: FieldRef<"KPI", 'String'>
    readonly typeId: FieldRef<"KPI", 'String'>
    readonly unit: FieldRef<"KPI", 'String'>
    readonly unitType: FieldRef<"KPI", 'Unit'>
    readonly targetValue: FieldRef<"KPI", 'String'>
    readonly isPublic: FieldRef<"KPI", 'Boolean'>
    readonly calculationMethod: FieldRef<"KPI", 'String'>
    readonly frequency: FieldRef<"KPI", 'Frequency'>
    readonly metadata: FieldRef<"KPI", 'Json'>
    readonly deletedAt: FieldRef<"KPI", 'DateTime'>
    readonly createdAt: FieldRef<"KPI", 'DateTime'>
    readonly updatedAt: FieldRef<"KPI", 'DateTime'>
    readonly clientId: FieldRef<"KPI", 'String'>
    readonly contractId: FieldRef<"KPI", 'String'>
  }
    

  // Custom InputTypes
  /**
   * KPI findUnique
   */
  export type KPIFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPI to fetch.
     */
    where: KPIWhereUniqueInput
  }

  /**
   * KPI findUniqueOrThrow
   */
  export type KPIFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPI to fetch.
     */
    where: KPIWhereUniqueInput
  }

  /**
   * KPI findFirst
   */
  export type KPIFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPI to fetch.
     */
    where?: KPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIS to fetch.
     */
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIS.
     */
    cursor?: KPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIS.
     */
    distinct?: KPIScalarFieldEnum | KPIScalarFieldEnum[]
  }

  /**
   * KPI findFirstOrThrow
   */
  export type KPIFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPI to fetch.
     */
    where?: KPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIS to fetch.
     */
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIS.
     */
    cursor?: KPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIS.
     */
    distinct?: KPIScalarFieldEnum | KPIScalarFieldEnum[]
  }

  /**
   * KPI findMany
   */
  export type KPIFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter, which KPIS to fetch.
     */
    where?: KPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIS to fetch.
     */
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KPIS.
     */
    cursor?: KPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIS.
     */
    skip?: number
    distinct?: KPIScalarFieldEnum | KPIScalarFieldEnum[]
  }

  /**
   * KPI create
   */
  export type KPICreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * The data needed to create a KPI.
     */
    data: XOR<KPICreateInput, KPIUncheckedCreateInput>
  }

  /**
   * KPI createMany
   */
  export type KPICreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KPIS.
     */
    data: KPICreateManyInput | KPICreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KPI createManyAndReturn
   */
  export type KPICreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * The data used to create many KPIS.
     */
    data: KPICreateManyInput | KPICreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KPI update
   */
  export type KPIUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * The data needed to update a KPI.
     */
    data: XOR<KPIUpdateInput, KPIUncheckedUpdateInput>
    /**
     * Choose, which KPI to update.
     */
    where: KPIWhereUniqueInput
  }

  /**
   * KPI updateMany
   */
  export type KPIUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KPIS.
     */
    data: XOR<KPIUpdateManyMutationInput, KPIUncheckedUpdateManyInput>
    /**
     * Filter which KPIS to update
     */
    where?: KPIWhereInput
    /**
     * Limit how many KPIS to update.
     */
    limit?: number
  }

  /**
   * KPI updateManyAndReturn
   */
  export type KPIUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * The data used to update KPIS.
     */
    data: XOR<KPIUpdateManyMutationInput, KPIUncheckedUpdateManyInput>
    /**
     * Filter which KPIS to update
     */
    where?: KPIWhereInput
    /**
     * Limit how many KPIS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KPI upsert
   */
  export type KPIUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * The filter to search for the KPI to update in case it exists.
     */
    where: KPIWhereUniqueInput
    /**
     * In case the KPI found by the `where` argument doesn't exist, create a new KPI with this data.
     */
    create: XOR<KPICreateInput, KPIUncheckedCreateInput>
    /**
     * In case the KPI was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KPIUpdateInput, KPIUncheckedUpdateInput>
  }

  /**
   * KPI delete
   */
  export type KPIDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    /**
     * Filter which KPI to delete.
     */
    where: KPIWhereUniqueInput
  }

  /**
   * KPI deleteMany
   */
  export type KPIDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPIS to delete
     */
    where?: KPIWhereInput
    /**
     * Limit how many KPIS to delete.
     */
    limit?: number
  }

  /**
   * KPI.assignments
   */
  export type KPI$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    where?: KPIAssignmentWhereInput
    orderBy?: KPIAssignmentOrderByWithRelationInput | KPIAssignmentOrderByWithRelationInput[]
    cursor?: KPIAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KPIAssignmentScalarFieldEnum | KPIAssignmentScalarFieldEnum[]
  }

  /**
   * KPI.client
   */
  export type KPI$clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * KPI.Contract
   */
  export type KPI$ContractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
  }

  /**
   * KPI without action
   */
  export type KPIDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
  }


  /**
   * Model KpiType
   */

  export type AggregateKpiType = {
    _count: KpiTypeCountAggregateOutputType | null
    _avg: KpiTypeAvgAggregateOutputType | null
    _sum: KpiTypeSumAggregateOutputType | null
    _min: KpiTypeMinAggregateOutputType | null
    _max: KpiTypeMaxAggregateOutputType | null
  }

  export type KpiTypeAvgAggregateOutputType = {
    weight: number | null
  }

  export type KpiTypeSumAggregateOutputType = {
    weight: number | null
  }

  export type KpiTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    weight: number | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KpiTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    weight: number | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KpiTypeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    weight: number
    metadata: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KpiTypeAvgAggregateInputType = {
    weight?: true
  }

  export type KpiTypeSumAggregateInputType = {
    weight?: true
  }

  export type KpiTypeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    weight?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KpiTypeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    weight?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KpiTypeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    weight?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KpiTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KpiType to aggregate.
     */
    where?: KpiTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KpiTypes to fetch.
     */
    orderBy?: KpiTypeOrderByWithRelationInput | KpiTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KpiTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KpiTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KpiTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KpiTypes
    **/
    _count?: true | KpiTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KpiTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KpiTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KpiTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KpiTypeMaxAggregateInputType
  }

  export type GetKpiTypeAggregateType<T extends KpiTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateKpiType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKpiType[P]>
      : GetScalarType<T[P], AggregateKpiType[P]>
  }




  export type KpiTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KpiTypeWhereInput
    orderBy?: KpiTypeOrderByWithAggregationInput | KpiTypeOrderByWithAggregationInput[]
    by: KpiTypeScalarFieldEnum[] | KpiTypeScalarFieldEnum
    having?: KpiTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KpiTypeCountAggregateInputType | true
    _avg?: KpiTypeAvgAggregateInputType
    _sum?: KpiTypeSumAggregateInputType
    _min?: KpiTypeMinAggregateInputType
    _max?: KpiTypeMaxAggregateInputType
  }

  export type KpiTypeGroupByOutputType = {
    id: string
    name: string
    description: string | null
    weight: number | null
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: KpiTypeCountAggregateOutputType | null
    _avg: KpiTypeAvgAggregateOutputType | null
    _sum: KpiTypeSumAggregateOutputType | null
    _min: KpiTypeMinAggregateOutputType | null
    _max: KpiTypeMaxAggregateOutputType | null
  }

  type GetKpiTypeGroupByPayload<T extends KpiTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KpiTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KpiTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KpiTypeGroupByOutputType[P]>
            : GetScalarType<T[P], KpiTypeGroupByOutputType[P]>
        }
      >
    >


  export type KpiTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    weight?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    kpis?: boolean | KpiType$kpisArgs<ExtArgs>
    _count?: boolean | KpiTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kpiType"]>

  export type KpiTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    weight?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["kpiType"]>

  export type KpiTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    weight?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["kpiType"]>

  export type KpiTypeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    weight?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KpiTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "weight" | "metadata" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["kpiType"]>
  export type KpiTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpis?: boolean | KpiType$kpisArgs<ExtArgs>
    _count?: boolean | KpiTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KpiTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type KpiTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $KpiTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KpiType"
    objects: {
      kpis: Prisma.$KPIPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      weight: number | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kpiType"]>
    composites: {}
  }

  type KpiTypeGetPayload<S extends boolean | null | undefined | KpiTypeDefaultArgs> = $Result.GetResult<Prisma.$KpiTypePayload, S>

  type KpiTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KpiTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KpiTypeCountAggregateInputType | true
    }

  export interface KpiTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KpiType'], meta: { name: 'KpiType' } }
    /**
     * Find zero or one KpiType that matches the filter.
     * @param {KpiTypeFindUniqueArgs} args - Arguments to find a KpiType
     * @example
     * // Get one KpiType
     * const kpiType = await prisma.kpiType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KpiTypeFindUniqueArgs>(args: SelectSubset<T, KpiTypeFindUniqueArgs<ExtArgs>>): Prisma__KpiTypeClient<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KpiType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KpiTypeFindUniqueOrThrowArgs} args - Arguments to find a KpiType
     * @example
     * // Get one KpiType
     * const kpiType = await prisma.kpiType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KpiTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, KpiTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KpiTypeClient<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KpiType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KpiTypeFindFirstArgs} args - Arguments to find a KpiType
     * @example
     * // Get one KpiType
     * const kpiType = await prisma.kpiType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KpiTypeFindFirstArgs>(args?: SelectSubset<T, KpiTypeFindFirstArgs<ExtArgs>>): Prisma__KpiTypeClient<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KpiType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KpiTypeFindFirstOrThrowArgs} args - Arguments to find a KpiType
     * @example
     * // Get one KpiType
     * const kpiType = await prisma.kpiType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KpiTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, KpiTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__KpiTypeClient<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KpiTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KpiTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KpiTypes
     * const kpiTypes = await prisma.kpiType.findMany()
     * 
     * // Get first 10 KpiTypes
     * const kpiTypes = await prisma.kpiType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kpiTypeWithIdOnly = await prisma.kpiType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KpiTypeFindManyArgs>(args?: SelectSubset<T, KpiTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KpiType.
     * @param {KpiTypeCreateArgs} args - Arguments to create a KpiType.
     * @example
     * // Create one KpiType
     * const KpiType = await prisma.kpiType.create({
     *   data: {
     *     // ... data to create a KpiType
     *   }
     * })
     * 
     */
    create<T extends KpiTypeCreateArgs>(args: SelectSubset<T, KpiTypeCreateArgs<ExtArgs>>): Prisma__KpiTypeClient<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KpiTypes.
     * @param {KpiTypeCreateManyArgs} args - Arguments to create many KpiTypes.
     * @example
     * // Create many KpiTypes
     * const kpiType = await prisma.kpiType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KpiTypeCreateManyArgs>(args?: SelectSubset<T, KpiTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KpiTypes and returns the data saved in the database.
     * @param {KpiTypeCreateManyAndReturnArgs} args - Arguments to create many KpiTypes.
     * @example
     * // Create many KpiTypes
     * const kpiType = await prisma.kpiType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KpiTypes and only return the `id`
     * const kpiTypeWithIdOnly = await prisma.kpiType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KpiTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, KpiTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KpiType.
     * @param {KpiTypeDeleteArgs} args - Arguments to delete one KpiType.
     * @example
     * // Delete one KpiType
     * const KpiType = await prisma.kpiType.delete({
     *   where: {
     *     // ... filter to delete one KpiType
     *   }
     * })
     * 
     */
    delete<T extends KpiTypeDeleteArgs>(args: SelectSubset<T, KpiTypeDeleteArgs<ExtArgs>>): Prisma__KpiTypeClient<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KpiType.
     * @param {KpiTypeUpdateArgs} args - Arguments to update one KpiType.
     * @example
     * // Update one KpiType
     * const kpiType = await prisma.kpiType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KpiTypeUpdateArgs>(args: SelectSubset<T, KpiTypeUpdateArgs<ExtArgs>>): Prisma__KpiTypeClient<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KpiTypes.
     * @param {KpiTypeDeleteManyArgs} args - Arguments to filter KpiTypes to delete.
     * @example
     * // Delete a few KpiTypes
     * const { count } = await prisma.kpiType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KpiTypeDeleteManyArgs>(args?: SelectSubset<T, KpiTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KpiTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KpiTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KpiTypes
     * const kpiType = await prisma.kpiType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KpiTypeUpdateManyArgs>(args: SelectSubset<T, KpiTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KpiTypes and returns the data updated in the database.
     * @param {KpiTypeUpdateManyAndReturnArgs} args - Arguments to update many KpiTypes.
     * @example
     * // Update many KpiTypes
     * const kpiType = await prisma.kpiType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KpiTypes and only return the `id`
     * const kpiTypeWithIdOnly = await prisma.kpiType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KpiTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, KpiTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KpiType.
     * @param {KpiTypeUpsertArgs} args - Arguments to update or create a KpiType.
     * @example
     * // Update or create a KpiType
     * const kpiType = await prisma.kpiType.upsert({
     *   create: {
     *     // ... data to create a KpiType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KpiType we want to update
     *   }
     * })
     */
    upsert<T extends KpiTypeUpsertArgs>(args: SelectSubset<T, KpiTypeUpsertArgs<ExtArgs>>): Prisma__KpiTypeClient<$Result.GetResult<Prisma.$KpiTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KpiTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KpiTypeCountArgs} args - Arguments to filter KpiTypes to count.
     * @example
     * // Count the number of KpiTypes
     * const count = await prisma.kpiType.count({
     *   where: {
     *     // ... the filter for the KpiTypes we want to count
     *   }
     * })
    **/
    count<T extends KpiTypeCountArgs>(
      args?: Subset<T, KpiTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KpiTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KpiType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KpiTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KpiTypeAggregateArgs>(args: Subset<T, KpiTypeAggregateArgs>): Prisma.PrismaPromise<GetKpiTypeAggregateType<T>>

    /**
     * Group by KpiType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KpiTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KpiTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KpiTypeGroupByArgs['orderBy'] }
        : { orderBy?: KpiTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KpiTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKpiTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KpiType model
   */
  readonly fields: KpiTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KpiType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KpiTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kpis<T extends KpiType$kpisArgs<ExtArgs> = {}>(args?: Subset<T, KpiType$kpisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KpiType model
   */
  interface KpiTypeFieldRefs {
    readonly id: FieldRef<"KpiType", 'String'>
    readonly name: FieldRef<"KpiType", 'String'>
    readonly description: FieldRef<"KpiType", 'String'>
    readonly weight: FieldRef<"KpiType", 'Int'>
    readonly metadata: FieldRef<"KpiType", 'Json'>
    readonly deletedAt: FieldRef<"KpiType", 'DateTime'>
    readonly createdAt: FieldRef<"KpiType", 'DateTime'>
    readonly updatedAt: FieldRef<"KpiType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KpiType findUnique
   */
  export type KpiTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
    /**
     * Filter, which KpiType to fetch.
     */
    where: KpiTypeWhereUniqueInput
  }

  /**
   * KpiType findUniqueOrThrow
   */
  export type KpiTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
    /**
     * Filter, which KpiType to fetch.
     */
    where: KpiTypeWhereUniqueInput
  }

  /**
   * KpiType findFirst
   */
  export type KpiTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
    /**
     * Filter, which KpiType to fetch.
     */
    where?: KpiTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KpiTypes to fetch.
     */
    orderBy?: KpiTypeOrderByWithRelationInput | KpiTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KpiTypes.
     */
    cursor?: KpiTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KpiTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KpiTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KpiTypes.
     */
    distinct?: KpiTypeScalarFieldEnum | KpiTypeScalarFieldEnum[]
  }

  /**
   * KpiType findFirstOrThrow
   */
  export type KpiTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
    /**
     * Filter, which KpiType to fetch.
     */
    where?: KpiTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KpiTypes to fetch.
     */
    orderBy?: KpiTypeOrderByWithRelationInput | KpiTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KpiTypes.
     */
    cursor?: KpiTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KpiTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KpiTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KpiTypes.
     */
    distinct?: KpiTypeScalarFieldEnum | KpiTypeScalarFieldEnum[]
  }

  /**
   * KpiType findMany
   */
  export type KpiTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
    /**
     * Filter, which KpiTypes to fetch.
     */
    where?: KpiTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KpiTypes to fetch.
     */
    orderBy?: KpiTypeOrderByWithRelationInput | KpiTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KpiTypes.
     */
    cursor?: KpiTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KpiTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KpiTypes.
     */
    skip?: number
    distinct?: KpiTypeScalarFieldEnum | KpiTypeScalarFieldEnum[]
  }

  /**
   * KpiType create
   */
  export type KpiTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a KpiType.
     */
    data: XOR<KpiTypeCreateInput, KpiTypeUncheckedCreateInput>
  }

  /**
   * KpiType createMany
   */
  export type KpiTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KpiTypes.
     */
    data: KpiTypeCreateManyInput | KpiTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KpiType createManyAndReturn
   */
  export type KpiTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * The data used to create many KpiTypes.
     */
    data: KpiTypeCreateManyInput | KpiTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KpiType update
   */
  export type KpiTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a KpiType.
     */
    data: XOR<KpiTypeUpdateInput, KpiTypeUncheckedUpdateInput>
    /**
     * Choose, which KpiType to update.
     */
    where: KpiTypeWhereUniqueInput
  }

  /**
   * KpiType updateMany
   */
  export type KpiTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KpiTypes.
     */
    data: XOR<KpiTypeUpdateManyMutationInput, KpiTypeUncheckedUpdateManyInput>
    /**
     * Filter which KpiTypes to update
     */
    where?: KpiTypeWhereInput
    /**
     * Limit how many KpiTypes to update.
     */
    limit?: number
  }

  /**
   * KpiType updateManyAndReturn
   */
  export type KpiTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * The data used to update KpiTypes.
     */
    data: XOR<KpiTypeUpdateManyMutationInput, KpiTypeUncheckedUpdateManyInput>
    /**
     * Filter which KpiTypes to update
     */
    where?: KpiTypeWhereInput
    /**
     * Limit how many KpiTypes to update.
     */
    limit?: number
  }

  /**
   * KpiType upsert
   */
  export type KpiTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the KpiType to update in case it exists.
     */
    where: KpiTypeWhereUniqueInput
    /**
     * In case the KpiType found by the `where` argument doesn't exist, create a new KpiType with this data.
     */
    create: XOR<KpiTypeCreateInput, KpiTypeUncheckedCreateInput>
    /**
     * In case the KpiType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KpiTypeUpdateInput, KpiTypeUncheckedUpdateInput>
  }

  /**
   * KpiType delete
   */
  export type KpiTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
    /**
     * Filter which KpiType to delete.
     */
    where: KpiTypeWhereUniqueInput
  }

  /**
   * KpiType deleteMany
   */
  export type KpiTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KpiTypes to delete
     */
    where?: KpiTypeWhereInput
    /**
     * Limit how many KpiTypes to delete.
     */
    limit?: number
  }

  /**
   * KpiType.kpis
   */
  export type KpiType$kpisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPI
     */
    select?: KPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPI
     */
    omit?: KPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIInclude<ExtArgs> | null
    where?: KPIWhereInput
    orderBy?: KPIOrderByWithRelationInput | KPIOrderByWithRelationInput[]
    cursor?: KPIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KPIScalarFieldEnum | KPIScalarFieldEnum[]
  }

  /**
   * KpiType without action
   */
  export type KpiTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KpiType
     */
    select?: KpiTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KpiType
     */
    omit?: KpiTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KpiTypeInclude<ExtArgs> | null
  }


  /**
   * Model KPIAssignment
   */

  export type AggregateKPIAssignment = {
    _count: KPIAssignmentCountAggregateOutputType | null
    _min: KPIAssignmentMinAggregateOutputType | null
    _max: KPIAssignmentMaxAggregateOutputType | null
  }

  export type KPIAssignmentMinAggregateOutputType = {
    id: string | null
    kpiId: string | null
    contractId: string | null
    targetValue: string | null
    frequency: $Enums.Frequency | null
    status: $Enums.AssignmentStatus | null
    notes: string | null
    startDate: Date | null
    endDate: Date | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    clientId: string | null
  }

  export type KPIAssignmentMaxAggregateOutputType = {
    id: string | null
    kpiId: string | null
    contractId: string | null
    targetValue: string | null
    frequency: $Enums.Frequency | null
    status: $Enums.AssignmentStatus | null
    notes: string | null
    startDate: Date | null
    endDate: Date | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    clientId: string | null
  }

  export type KPIAssignmentCountAggregateOutputType = {
    id: number
    kpiId: number
    contractId: number
    targetValue: number
    frequency: number
    status: number
    notes: number
    startDate: number
    endDate: number
    metadata: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    clientId: number
    _all: number
  }


  export type KPIAssignmentMinAggregateInputType = {
    id?: true
    kpiId?: true
    contractId?: true
    targetValue?: true
    frequency?: true
    status?: true
    notes?: true
    startDate?: true
    endDate?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    clientId?: true
  }

  export type KPIAssignmentMaxAggregateInputType = {
    id?: true
    kpiId?: true
    contractId?: true
    targetValue?: true
    frequency?: true
    status?: true
    notes?: true
    startDate?: true
    endDate?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    clientId?: true
  }

  export type KPIAssignmentCountAggregateInputType = {
    id?: true
    kpiId?: true
    contractId?: true
    targetValue?: true
    frequency?: true
    status?: true
    notes?: true
    startDate?: true
    endDate?: true
    metadata?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    clientId?: true
    _all?: true
  }

  export type KPIAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPIAssignment to aggregate.
     */
    where?: KPIAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIAssignments to fetch.
     */
    orderBy?: KPIAssignmentOrderByWithRelationInput | KPIAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KPIAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KPIAssignments
    **/
    _count?: true | KPIAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KPIAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KPIAssignmentMaxAggregateInputType
  }

  export type GetKPIAssignmentAggregateType<T extends KPIAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateKPIAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKPIAssignment[P]>
      : GetScalarType<T[P], AggregateKPIAssignment[P]>
  }




  export type KPIAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KPIAssignmentWhereInput
    orderBy?: KPIAssignmentOrderByWithAggregationInput | KPIAssignmentOrderByWithAggregationInput[]
    by: KPIAssignmentScalarFieldEnum[] | KPIAssignmentScalarFieldEnum
    having?: KPIAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KPIAssignmentCountAggregateInputType | true
    _min?: KPIAssignmentMinAggregateInputType
    _max?: KPIAssignmentMaxAggregateInputType
  }

  export type KPIAssignmentGroupByOutputType = {
    id: string
    kpiId: string
    contractId: string
    targetValue: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes: string | null
    startDate: Date
    endDate: Date | null
    metadata: JsonValue | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    clientId: string | null
    _count: KPIAssignmentCountAggregateOutputType | null
    _min: KPIAssignmentMinAggregateOutputType | null
    _max: KPIAssignmentMaxAggregateOutputType | null
  }

  type GetKPIAssignmentGroupByPayload<T extends KPIAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KPIAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KPIAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KPIAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], KPIAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type KPIAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kpiId?: boolean
    contractId?: boolean
    targetValue?: boolean
    frequency?: boolean
    status?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | KPIAssignment$clientArgs<ExtArgs>
  }, ExtArgs["result"]["kPIAssignment"]>

  export type KPIAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kpiId?: boolean
    contractId?: boolean
    targetValue?: boolean
    frequency?: boolean
    status?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | KPIAssignment$clientArgs<ExtArgs>
  }, ExtArgs["result"]["kPIAssignment"]>

  export type KPIAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kpiId?: boolean
    contractId?: boolean
    targetValue?: boolean
    frequency?: boolean
    status?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | KPIAssignment$clientArgs<ExtArgs>
  }, ExtArgs["result"]["kPIAssignment"]>

  export type KPIAssignmentSelectScalar = {
    id?: boolean
    kpiId?: boolean
    contractId?: boolean
    targetValue?: boolean
    frequency?: boolean
    status?: boolean
    notes?: boolean
    startDate?: boolean
    endDate?: boolean
    metadata?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    clientId?: boolean
  }

  export type KPIAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "kpiId" | "contractId" | "targetValue" | "frequency" | "status" | "notes" | "startDate" | "endDate" | "metadata" | "deletedAt" | "createdAt" | "updatedAt" | "clientId", ExtArgs["result"]["kPIAssignment"]>
  export type KPIAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | KPIAssignment$clientArgs<ExtArgs>
  }
  export type KPIAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | KPIAssignment$clientArgs<ExtArgs>
  }
  export type KPIAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kpi?: boolean | KPIDefaultArgs<ExtArgs>
    contract?: boolean | ContractDefaultArgs<ExtArgs>
    client?: boolean | KPIAssignment$clientArgs<ExtArgs>
  }

  export type $KPIAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KPIAssignment"
    objects: {
      kpi: Prisma.$KPIPayload<ExtArgs>
      contract: Prisma.$ContractPayload<ExtArgs>
      client: Prisma.$ClientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      kpiId: string
      contractId: string
      targetValue: string | null
      frequency: $Enums.Frequency
      status: $Enums.AssignmentStatus
      notes: string | null
      startDate: Date
      endDate: Date | null
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
      clientId: string | null
    }, ExtArgs["result"]["kPIAssignment"]>
    composites: {}
  }

  type KPIAssignmentGetPayload<S extends boolean | null | undefined | KPIAssignmentDefaultArgs> = $Result.GetResult<Prisma.$KPIAssignmentPayload, S>

  type KPIAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KPIAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KPIAssignmentCountAggregateInputType | true
    }

  export interface KPIAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KPIAssignment'], meta: { name: 'KPIAssignment' } }
    /**
     * Find zero or one KPIAssignment that matches the filter.
     * @param {KPIAssignmentFindUniqueArgs} args - Arguments to find a KPIAssignment
     * @example
     * // Get one KPIAssignment
     * const kPIAssignment = await prisma.kPIAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KPIAssignmentFindUniqueArgs>(args: SelectSubset<T, KPIAssignmentFindUniqueArgs<ExtArgs>>): Prisma__KPIAssignmentClient<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KPIAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KPIAssignmentFindUniqueOrThrowArgs} args - Arguments to find a KPIAssignment
     * @example
     * // Get one KPIAssignment
     * const kPIAssignment = await prisma.kPIAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KPIAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, KPIAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KPIAssignmentClient<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPIAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIAssignmentFindFirstArgs} args - Arguments to find a KPIAssignment
     * @example
     * // Get one KPIAssignment
     * const kPIAssignment = await prisma.kPIAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KPIAssignmentFindFirstArgs>(args?: SelectSubset<T, KPIAssignmentFindFirstArgs<ExtArgs>>): Prisma__KPIAssignmentClient<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KPIAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIAssignmentFindFirstOrThrowArgs} args - Arguments to find a KPIAssignment
     * @example
     * // Get one KPIAssignment
     * const kPIAssignment = await prisma.kPIAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KPIAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, KPIAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__KPIAssignmentClient<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KPIAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KPIAssignments
     * const kPIAssignments = await prisma.kPIAssignment.findMany()
     * 
     * // Get first 10 KPIAssignments
     * const kPIAssignments = await prisma.kPIAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kPIAssignmentWithIdOnly = await prisma.kPIAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KPIAssignmentFindManyArgs>(args?: SelectSubset<T, KPIAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KPIAssignment.
     * @param {KPIAssignmentCreateArgs} args - Arguments to create a KPIAssignment.
     * @example
     * // Create one KPIAssignment
     * const KPIAssignment = await prisma.kPIAssignment.create({
     *   data: {
     *     // ... data to create a KPIAssignment
     *   }
     * })
     * 
     */
    create<T extends KPIAssignmentCreateArgs>(args: SelectSubset<T, KPIAssignmentCreateArgs<ExtArgs>>): Prisma__KPIAssignmentClient<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KPIAssignments.
     * @param {KPIAssignmentCreateManyArgs} args - Arguments to create many KPIAssignments.
     * @example
     * // Create many KPIAssignments
     * const kPIAssignment = await prisma.kPIAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KPIAssignmentCreateManyArgs>(args?: SelectSubset<T, KPIAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KPIAssignments and returns the data saved in the database.
     * @param {KPIAssignmentCreateManyAndReturnArgs} args - Arguments to create many KPIAssignments.
     * @example
     * // Create many KPIAssignments
     * const kPIAssignment = await prisma.kPIAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KPIAssignments and only return the `id`
     * const kPIAssignmentWithIdOnly = await prisma.kPIAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KPIAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, KPIAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KPIAssignment.
     * @param {KPIAssignmentDeleteArgs} args - Arguments to delete one KPIAssignment.
     * @example
     * // Delete one KPIAssignment
     * const KPIAssignment = await prisma.kPIAssignment.delete({
     *   where: {
     *     // ... filter to delete one KPIAssignment
     *   }
     * })
     * 
     */
    delete<T extends KPIAssignmentDeleteArgs>(args: SelectSubset<T, KPIAssignmentDeleteArgs<ExtArgs>>): Prisma__KPIAssignmentClient<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KPIAssignment.
     * @param {KPIAssignmentUpdateArgs} args - Arguments to update one KPIAssignment.
     * @example
     * // Update one KPIAssignment
     * const kPIAssignment = await prisma.kPIAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KPIAssignmentUpdateArgs>(args: SelectSubset<T, KPIAssignmentUpdateArgs<ExtArgs>>): Prisma__KPIAssignmentClient<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KPIAssignments.
     * @param {KPIAssignmentDeleteManyArgs} args - Arguments to filter KPIAssignments to delete.
     * @example
     * // Delete a few KPIAssignments
     * const { count } = await prisma.kPIAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KPIAssignmentDeleteManyArgs>(args?: SelectSubset<T, KPIAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KPIAssignments
     * const kPIAssignment = await prisma.kPIAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KPIAssignmentUpdateManyArgs>(args: SelectSubset<T, KPIAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KPIAssignments and returns the data updated in the database.
     * @param {KPIAssignmentUpdateManyAndReturnArgs} args - Arguments to update many KPIAssignments.
     * @example
     * // Update many KPIAssignments
     * const kPIAssignment = await prisma.kPIAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KPIAssignments and only return the `id`
     * const kPIAssignmentWithIdOnly = await prisma.kPIAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KPIAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, KPIAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KPIAssignment.
     * @param {KPIAssignmentUpsertArgs} args - Arguments to update or create a KPIAssignment.
     * @example
     * // Update or create a KPIAssignment
     * const kPIAssignment = await prisma.kPIAssignment.upsert({
     *   create: {
     *     // ... data to create a KPIAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KPIAssignment we want to update
     *   }
     * })
     */
    upsert<T extends KPIAssignmentUpsertArgs>(args: SelectSubset<T, KPIAssignmentUpsertArgs<ExtArgs>>): Prisma__KPIAssignmentClient<$Result.GetResult<Prisma.$KPIAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KPIAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIAssignmentCountArgs} args - Arguments to filter KPIAssignments to count.
     * @example
     * // Count the number of KPIAssignments
     * const count = await prisma.kPIAssignment.count({
     *   where: {
     *     // ... the filter for the KPIAssignments we want to count
     *   }
     * })
    **/
    count<T extends KPIAssignmentCountArgs>(
      args?: Subset<T, KPIAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KPIAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KPIAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KPIAssignmentAggregateArgs>(args: Subset<T, KPIAssignmentAggregateArgs>): Prisma.PrismaPromise<GetKPIAssignmentAggregateType<T>>

    /**
     * Group by KPIAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KPIAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KPIAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KPIAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: KPIAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KPIAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKPIAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KPIAssignment model
   */
  readonly fields: KPIAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KPIAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KPIAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kpi<T extends KPIDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KPIDefaultArgs<ExtArgs>>): Prisma__KPIClient<$Result.GetResult<Prisma.$KPIPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    contract<T extends ContractDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ContractDefaultArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends KPIAssignment$clientArgs<ExtArgs> = {}>(args?: Subset<T, KPIAssignment$clientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KPIAssignment model
   */
  interface KPIAssignmentFieldRefs {
    readonly id: FieldRef<"KPIAssignment", 'String'>
    readonly kpiId: FieldRef<"KPIAssignment", 'String'>
    readonly contractId: FieldRef<"KPIAssignment", 'String'>
    readonly targetValue: FieldRef<"KPIAssignment", 'String'>
    readonly frequency: FieldRef<"KPIAssignment", 'Frequency'>
    readonly status: FieldRef<"KPIAssignment", 'AssignmentStatus'>
    readonly notes: FieldRef<"KPIAssignment", 'String'>
    readonly startDate: FieldRef<"KPIAssignment", 'DateTime'>
    readonly endDate: FieldRef<"KPIAssignment", 'DateTime'>
    readonly metadata: FieldRef<"KPIAssignment", 'Json'>
    readonly deletedAt: FieldRef<"KPIAssignment", 'DateTime'>
    readonly createdAt: FieldRef<"KPIAssignment", 'DateTime'>
    readonly updatedAt: FieldRef<"KPIAssignment", 'DateTime'>
    readonly clientId: FieldRef<"KPIAssignment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * KPIAssignment findUnique
   */
  export type KPIAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which KPIAssignment to fetch.
     */
    where: KPIAssignmentWhereUniqueInput
  }

  /**
   * KPIAssignment findUniqueOrThrow
   */
  export type KPIAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which KPIAssignment to fetch.
     */
    where: KPIAssignmentWhereUniqueInput
  }

  /**
   * KPIAssignment findFirst
   */
  export type KPIAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which KPIAssignment to fetch.
     */
    where?: KPIAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIAssignments to fetch.
     */
    orderBy?: KPIAssignmentOrderByWithRelationInput | KPIAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIAssignments.
     */
    cursor?: KPIAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIAssignments.
     */
    distinct?: KPIAssignmentScalarFieldEnum | KPIAssignmentScalarFieldEnum[]
  }

  /**
   * KPIAssignment findFirstOrThrow
   */
  export type KPIAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which KPIAssignment to fetch.
     */
    where?: KPIAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIAssignments to fetch.
     */
    orderBy?: KPIAssignmentOrderByWithRelationInput | KPIAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KPIAssignments.
     */
    cursor?: KPIAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KPIAssignments.
     */
    distinct?: KPIAssignmentScalarFieldEnum | KPIAssignmentScalarFieldEnum[]
  }

  /**
   * KPIAssignment findMany
   */
  export type KPIAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which KPIAssignments to fetch.
     */
    where?: KPIAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KPIAssignments to fetch.
     */
    orderBy?: KPIAssignmentOrderByWithRelationInput | KPIAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KPIAssignments.
     */
    cursor?: KPIAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KPIAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KPIAssignments.
     */
    skip?: number
    distinct?: KPIAssignmentScalarFieldEnum | KPIAssignmentScalarFieldEnum[]
  }

  /**
   * KPIAssignment create
   */
  export type KPIAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a KPIAssignment.
     */
    data: XOR<KPIAssignmentCreateInput, KPIAssignmentUncheckedCreateInput>
  }

  /**
   * KPIAssignment createMany
   */
  export type KPIAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KPIAssignments.
     */
    data: KPIAssignmentCreateManyInput | KPIAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KPIAssignment createManyAndReturn
   */
  export type KPIAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many KPIAssignments.
     */
    data: KPIAssignmentCreateManyInput | KPIAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KPIAssignment update
   */
  export type KPIAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a KPIAssignment.
     */
    data: XOR<KPIAssignmentUpdateInput, KPIAssignmentUncheckedUpdateInput>
    /**
     * Choose, which KPIAssignment to update.
     */
    where: KPIAssignmentWhereUniqueInput
  }

  /**
   * KPIAssignment updateMany
   */
  export type KPIAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KPIAssignments.
     */
    data: XOR<KPIAssignmentUpdateManyMutationInput, KPIAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which KPIAssignments to update
     */
    where?: KPIAssignmentWhereInput
    /**
     * Limit how many KPIAssignments to update.
     */
    limit?: number
  }

  /**
   * KPIAssignment updateManyAndReturn
   */
  export type KPIAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update KPIAssignments.
     */
    data: XOR<KPIAssignmentUpdateManyMutationInput, KPIAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which KPIAssignments to update
     */
    where?: KPIAssignmentWhereInput
    /**
     * Limit how many KPIAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KPIAssignment upsert
   */
  export type KPIAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the KPIAssignment to update in case it exists.
     */
    where: KPIAssignmentWhereUniqueInput
    /**
     * In case the KPIAssignment found by the `where` argument doesn't exist, create a new KPIAssignment with this data.
     */
    create: XOR<KPIAssignmentCreateInput, KPIAssignmentUncheckedCreateInput>
    /**
     * In case the KPIAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KPIAssignmentUpdateInput, KPIAssignmentUncheckedUpdateInput>
  }

  /**
   * KPIAssignment delete
   */
  export type KPIAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
    /**
     * Filter which KPIAssignment to delete.
     */
    where: KPIAssignmentWhereUniqueInput
  }

  /**
   * KPIAssignment deleteMany
   */
  export type KPIAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KPIAssignments to delete
     */
    where?: KPIAssignmentWhereInput
    /**
     * Limit how many KPIAssignments to delete.
     */
    limit?: number
  }

  /**
   * KPIAssignment.client
   */
  export type KPIAssignment$clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * KPIAssignment without action
   */
  export type KPIAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KPIAssignment
     */
    select?: KPIAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KPIAssignment
     */
    omit?: KPIAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KPIAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentAvgAggregateOutputType = {
    fileSize: number | null
    version: number | null
  }

  export type DocumentSumAggregateOutputType = {
    fileSize: number | null
    version: number | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.DocumentType | null
    url: string | null
    fileSize: number | null
    fileType: string | null
    version: number | null
    isLatest: boolean | null
    previousVersionId: string | null
    status: $Enums.DocumentStatus | null
    expiryDate: Date | null
    isConfidential: boolean | null
    deletedAt: Date | null
    uploadedById: string | null
    clientId: string | null
    contractId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    type: $Enums.DocumentType | null
    url: string | null
    fileSize: number | null
    fileType: string | null
    version: number | null
    isLatest: boolean | null
    previousVersionId: string | null
    status: $Enums.DocumentStatus | null
    expiryDate: Date | null
    isConfidential: boolean | null
    deletedAt: Date | null
    uploadedById: string | null
    clientId: string | null
    contractId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    title: number
    description: number
    type: number
    url: number
    fileSize: number
    fileType: number
    version: number
    isLatest: number
    previousVersionId: number
    status: number
    expiryDate: number
    isConfidential: number
    tags: number
    metadata: number
    deletedAt: number
    uploadedById: number
    clientId: number
    contractId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DocumentAvgAggregateInputType = {
    fileSize?: true
    version?: true
  }

  export type DocumentSumAggregateInputType = {
    fileSize?: true
    version?: true
  }

  export type DocumentMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    url?: true
    fileSize?: true
    fileType?: true
    version?: true
    isLatest?: true
    previousVersionId?: true
    status?: true
    expiryDate?: true
    isConfidential?: true
    deletedAt?: true
    uploadedById?: true
    clientId?: true
    contractId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    url?: true
    fileSize?: true
    fileType?: true
    version?: true
    isLatest?: true
    previousVersionId?: true
    status?: true
    expiryDate?: true
    isConfidential?: true
    deletedAt?: true
    uploadedById?: true
    clientId?: true
    contractId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    type?: true
    url?: true
    fileSize?: true
    fileType?: true
    version?: true
    isLatest?: true
    previousVersionId?: true
    status?: true
    expiryDate?: true
    isConfidential?: true
    tags?: true
    metadata?: true
    deletedAt?: true
    uploadedById?: true
    clientId?: true
    contractId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _avg?: DocumentAvgAggregateInputType
    _sum?: DocumentSumAggregateInputType
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    title: string
    description: string | null
    type: $Enums.DocumentType
    url: string
    fileSize: number | null
    fileType: string | null
    version: number
    isLatest: boolean
    previousVersionId: string | null
    status: $Enums.DocumentStatus
    expiryDate: Date | null
    isConfidential: boolean
    tags: string[]
    metadata: JsonValue | null
    deletedAt: Date | null
    uploadedById: string | null
    clientId: string | null
    contractId: string | null
    createdAt: Date
    updatedAt: Date
    _count: DocumentCountAggregateOutputType | null
    _avg: DocumentAvgAggregateOutputType | null
    _sum: DocumentSumAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    url?: boolean
    fileSize?: boolean
    fileType?: boolean
    version?: boolean
    isLatest?: boolean
    previousVersionId?: boolean
    status?: boolean
    expiryDate?: boolean
    isConfidential?: boolean
    tags?: boolean
    metadata?: boolean
    deletedAt?: boolean
    uploadedById?: boolean
    clientId?: boolean
    contractId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    previousVersion?: boolean | Document$previousVersionArgs<ExtArgs>
    nextVersions?: boolean | Document$nextVersionsArgs<ExtArgs>
    uploadedBy?: boolean | Document$uploadedByArgs<ExtArgs>
    client?: boolean | Document$clientArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    url?: boolean
    fileSize?: boolean
    fileType?: boolean
    version?: boolean
    isLatest?: boolean
    previousVersionId?: boolean
    status?: boolean
    expiryDate?: boolean
    isConfidential?: boolean
    tags?: boolean
    metadata?: boolean
    deletedAt?: boolean
    uploadedById?: boolean
    clientId?: boolean
    contractId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    previousVersion?: boolean | Document$previousVersionArgs<ExtArgs>
    uploadedBy?: boolean | Document$uploadedByArgs<ExtArgs>
    client?: boolean | Document$clientArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    url?: boolean
    fileSize?: boolean
    fileType?: boolean
    version?: boolean
    isLatest?: boolean
    previousVersionId?: boolean
    status?: boolean
    expiryDate?: boolean
    isConfidential?: boolean
    tags?: boolean
    metadata?: boolean
    deletedAt?: boolean
    uploadedById?: boolean
    clientId?: boolean
    contractId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    previousVersion?: boolean | Document$previousVersionArgs<ExtArgs>
    uploadedBy?: boolean | Document$uploadedByArgs<ExtArgs>
    client?: boolean | Document$clientArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    url?: boolean
    fileSize?: boolean
    fileType?: boolean
    version?: boolean
    isLatest?: boolean
    previousVersionId?: boolean
    status?: boolean
    expiryDate?: boolean
    isConfidential?: boolean
    tags?: boolean
    metadata?: boolean
    deletedAt?: boolean
    uploadedById?: boolean
    clientId?: boolean
    contractId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "type" | "url" | "fileSize" | "fileType" | "version" | "isLatest" | "previousVersionId" | "status" | "expiryDate" | "isConfidential" | "tags" | "metadata" | "deletedAt" | "uploadedById" | "clientId" | "contractId" | "createdAt" | "updatedAt", ExtArgs["result"]["document"]>
  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    previousVersion?: boolean | Document$previousVersionArgs<ExtArgs>
    nextVersions?: boolean | Document$nextVersionsArgs<ExtArgs>
    uploadedBy?: boolean | Document$uploadedByArgs<ExtArgs>
    client?: boolean | Document$clientArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
    _count?: boolean | DocumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    previousVersion?: boolean | Document$previousVersionArgs<ExtArgs>
    uploadedBy?: boolean | Document$uploadedByArgs<ExtArgs>
    client?: boolean | Document$clientArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
  }
  export type DocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    previousVersion?: boolean | Document$previousVersionArgs<ExtArgs>
    uploadedBy?: boolean | Document$uploadedByArgs<ExtArgs>
    client?: boolean | Document$clientArgs<ExtArgs>
    contract?: boolean | Document$contractArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      previousVersion: Prisma.$DocumentPayload<ExtArgs> | null
      nextVersions: Prisma.$DocumentPayload<ExtArgs>[]
      uploadedBy: Prisma.$UserPayload<ExtArgs> | null
      client: Prisma.$ClientPayload<ExtArgs> | null
      contract: Prisma.$ContractPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      type: $Enums.DocumentType
      url: string
      fileSize: number | null
      fileType: string | null
      version: number
      isLatest: boolean
      previousVersionId: string | null
      status: $Enums.DocumentStatus
      expiryDate: Date | null
      isConfidential: boolean
      tags: string[]
      metadata: Prisma.JsonValue | null
      deletedAt: Date | null
      uploadedById: string | null
      clientId: string | null
      contractId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents and returns the data updated in the database.
     * @param {DocumentUpdateManyAndReturnArgs} args - Arguments to update many Documents.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    previousVersion<T extends Document$previousVersionArgs<ExtArgs> = {}>(args?: Subset<T, Document$previousVersionArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    nextVersions<T extends Document$nextVersionsArgs<ExtArgs> = {}>(args?: Subset<T, Document$nextVersionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    uploadedBy<T extends Document$uploadedByArgs<ExtArgs> = {}>(args?: Subset<T, Document$uploadedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    client<T extends Document$clientArgs<ExtArgs> = {}>(args?: Subset<T, Document$clientArgs<ExtArgs>>): Prisma__ClientClient<$Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    contract<T extends Document$contractArgs<ExtArgs> = {}>(args?: Subset<T, Document$contractArgs<ExtArgs>>): Prisma__ContractClient<$Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly title: FieldRef<"Document", 'String'>
    readonly description: FieldRef<"Document", 'String'>
    readonly type: FieldRef<"Document", 'DocumentType'>
    readonly url: FieldRef<"Document", 'String'>
    readonly fileSize: FieldRef<"Document", 'Int'>
    readonly fileType: FieldRef<"Document", 'String'>
    readonly version: FieldRef<"Document", 'Int'>
    readonly isLatest: FieldRef<"Document", 'Boolean'>
    readonly previousVersionId: FieldRef<"Document", 'String'>
    readonly status: FieldRef<"Document", 'DocumentStatus'>
    readonly expiryDate: FieldRef<"Document", 'DateTime'>
    readonly isConfidential: FieldRef<"Document", 'Boolean'>
    readonly tags: FieldRef<"Document", 'String[]'>
    readonly metadata: FieldRef<"Document", 'Json'>
    readonly deletedAt: FieldRef<"Document", 'DateTime'>
    readonly uploadedById: FieldRef<"Document", 'String'>
    readonly clientId: FieldRef<"Document", 'String'>
    readonly contractId: FieldRef<"Document", 'String'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
  }

  /**
   * Document updateManyAndReturn
   */
  export type DocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
    /**
     * Limit how many Documents to delete.
     */
    limit?: number
  }

  /**
   * Document.previousVersion
   */
  export type Document$previousVersionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
  }

  /**
   * Document.nextVersions
   */
  export type Document$nextVersionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document.uploadedBy
   */
  export type Document$uploadedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Document.client
   */
  export type Document$clientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Client
     */
    select?: ClientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Client
     */
    omit?: ClientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientInclude<ExtArgs> | null
    where?: ClientWhereInput
  }

  /**
   * Document.contract
   */
  export type Document$contractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contract
     */
    select?: ContractSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contract
     */
    omit?: ContractOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContractInclude<ExtArgs> | null
    where?: ContractWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Document
     */
    omit?: DocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: $Enums.ActionType | null
    entityType: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
    userId: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: $Enums.ActionType | null
    entityType: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
    userId: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    entityType: number
    entityId: number
    data: number
    ipAddress: number
    userAgent: number
    timestamp: number
    userId: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    userId?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    userId?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    data?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    userId?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    action: $Enums.ActionType
    entityType: string | null
    entityId: string | null
    data: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date
    userId: string | null
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    userId?: boolean
    User?: boolean | AuditLog$UserArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    userId?: boolean
    User?: boolean | AuditLog$UserArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    userId?: boolean
    User?: boolean | AuditLog$UserArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    userId?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "entityType" | "entityId" | "data" | "ipAddress" | "userAgent" | "timestamp" | "userId", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | AuditLog$UserArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | AuditLog$UserArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | AuditLog$UserArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: $Enums.ActionType
      entityType: string | null
      entityId: string | null
      data: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      timestamp: Date
      userId: string | null
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends AuditLog$UserArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'ActionType'>
    readonly entityType: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly data: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
    readonly userId: FieldRef<"AuditLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.User
   */
  export type AuditLog$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model EntityChange
   */

  export type AggregateEntityChange = {
    _count: EntityChangeCountAggregateOutputType | null
    _min: EntityChangeMinAggregateOutputType | null
    _max: EntityChangeMaxAggregateOutputType | null
  }

  export type EntityChangeMinAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    changeType: $Enums.ChangeType | null
    changedAt: Date | null
    changedBy: string | null
    changeReason: string | null
    isActive: boolean | null
    deletedAt: Date | null
  }

  export type EntityChangeMaxAggregateOutputType = {
    id: string | null
    entityType: string | null
    entityId: string | null
    changeType: $Enums.ChangeType | null
    changedAt: Date | null
    changedBy: string | null
    changeReason: string | null
    isActive: boolean | null
    deletedAt: Date | null
  }

  export type EntityChangeCountAggregateOutputType = {
    id: number
    entityType: number
    entityId: number
    changeType: number
    changedAt: number
    changedBy: number
    changeReason: number
    oldData: number
    newData: number
    metadata: number
    isActive: number
    deletedAt: number
    _all: number
  }


  export type EntityChangeMinAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    changeType?: true
    changedAt?: true
    changedBy?: true
    changeReason?: true
    isActive?: true
    deletedAt?: true
  }

  export type EntityChangeMaxAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    changeType?: true
    changedAt?: true
    changedBy?: true
    changeReason?: true
    isActive?: true
    deletedAt?: true
  }

  export type EntityChangeCountAggregateInputType = {
    id?: true
    entityType?: true
    entityId?: true
    changeType?: true
    changedAt?: true
    changedBy?: true
    changeReason?: true
    oldData?: true
    newData?: true
    metadata?: true
    isActive?: true
    deletedAt?: true
    _all?: true
  }

  export type EntityChangeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EntityChange to aggregate.
     */
    where?: EntityChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EntityChanges to fetch.
     */
    orderBy?: EntityChangeOrderByWithRelationInput | EntityChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntityChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EntityChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EntityChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EntityChanges
    **/
    _count?: true | EntityChangeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntityChangeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntityChangeMaxAggregateInputType
  }

  export type GetEntityChangeAggregateType<T extends EntityChangeAggregateArgs> = {
        [P in keyof T & keyof AggregateEntityChange]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntityChange[P]>
      : GetScalarType<T[P], AggregateEntityChange[P]>
  }




  export type EntityChangeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityChangeWhereInput
    orderBy?: EntityChangeOrderByWithAggregationInput | EntityChangeOrderByWithAggregationInput[]
    by: EntityChangeScalarFieldEnum[] | EntityChangeScalarFieldEnum
    having?: EntityChangeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntityChangeCountAggregateInputType | true
    _min?: EntityChangeMinAggregateInputType
    _max?: EntityChangeMaxAggregateInputType
  }

  export type EntityChangeGroupByOutputType = {
    id: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    changedAt: Date
    changedBy: string | null
    changeReason: string | null
    oldData: JsonValue | null
    newData: JsonValue | null
    metadata: JsonValue | null
    isActive: boolean
    deletedAt: Date | null
    _count: EntityChangeCountAggregateOutputType | null
    _min: EntityChangeMinAggregateOutputType | null
    _max: EntityChangeMaxAggregateOutputType | null
  }

  type GetEntityChangeGroupByPayload<T extends EntityChangeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntityChangeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntityChangeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntityChangeGroupByOutputType[P]>
            : GetScalarType<T[P], EntityChangeGroupByOutputType[P]>
        }
      >
    >


  export type EntityChangeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changeType?: boolean
    changedAt?: boolean
    changedBy?: boolean
    changeReason?: boolean
    oldData?: boolean
    newData?: boolean
    metadata?: boolean
    isActive?: boolean
    deletedAt?: boolean
    fieldChanges?: boolean | EntityChange$fieldChangesArgs<ExtArgs>
    _count?: boolean | EntityChangeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["entityChange"]>

  export type EntityChangeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changeType?: boolean
    changedAt?: boolean
    changedBy?: boolean
    changeReason?: boolean
    oldData?: boolean
    newData?: boolean
    metadata?: boolean
    isActive?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["entityChange"]>

  export type EntityChangeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changeType?: boolean
    changedAt?: boolean
    changedBy?: boolean
    changeReason?: boolean
    oldData?: boolean
    newData?: boolean
    metadata?: boolean
    isActive?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["entityChange"]>

  export type EntityChangeSelectScalar = {
    id?: boolean
    entityType?: boolean
    entityId?: boolean
    changeType?: boolean
    changedAt?: boolean
    changedBy?: boolean
    changeReason?: boolean
    oldData?: boolean
    newData?: boolean
    metadata?: boolean
    isActive?: boolean
    deletedAt?: boolean
  }

  export type EntityChangeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entityType" | "entityId" | "changeType" | "changedAt" | "changedBy" | "changeReason" | "oldData" | "newData" | "metadata" | "isActive" | "deletedAt", ExtArgs["result"]["entityChange"]>
  export type EntityChangeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fieldChanges?: boolean | EntityChange$fieldChangesArgs<ExtArgs>
    _count?: boolean | EntityChangeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EntityChangeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EntityChangeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EntityChangePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EntityChange"
    objects: {
      fieldChanges: Prisma.$FieldChangePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityType: string
      entityId: string
      changeType: $Enums.ChangeType
      changedAt: Date
      changedBy: string | null
      changeReason: string | null
      oldData: Prisma.JsonValue | null
      newData: Prisma.JsonValue | null
      metadata: Prisma.JsonValue | null
      isActive: boolean
      deletedAt: Date | null
    }, ExtArgs["result"]["entityChange"]>
    composites: {}
  }

  type EntityChangeGetPayload<S extends boolean | null | undefined | EntityChangeDefaultArgs> = $Result.GetResult<Prisma.$EntityChangePayload, S>

  type EntityChangeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EntityChangeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EntityChangeCountAggregateInputType | true
    }

  export interface EntityChangeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EntityChange'], meta: { name: 'EntityChange' } }
    /**
     * Find zero or one EntityChange that matches the filter.
     * @param {EntityChangeFindUniqueArgs} args - Arguments to find a EntityChange
     * @example
     * // Get one EntityChange
     * const entityChange = await prisma.entityChange.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EntityChangeFindUniqueArgs>(args: SelectSubset<T, EntityChangeFindUniqueArgs<ExtArgs>>): Prisma__EntityChangeClient<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EntityChange that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EntityChangeFindUniqueOrThrowArgs} args - Arguments to find a EntityChange
     * @example
     * // Get one EntityChange
     * const entityChange = await prisma.entityChange.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EntityChangeFindUniqueOrThrowArgs>(args: SelectSubset<T, EntityChangeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EntityChangeClient<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EntityChange that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityChangeFindFirstArgs} args - Arguments to find a EntityChange
     * @example
     * // Get one EntityChange
     * const entityChange = await prisma.entityChange.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EntityChangeFindFirstArgs>(args?: SelectSubset<T, EntityChangeFindFirstArgs<ExtArgs>>): Prisma__EntityChangeClient<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EntityChange that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityChangeFindFirstOrThrowArgs} args - Arguments to find a EntityChange
     * @example
     * // Get one EntityChange
     * const entityChange = await prisma.entityChange.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EntityChangeFindFirstOrThrowArgs>(args?: SelectSubset<T, EntityChangeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EntityChangeClient<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EntityChanges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityChangeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EntityChanges
     * const entityChanges = await prisma.entityChange.findMany()
     * 
     * // Get first 10 EntityChanges
     * const entityChanges = await prisma.entityChange.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entityChangeWithIdOnly = await prisma.entityChange.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EntityChangeFindManyArgs>(args?: SelectSubset<T, EntityChangeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EntityChange.
     * @param {EntityChangeCreateArgs} args - Arguments to create a EntityChange.
     * @example
     * // Create one EntityChange
     * const EntityChange = await prisma.entityChange.create({
     *   data: {
     *     // ... data to create a EntityChange
     *   }
     * })
     * 
     */
    create<T extends EntityChangeCreateArgs>(args: SelectSubset<T, EntityChangeCreateArgs<ExtArgs>>): Prisma__EntityChangeClient<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EntityChanges.
     * @param {EntityChangeCreateManyArgs} args - Arguments to create many EntityChanges.
     * @example
     * // Create many EntityChanges
     * const entityChange = await prisma.entityChange.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EntityChangeCreateManyArgs>(args?: SelectSubset<T, EntityChangeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EntityChanges and returns the data saved in the database.
     * @param {EntityChangeCreateManyAndReturnArgs} args - Arguments to create many EntityChanges.
     * @example
     * // Create many EntityChanges
     * const entityChange = await prisma.entityChange.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EntityChanges and only return the `id`
     * const entityChangeWithIdOnly = await prisma.entityChange.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EntityChangeCreateManyAndReturnArgs>(args?: SelectSubset<T, EntityChangeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EntityChange.
     * @param {EntityChangeDeleteArgs} args - Arguments to delete one EntityChange.
     * @example
     * // Delete one EntityChange
     * const EntityChange = await prisma.entityChange.delete({
     *   where: {
     *     // ... filter to delete one EntityChange
     *   }
     * })
     * 
     */
    delete<T extends EntityChangeDeleteArgs>(args: SelectSubset<T, EntityChangeDeleteArgs<ExtArgs>>): Prisma__EntityChangeClient<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EntityChange.
     * @param {EntityChangeUpdateArgs} args - Arguments to update one EntityChange.
     * @example
     * // Update one EntityChange
     * const entityChange = await prisma.entityChange.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EntityChangeUpdateArgs>(args: SelectSubset<T, EntityChangeUpdateArgs<ExtArgs>>): Prisma__EntityChangeClient<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EntityChanges.
     * @param {EntityChangeDeleteManyArgs} args - Arguments to filter EntityChanges to delete.
     * @example
     * // Delete a few EntityChanges
     * const { count } = await prisma.entityChange.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EntityChangeDeleteManyArgs>(args?: SelectSubset<T, EntityChangeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EntityChanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityChangeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EntityChanges
     * const entityChange = await prisma.entityChange.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EntityChangeUpdateManyArgs>(args: SelectSubset<T, EntityChangeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EntityChanges and returns the data updated in the database.
     * @param {EntityChangeUpdateManyAndReturnArgs} args - Arguments to update many EntityChanges.
     * @example
     * // Update many EntityChanges
     * const entityChange = await prisma.entityChange.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EntityChanges and only return the `id`
     * const entityChangeWithIdOnly = await prisma.entityChange.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EntityChangeUpdateManyAndReturnArgs>(args: SelectSubset<T, EntityChangeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EntityChange.
     * @param {EntityChangeUpsertArgs} args - Arguments to update or create a EntityChange.
     * @example
     * // Update or create a EntityChange
     * const entityChange = await prisma.entityChange.upsert({
     *   create: {
     *     // ... data to create a EntityChange
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EntityChange we want to update
     *   }
     * })
     */
    upsert<T extends EntityChangeUpsertArgs>(args: SelectSubset<T, EntityChangeUpsertArgs<ExtArgs>>): Prisma__EntityChangeClient<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EntityChanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityChangeCountArgs} args - Arguments to filter EntityChanges to count.
     * @example
     * // Count the number of EntityChanges
     * const count = await prisma.entityChange.count({
     *   where: {
     *     // ... the filter for the EntityChanges we want to count
     *   }
     * })
    **/
    count<T extends EntityChangeCountArgs>(
      args?: Subset<T, EntityChangeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntityChangeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EntityChange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityChangeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntityChangeAggregateArgs>(args: Subset<T, EntityChangeAggregateArgs>): Prisma.PrismaPromise<GetEntityChangeAggregateType<T>>

    /**
     * Group by EntityChange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityChangeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntityChangeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntityChangeGroupByArgs['orderBy'] }
        : { orderBy?: EntityChangeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntityChangeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntityChangeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EntityChange model
   */
  readonly fields: EntityChangeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EntityChange.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EntityChangeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fieldChanges<T extends EntityChange$fieldChangesArgs<ExtArgs> = {}>(args?: Subset<T, EntityChange$fieldChangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EntityChange model
   */
  interface EntityChangeFieldRefs {
    readonly id: FieldRef<"EntityChange", 'String'>
    readonly entityType: FieldRef<"EntityChange", 'String'>
    readonly entityId: FieldRef<"EntityChange", 'String'>
    readonly changeType: FieldRef<"EntityChange", 'ChangeType'>
    readonly changedAt: FieldRef<"EntityChange", 'DateTime'>
    readonly changedBy: FieldRef<"EntityChange", 'String'>
    readonly changeReason: FieldRef<"EntityChange", 'String'>
    readonly oldData: FieldRef<"EntityChange", 'Json'>
    readonly newData: FieldRef<"EntityChange", 'Json'>
    readonly metadata: FieldRef<"EntityChange", 'Json'>
    readonly isActive: FieldRef<"EntityChange", 'Boolean'>
    readonly deletedAt: FieldRef<"EntityChange", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EntityChange findUnique
   */
  export type EntityChangeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
    /**
     * Filter, which EntityChange to fetch.
     */
    where: EntityChangeWhereUniqueInput
  }

  /**
   * EntityChange findUniqueOrThrow
   */
  export type EntityChangeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
    /**
     * Filter, which EntityChange to fetch.
     */
    where: EntityChangeWhereUniqueInput
  }

  /**
   * EntityChange findFirst
   */
  export type EntityChangeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
    /**
     * Filter, which EntityChange to fetch.
     */
    where?: EntityChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EntityChanges to fetch.
     */
    orderBy?: EntityChangeOrderByWithRelationInput | EntityChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EntityChanges.
     */
    cursor?: EntityChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EntityChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EntityChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EntityChanges.
     */
    distinct?: EntityChangeScalarFieldEnum | EntityChangeScalarFieldEnum[]
  }

  /**
   * EntityChange findFirstOrThrow
   */
  export type EntityChangeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
    /**
     * Filter, which EntityChange to fetch.
     */
    where?: EntityChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EntityChanges to fetch.
     */
    orderBy?: EntityChangeOrderByWithRelationInput | EntityChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EntityChanges.
     */
    cursor?: EntityChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EntityChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EntityChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EntityChanges.
     */
    distinct?: EntityChangeScalarFieldEnum | EntityChangeScalarFieldEnum[]
  }

  /**
   * EntityChange findMany
   */
  export type EntityChangeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
    /**
     * Filter, which EntityChanges to fetch.
     */
    where?: EntityChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EntityChanges to fetch.
     */
    orderBy?: EntityChangeOrderByWithRelationInput | EntityChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EntityChanges.
     */
    cursor?: EntityChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EntityChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EntityChanges.
     */
    skip?: number
    distinct?: EntityChangeScalarFieldEnum | EntityChangeScalarFieldEnum[]
  }

  /**
   * EntityChange create
   */
  export type EntityChangeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
    /**
     * The data needed to create a EntityChange.
     */
    data: XOR<EntityChangeCreateInput, EntityChangeUncheckedCreateInput>
  }

  /**
   * EntityChange createMany
   */
  export type EntityChangeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EntityChanges.
     */
    data: EntityChangeCreateManyInput | EntityChangeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EntityChange createManyAndReturn
   */
  export type EntityChangeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * The data used to create many EntityChanges.
     */
    data: EntityChangeCreateManyInput | EntityChangeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EntityChange update
   */
  export type EntityChangeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
    /**
     * The data needed to update a EntityChange.
     */
    data: XOR<EntityChangeUpdateInput, EntityChangeUncheckedUpdateInput>
    /**
     * Choose, which EntityChange to update.
     */
    where: EntityChangeWhereUniqueInput
  }

  /**
   * EntityChange updateMany
   */
  export type EntityChangeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EntityChanges.
     */
    data: XOR<EntityChangeUpdateManyMutationInput, EntityChangeUncheckedUpdateManyInput>
    /**
     * Filter which EntityChanges to update
     */
    where?: EntityChangeWhereInput
    /**
     * Limit how many EntityChanges to update.
     */
    limit?: number
  }

  /**
   * EntityChange updateManyAndReturn
   */
  export type EntityChangeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * The data used to update EntityChanges.
     */
    data: XOR<EntityChangeUpdateManyMutationInput, EntityChangeUncheckedUpdateManyInput>
    /**
     * Filter which EntityChanges to update
     */
    where?: EntityChangeWhereInput
    /**
     * Limit how many EntityChanges to update.
     */
    limit?: number
  }

  /**
   * EntityChange upsert
   */
  export type EntityChangeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
    /**
     * The filter to search for the EntityChange to update in case it exists.
     */
    where: EntityChangeWhereUniqueInput
    /**
     * In case the EntityChange found by the `where` argument doesn't exist, create a new EntityChange with this data.
     */
    create: XOR<EntityChangeCreateInput, EntityChangeUncheckedCreateInput>
    /**
     * In case the EntityChange was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntityChangeUpdateInput, EntityChangeUncheckedUpdateInput>
  }

  /**
   * EntityChange delete
   */
  export type EntityChangeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
    /**
     * Filter which EntityChange to delete.
     */
    where: EntityChangeWhereUniqueInput
  }

  /**
   * EntityChange deleteMany
   */
  export type EntityChangeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EntityChanges to delete
     */
    where?: EntityChangeWhereInput
    /**
     * Limit how many EntityChanges to delete.
     */
    limit?: number
  }

  /**
   * EntityChange.fieldChanges
   */
  export type EntityChange$fieldChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    where?: FieldChangeWhereInput
    orderBy?: FieldChangeOrderByWithRelationInput | FieldChangeOrderByWithRelationInput[]
    cursor?: FieldChangeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FieldChangeScalarFieldEnum | FieldChangeScalarFieldEnum[]
  }

  /**
   * EntityChange without action
   */
  export type EntityChangeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityChange
     */
    select?: EntityChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EntityChange
     */
    omit?: EntityChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityChangeInclude<ExtArgs> | null
  }


  /**
   * Model FieldChange
   */

  export type AggregateFieldChange = {
    _count: FieldChangeCountAggregateOutputType | null
    _min: FieldChangeMinAggregateOutputType | null
    _max: FieldChangeMaxAggregateOutputType | null
  }

  export type FieldChangeMinAggregateOutputType = {
    id: string | null
    entityChangeId: string | null
    fieldName: string | null
    changeType: $Enums.ChangeType | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FieldChangeMaxAggregateOutputType = {
    id: string | null
    entityChangeId: string | null
    fieldName: string | null
    changeType: $Enums.ChangeType | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FieldChangeCountAggregateOutputType = {
    id: number
    entityChangeId: number
    fieldName: number
    oldValue: number
    newValue: number
    changeType: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FieldChangeMinAggregateInputType = {
    id?: true
    entityChangeId?: true
    fieldName?: true
    changeType?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FieldChangeMaxAggregateInputType = {
    id?: true
    entityChangeId?: true
    fieldName?: true
    changeType?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FieldChangeCountAggregateInputType = {
    id?: true
    entityChangeId?: true
    fieldName?: true
    oldValue?: true
    newValue?: true
    changeType?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FieldChangeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FieldChange to aggregate.
     */
    where?: FieldChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldChanges to fetch.
     */
    orderBy?: FieldChangeOrderByWithRelationInput | FieldChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FieldChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FieldChanges
    **/
    _count?: true | FieldChangeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FieldChangeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FieldChangeMaxAggregateInputType
  }

  export type GetFieldChangeAggregateType<T extends FieldChangeAggregateArgs> = {
        [P in keyof T & keyof AggregateFieldChange]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFieldChange[P]>
      : GetScalarType<T[P], AggregateFieldChange[P]>
  }




  export type FieldChangeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldChangeWhereInput
    orderBy?: FieldChangeOrderByWithAggregationInput | FieldChangeOrderByWithAggregationInput[]
    by: FieldChangeScalarFieldEnum[] | FieldChangeScalarFieldEnum
    having?: FieldChangeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FieldChangeCountAggregateInputType | true
    _min?: FieldChangeMinAggregateInputType
    _max?: FieldChangeMaxAggregateInputType
  }

  export type FieldChangeGroupByOutputType = {
    id: string
    entityChangeId: string
    fieldName: string
    oldValue: JsonValue | null
    newValue: JsonValue | null
    changeType: $Enums.ChangeType
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: FieldChangeCountAggregateOutputType | null
    _min: FieldChangeMinAggregateOutputType | null
    _max: FieldChangeMaxAggregateOutputType | null
  }

  type GetFieldChangeGroupByPayload<T extends FieldChangeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FieldChangeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FieldChangeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FieldChangeGroupByOutputType[P]>
            : GetScalarType<T[P], FieldChangeGroupByOutputType[P]>
        }
      >
    >


  export type FieldChangeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityChangeId?: boolean
    fieldName?: boolean
    oldValue?: boolean
    newValue?: boolean
    changeType?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityChange?: boolean | EntityChangeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fieldChange"]>

  export type FieldChangeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityChangeId?: boolean
    fieldName?: boolean
    oldValue?: boolean
    newValue?: boolean
    changeType?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityChange?: boolean | EntityChangeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fieldChange"]>

  export type FieldChangeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entityChangeId?: boolean
    fieldName?: boolean
    oldValue?: boolean
    newValue?: boolean
    changeType?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityChange?: boolean | EntityChangeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fieldChange"]>

  export type FieldChangeSelectScalar = {
    id?: boolean
    entityChangeId?: boolean
    fieldName?: boolean
    oldValue?: boolean
    newValue?: boolean
    changeType?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FieldChangeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entityChangeId" | "fieldName" | "oldValue" | "newValue" | "changeType" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["fieldChange"]>
  export type FieldChangeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entityChange?: boolean | EntityChangeDefaultArgs<ExtArgs>
  }
  export type FieldChangeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entityChange?: boolean | EntityChangeDefaultArgs<ExtArgs>
  }
  export type FieldChangeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entityChange?: boolean | EntityChangeDefaultArgs<ExtArgs>
  }

  export type $FieldChangePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FieldChange"
    objects: {
      entityChange: Prisma.$EntityChangePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entityChangeId: string
      fieldName: string
      oldValue: Prisma.JsonValue | null
      newValue: Prisma.JsonValue | null
      changeType: $Enums.ChangeType
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fieldChange"]>
    composites: {}
  }

  type FieldChangeGetPayload<S extends boolean | null | undefined | FieldChangeDefaultArgs> = $Result.GetResult<Prisma.$FieldChangePayload, S>

  type FieldChangeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FieldChangeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FieldChangeCountAggregateInputType | true
    }

  export interface FieldChangeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FieldChange'], meta: { name: 'FieldChange' } }
    /**
     * Find zero or one FieldChange that matches the filter.
     * @param {FieldChangeFindUniqueArgs} args - Arguments to find a FieldChange
     * @example
     * // Get one FieldChange
     * const fieldChange = await prisma.fieldChange.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FieldChangeFindUniqueArgs>(args: SelectSubset<T, FieldChangeFindUniqueArgs<ExtArgs>>): Prisma__FieldChangeClient<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FieldChange that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FieldChangeFindUniqueOrThrowArgs} args - Arguments to find a FieldChange
     * @example
     * // Get one FieldChange
     * const fieldChange = await prisma.fieldChange.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FieldChangeFindUniqueOrThrowArgs>(args: SelectSubset<T, FieldChangeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FieldChangeClient<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FieldChange that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldChangeFindFirstArgs} args - Arguments to find a FieldChange
     * @example
     * // Get one FieldChange
     * const fieldChange = await prisma.fieldChange.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FieldChangeFindFirstArgs>(args?: SelectSubset<T, FieldChangeFindFirstArgs<ExtArgs>>): Prisma__FieldChangeClient<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FieldChange that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldChangeFindFirstOrThrowArgs} args - Arguments to find a FieldChange
     * @example
     * // Get one FieldChange
     * const fieldChange = await prisma.fieldChange.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FieldChangeFindFirstOrThrowArgs>(args?: SelectSubset<T, FieldChangeFindFirstOrThrowArgs<ExtArgs>>): Prisma__FieldChangeClient<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FieldChanges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldChangeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FieldChanges
     * const fieldChanges = await prisma.fieldChange.findMany()
     * 
     * // Get first 10 FieldChanges
     * const fieldChanges = await prisma.fieldChange.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fieldChangeWithIdOnly = await prisma.fieldChange.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FieldChangeFindManyArgs>(args?: SelectSubset<T, FieldChangeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FieldChange.
     * @param {FieldChangeCreateArgs} args - Arguments to create a FieldChange.
     * @example
     * // Create one FieldChange
     * const FieldChange = await prisma.fieldChange.create({
     *   data: {
     *     // ... data to create a FieldChange
     *   }
     * })
     * 
     */
    create<T extends FieldChangeCreateArgs>(args: SelectSubset<T, FieldChangeCreateArgs<ExtArgs>>): Prisma__FieldChangeClient<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FieldChanges.
     * @param {FieldChangeCreateManyArgs} args - Arguments to create many FieldChanges.
     * @example
     * // Create many FieldChanges
     * const fieldChange = await prisma.fieldChange.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FieldChangeCreateManyArgs>(args?: SelectSubset<T, FieldChangeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FieldChanges and returns the data saved in the database.
     * @param {FieldChangeCreateManyAndReturnArgs} args - Arguments to create many FieldChanges.
     * @example
     * // Create many FieldChanges
     * const fieldChange = await prisma.fieldChange.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FieldChanges and only return the `id`
     * const fieldChangeWithIdOnly = await prisma.fieldChange.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FieldChangeCreateManyAndReturnArgs>(args?: SelectSubset<T, FieldChangeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FieldChange.
     * @param {FieldChangeDeleteArgs} args - Arguments to delete one FieldChange.
     * @example
     * // Delete one FieldChange
     * const FieldChange = await prisma.fieldChange.delete({
     *   where: {
     *     // ... filter to delete one FieldChange
     *   }
     * })
     * 
     */
    delete<T extends FieldChangeDeleteArgs>(args: SelectSubset<T, FieldChangeDeleteArgs<ExtArgs>>): Prisma__FieldChangeClient<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FieldChange.
     * @param {FieldChangeUpdateArgs} args - Arguments to update one FieldChange.
     * @example
     * // Update one FieldChange
     * const fieldChange = await prisma.fieldChange.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FieldChangeUpdateArgs>(args: SelectSubset<T, FieldChangeUpdateArgs<ExtArgs>>): Prisma__FieldChangeClient<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FieldChanges.
     * @param {FieldChangeDeleteManyArgs} args - Arguments to filter FieldChanges to delete.
     * @example
     * // Delete a few FieldChanges
     * const { count } = await prisma.fieldChange.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FieldChangeDeleteManyArgs>(args?: SelectSubset<T, FieldChangeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FieldChanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldChangeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FieldChanges
     * const fieldChange = await prisma.fieldChange.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FieldChangeUpdateManyArgs>(args: SelectSubset<T, FieldChangeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FieldChanges and returns the data updated in the database.
     * @param {FieldChangeUpdateManyAndReturnArgs} args - Arguments to update many FieldChanges.
     * @example
     * // Update many FieldChanges
     * const fieldChange = await prisma.fieldChange.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FieldChanges and only return the `id`
     * const fieldChangeWithIdOnly = await prisma.fieldChange.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FieldChangeUpdateManyAndReturnArgs>(args: SelectSubset<T, FieldChangeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FieldChange.
     * @param {FieldChangeUpsertArgs} args - Arguments to update or create a FieldChange.
     * @example
     * // Update or create a FieldChange
     * const fieldChange = await prisma.fieldChange.upsert({
     *   create: {
     *     // ... data to create a FieldChange
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FieldChange we want to update
     *   }
     * })
     */
    upsert<T extends FieldChangeUpsertArgs>(args: SelectSubset<T, FieldChangeUpsertArgs<ExtArgs>>): Prisma__FieldChangeClient<$Result.GetResult<Prisma.$FieldChangePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FieldChanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldChangeCountArgs} args - Arguments to filter FieldChanges to count.
     * @example
     * // Count the number of FieldChanges
     * const count = await prisma.fieldChange.count({
     *   where: {
     *     // ... the filter for the FieldChanges we want to count
     *   }
     * })
    **/
    count<T extends FieldChangeCountArgs>(
      args?: Subset<T, FieldChangeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FieldChangeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FieldChange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldChangeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FieldChangeAggregateArgs>(args: Subset<T, FieldChangeAggregateArgs>): Prisma.PrismaPromise<GetFieldChangeAggregateType<T>>

    /**
     * Group by FieldChange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldChangeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FieldChangeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FieldChangeGroupByArgs['orderBy'] }
        : { orderBy?: FieldChangeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FieldChangeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFieldChangeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FieldChange model
   */
  readonly fields: FieldChangeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FieldChange.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FieldChangeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    entityChange<T extends EntityChangeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntityChangeDefaultArgs<ExtArgs>>): Prisma__EntityChangeClient<$Result.GetResult<Prisma.$EntityChangePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FieldChange model
   */
  interface FieldChangeFieldRefs {
    readonly id: FieldRef<"FieldChange", 'String'>
    readonly entityChangeId: FieldRef<"FieldChange", 'String'>
    readonly fieldName: FieldRef<"FieldChange", 'String'>
    readonly oldValue: FieldRef<"FieldChange", 'Json'>
    readonly newValue: FieldRef<"FieldChange", 'Json'>
    readonly changeType: FieldRef<"FieldChange", 'ChangeType'>
    readonly deletedAt: FieldRef<"FieldChange", 'DateTime'>
    readonly createdAt: FieldRef<"FieldChange", 'DateTime'>
    readonly updatedAt: FieldRef<"FieldChange", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FieldChange findUnique
   */
  export type FieldChangeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    /**
     * Filter, which FieldChange to fetch.
     */
    where: FieldChangeWhereUniqueInput
  }

  /**
   * FieldChange findUniqueOrThrow
   */
  export type FieldChangeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    /**
     * Filter, which FieldChange to fetch.
     */
    where: FieldChangeWhereUniqueInput
  }

  /**
   * FieldChange findFirst
   */
  export type FieldChangeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    /**
     * Filter, which FieldChange to fetch.
     */
    where?: FieldChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldChanges to fetch.
     */
    orderBy?: FieldChangeOrderByWithRelationInput | FieldChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldChanges.
     */
    cursor?: FieldChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldChanges.
     */
    distinct?: FieldChangeScalarFieldEnum | FieldChangeScalarFieldEnum[]
  }

  /**
   * FieldChange findFirstOrThrow
   */
  export type FieldChangeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    /**
     * Filter, which FieldChange to fetch.
     */
    where?: FieldChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldChanges to fetch.
     */
    orderBy?: FieldChangeOrderByWithRelationInput | FieldChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldChanges.
     */
    cursor?: FieldChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldChanges.
     */
    distinct?: FieldChangeScalarFieldEnum | FieldChangeScalarFieldEnum[]
  }

  /**
   * FieldChange findMany
   */
  export type FieldChangeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    /**
     * Filter, which FieldChanges to fetch.
     */
    where?: FieldChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldChanges to fetch.
     */
    orderBy?: FieldChangeOrderByWithRelationInput | FieldChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FieldChanges.
     */
    cursor?: FieldChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldChanges.
     */
    skip?: number
    distinct?: FieldChangeScalarFieldEnum | FieldChangeScalarFieldEnum[]
  }

  /**
   * FieldChange create
   */
  export type FieldChangeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    /**
     * The data needed to create a FieldChange.
     */
    data: XOR<FieldChangeCreateInput, FieldChangeUncheckedCreateInput>
  }

  /**
   * FieldChange createMany
   */
  export type FieldChangeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FieldChanges.
     */
    data: FieldChangeCreateManyInput | FieldChangeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FieldChange createManyAndReturn
   */
  export type FieldChangeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * The data used to create many FieldChanges.
     */
    data: FieldChangeCreateManyInput | FieldChangeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FieldChange update
   */
  export type FieldChangeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    /**
     * The data needed to update a FieldChange.
     */
    data: XOR<FieldChangeUpdateInput, FieldChangeUncheckedUpdateInput>
    /**
     * Choose, which FieldChange to update.
     */
    where: FieldChangeWhereUniqueInput
  }

  /**
   * FieldChange updateMany
   */
  export type FieldChangeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FieldChanges.
     */
    data: XOR<FieldChangeUpdateManyMutationInput, FieldChangeUncheckedUpdateManyInput>
    /**
     * Filter which FieldChanges to update
     */
    where?: FieldChangeWhereInput
    /**
     * Limit how many FieldChanges to update.
     */
    limit?: number
  }

  /**
   * FieldChange updateManyAndReturn
   */
  export type FieldChangeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * The data used to update FieldChanges.
     */
    data: XOR<FieldChangeUpdateManyMutationInput, FieldChangeUncheckedUpdateManyInput>
    /**
     * Filter which FieldChanges to update
     */
    where?: FieldChangeWhereInput
    /**
     * Limit how many FieldChanges to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FieldChange upsert
   */
  export type FieldChangeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    /**
     * The filter to search for the FieldChange to update in case it exists.
     */
    where: FieldChangeWhereUniqueInput
    /**
     * In case the FieldChange found by the `where` argument doesn't exist, create a new FieldChange with this data.
     */
    create: XOR<FieldChangeCreateInput, FieldChangeUncheckedCreateInput>
    /**
     * In case the FieldChange was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FieldChangeUpdateInput, FieldChangeUncheckedUpdateInput>
  }

  /**
   * FieldChange delete
   */
  export type FieldChangeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
    /**
     * Filter which FieldChange to delete.
     */
    where: FieldChangeWhereUniqueInput
  }

  /**
   * FieldChange deleteMany
   */
  export type FieldChangeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FieldChanges to delete
     */
    where?: FieldChangeWhereInput
    /**
     * Limit how many FieldChanges to delete.
     */
    limit?: number
  }

  /**
   * FieldChange without action
   */
  export type FieldChangeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldChange
     */
    select?: FieldChangeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldChange
     */
    omit?: FieldChangeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldChangeInclude<ExtArgs> | null
  }


  /**
   * Model UserStatusTransition
   */

  export type AggregateUserStatusTransition = {
    _count: UserStatusTransitionCountAggregateOutputType | null
    _min: UserStatusTransitionMinAggregateOutputType | null
    _max: UserStatusTransitionMaxAggregateOutputType | null
  }

  export type UserStatusTransitionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    fromStatus: $Enums.UserStatus | null
    toStatus: $Enums.UserStatus | null
    reason: string | null
    changedBy: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type UserStatusTransitionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    fromStatus: $Enums.UserStatus | null
    toStatus: $Enums.UserStatus | null
    reason: string | null
    changedBy: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type UserStatusTransitionCountAggregateOutputType = {
    id: number
    userId: number
    fromStatus: number
    toStatus: number
    reason: number
    metadata: number
    changedBy: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type UserStatusTransitionMinAggregateInputType = {
    id?: true
    userId?: true
    fromStatus?: true
    toStatus?: true
    reason?: true
    changedBy?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type UserStatusTransitionMaxAggregateInputType = {
    id?: true
    userId?: true
    fromStatus?: true
    toStatus?: true
    reason?: true
    changedBy?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type UserStatusTransitionCountAggregateInputType = {
    id?: true
    userId?: true
    fromStatus?: true
    toStatus?: true
    reason?: true
    metadata?: true
    changedBy?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type UserStatusTransitionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStatusTransition to aggregate.
     */
    where?: UserStatusTransitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStatusTransitions to fetch.
     */
    orderBy?: UserStatusTransitionOrderByWithRelationInput | UserStatusTransitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserStatusTransitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStatusTransitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStatusTransitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserStatusTransitions
    **/
    _count?: true | UserStatusTransitionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserStatusTransitionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserStatusTransitionMaxAggregateInputType
  }

  export type GetUserStatusTransitionAggregateType<T extends UserStatusTransitionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserStatusTransition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserStatusTransition[P]>
      : GetScalarType<T[P], AggregateUserStatusTransition[P]>
  }




  export type UserStatusTransitionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserStatusTransitionWhereInput
    orderBy?: UserStatusTransitionOrderByWithAggregationInput | UserStatusTransitionOrderByWithAggregationInput[]
    by: UserStatusTransitionScalarFieldEnum[] | UserStatusTransitionScalarFieldEnum
    having?: UserStatusTransitionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserStatusTransitionCountAggregateInputType | true
    _min?: UserStatusTransitionMinAggregateInputType
    _max?: UserStatusTransitionMaxAggregateInputType
  }

  export type UserStatusTransitionGroupByOutputType = {
    id: string
    userId: string
    fromStatus: $Enums.UserStatus
    toStatus: $Enums.UserStatus
    reason: string | null
    metadata: JsonValue | null
    changedBy: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: UserStatusTransitionCountAggregateOutputType | null
    _min: UserStatusTransitionMinAggregateOutputType | null
    _max: UserStatusTransitionMaxAggregateOutputType | null
  }

  type GetUserStatusTransitionGroupByPayload<T extends UserStatusTransitionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserStatusTransitionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserStatusTransitionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserStatusTransitionGroupByOutputType[P]>
            : GetScalarType<T[P], UserStatusTransitionGroupByOutputType[P]>
        }
      >
    >


  export type UserStatusTransitionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    reason?: boolean
    metadata?: boolean
    changedBy?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStatusTransition"]>

  export type UserStatusTransitionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    reason?: boolean
    metadata?: boolean
    changedBy?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStatusTransition"]>

  export type UserStatusTransitionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    reason?: boolean
    metadata?: boolean
    changedBy?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userStatusTransition"]>

  export type UserStatusTransitionSelectScalar = {
    id?: boolean
    userId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    reason?: boolean
    metadata?: boolean
    changedBy?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type UserStatusTransitionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "fromStatus" | "toStatus" | "reason" | "metadata" | "changedBy" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["userStatusTransition"]>
  export type UserStatusTransitionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserStatusTransitionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserStatusTransitionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserStatusTransitionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserStatusTransition"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      fromStatus: $Enums.UserStatus
      toStatus: $Enums.UserStatus
      reason: string | null
      metadata: Prisma.JsonValue | null
      changedBy: string | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["userStatusTransition"]>
    composites: {}
  }

  type UserStatusTransitionGetPayload<S extends boolean | null | undefined | UserStatusTransitionDefaultArgs> = $Result.GetResult<Prisma.$UserStatusTransitionPayload, S>

  type UserStatusTransitionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserStatusTransitionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserStatusTransitionCountAggregateInputType | true
    }

  export interface UserStatusTransitionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserStatusTransition'], meta: { name: 'UserStatusTransition' } }
    /**
     * Find zero or one UserStatusTransition that matches the filter.
     * @param {UserStatusTransitionFindUniqueArgs} args - Arguments to find a UserStatusTransition
     * @example
     * // Get one UserStatusTransition
     * const userStatusTransition = await prisma.userStatusTransition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserStatusTransitionFindUniqueArgs>(args: SelectSubset<T, UserStatusTransitionFindUniqueArgs<ExtArgs>>): Prisma__UserStatusTransitionClient<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserStatusTransition that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserStatusTransitionFindUniqueOrThrowArgs} args - Arguments to find a UserStatusTransition
     * @example
     * // Get one UserStatusTransition
     * const userStatusTransition = await prisma.userStatusTransition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserStatusTransitionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserStatusTransitionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserStatusTransitionClient<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStatusTransition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatusTransitionFindFirstArgs} args - Arguments to find a UserStatusTransition
     * @example
     * // Get one UserStatusTransition
     * const userStatusTransition = await prisma.userStatusTransition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserStatusTransitionFindFirstArgs>(args?: SelectSubset<T, UserStatusTransitionFindFirstArgs<ExtArgs>>): Prisma__UserStatusTransitionClient<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserStatusTransition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatusTransitionFindFirstOrThrowArgs} args - Arguments to find a UserStatusTransition
     * @example
     * // Get one UserStatusTransition
     * const userStatusTransition = await prisma.userStatusTransition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserStatusTransitionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserStatusTransitionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserStatusTransitionClient<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserStatusTransitions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatusTransitionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserStatusTransitions
     * const userStatusTransitions = await prisma.userStatusTransition.findMany()
     * 
     * // Get first 10 UserStatusTransitions
     * const userStatusTransitions = await prisma.userStatusTransition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userStatusTransitionWithIdOnly = await prisma.userStatusTransition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserStatusTransitionFindManyArgs>(args?: SelectSubset<T, UserStatusTransitionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserStatusTransition.
     * @param {UserStatusTransitionCreateArgs} args - Arguments to create a UserStatusTransition.
     * @example
     * // Create one UserStatusTransition
     * const UserStatusTransition = await prisma.userStatusTransition.create({
     *   data: {
     *     // ... data to create a UserStatusTransition
     *   }
     * })
     * 
     */
    create<T extends UserStatusTransitionCreateArgs>(args: SelectSubset<T, UserStatusTransitionCreateArgs<ExtArgs>>): Prisma__UserStatusTransitionClient<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserStatusTransitions.
     * @param {UserStatusTransitionCreateManyArgs} args - Arguments to create many UserStatusTransitions.
     * @example
     * // Create many UserStatusTransitions
     * const userStatusTransition = await prisma.userStatusTransition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserStatusTransitionCreateManyArgs>(args?: SelectSubset<T, UserStatusTransitionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserStatusTransitions and returns the data saved in the database.
     * @param {UserStatusTransitionCreateManyAndReturnArgs} args - Arguments to create many UserStatusTransitions.
     * @example
     * // Create many UserStatusTransitions
     * const userStatusTransition = await prisma.userStatusTransition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserStatusTransitions and only return the `id`
     * const userStatusTransitionWithIdOnly = await prisma.userStatusTransition.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserStatusTransitionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserStatusTransitionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserStatusTransition.
     * @param {UserStatusTransitionDeleteArgs} args - Arguments to delete one UserStatusTransition.
     * @example
     * // Delete one UserStatusTransition
     * const UserStatusTransition = await prisma.userStatusTransition.delete({
     *   where: {
     *     // ... filter to delete one UserStatusTransition
     *   }
     * })
     * 
     */
    delete<T extends UserStatusTransitionDeleteArgs>(args: SelectSubset<T, UserStatusTransitionDeleteArgs<ExtArgs>>): Prisma__UserStatusTransitionClient<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserStatusTransition.
     * @param {UserStatusTransitionUpdateArgs} args - Arguments to update one UserStatusTransition.
     * @example
     * // Update one UserStatusTransition
     * const userStatusTransition = await prisma.userStatusTransition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserStatusTransitionUpdateArgs>(args: SelectSubset<T, UserStatusTransitionUpdateArgs<ExtArgs>>): Prisma__UserStatusTransitionClient<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserStatusTransitions.
     * @param {UserStatusTransitionDeleteManyArgs} args - Arguments to filter UserStatusTransitions to delete.
     * @example
     * // Delete a few UserStatusTransitions
     * const { count } = await prisma.userStatusTransition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserStatusTransitionDeleteManyArgs>(args?: SelectSubset<T, UserStatusTransitionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStatusTransitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatusTransitionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserStatusTransitions
     * const userStatusTransition = await prisma.userStatusTransition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserStatusTransitionUpdateManyArgs>(args: SelectSubset<T, UserStatusTransitionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserStatusTransitions and returns the data updated in the database.
     * @param {UserStatusTransitionUpdateManyAndReturnArgs} args - Arguments to update many UserStatusTransitions.
     * @example
     * // Update many UserStatusTransitions
     * const userStatusTransition = await prisma.userStatusTransition.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserStatusTransitions and only return the `id`
     * const userStatusTransitionWithIdOnly = await prisma.userStatusTransition.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserStatusTransitionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserStatusTransitionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserStatusTransition.
     * @param {UserStatusTransitionUpsertArgs} args - Arguments to update or create a UserStatusTransition.
     * @example
     * // Update or create a UserStatusTransition
     * const userStatusTransition = await prisma.userStatusTransition.upsert({
     *   create: {
     *     // ... data to create a UserStatusTransition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserStatusTransition we want to update
     *   }
     * })
     */
    upsert<T extends UserStatusTransitionUpsertArgs>(args: SelectSubset<T, UserStatusTransitionUpsertArgs<ExtArgs>>): Prisma__UserStatusTransitionClient<$Result.GetResult<Prisma.$UserStatusTransitionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserStatusTransitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatusTransitionCountArgs} args - Arguments to filter UserStatusTransitions to count.
     * @example
     * // Count the number of UserStatusTransitions
     * const count = await prisma.userStatusTransition.count({
     *   where: {
     *     // ... the filter for the UserStatusTransitions we want to count
     *   }
     * })
    **/
    count<T extends UserStatusTransitionCountArgs>(
      args?: Subset<T, UserStatusTransitionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserStatusTransitionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserStatusTransition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatusTransitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserStatusTransitionAggregateArgs>(args: Subset<T, UserStatusTransitionAggregateArgs>): Prisma.PrismaPromise<GetUserStatusTransitionAggregateType<T>>

    /**
     * Group by UserStatusTransition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserStatusTransitionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserStatusTransitionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserStatusTransitionGroupByArgs['orderBy'] }
        : { orderBy?: UserStatusTransitionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserStatusTransitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserStatusTransitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserStatusTransition model
   */
  readonly fields: UserStatusTransitionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserStatusTransition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserStatusTransitionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserStatusTransition model
   */
  interface UserStatusTransitionFieldRefs {
    readonly id: FieldRef<"UserStatusTransition", 'String'>
    readonly userId: FieldRef<"UserStatusTransition", 'String'>
    readonly fromStatus: FieldRef<"UserStatusTransition", 'UserStatus'>
    readonly toStatus: FieldRef<"UserStatusTransition", 'UserStatus'>
    readonly reason: FieldRef<"UserStatusTransition", 'String'>
    readonly metadata: FieldRef<"UserStatusTransition", 'Json'>
    readonly changedBy: FieldRef<"UserStatusTransition", 'String'>
    readonly ipAddress: FieldRef<"UserStatusTransition", 'String'>
    readonly userAgent: FieldRef<"UserStatusTransition", 'String'>
    readonly createdAt: FieldRef<"UserStatusTransition", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserStatusTransition findUnique
   */
  export type UserStatusTransitionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    /**
     * Filter, which UserStatusTransition to fetch.
     */
    where: UserStatusTransitionWhereUniqueInput
  }

  /**
   * UserStatusTransition findUniqueOrThrow
   */
  export type UserStatusTransitionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    /**
     * Filter, which UserStatusTransition to fetch.
     */
    where: UserStatusTransitionWhereUniqueInput
  }

  /**
   * UserStatusTransition findFirst
   */
  export type UserStatusTransitionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    /**
     * Filter, which UserStatusTransition to fetch.
     */
    where?: UserStatusTransitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStatusTransitions to fetch.
     */
    orderBy?: UserStatusTransitionOrderByWithRelationInput | UserStatusTransitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStatusTransitions.
     */
    cursor?: UserStatusTransitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStatusTransitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStatusTransitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStatusTransitions.
     */
    distinct?: UserStatusTransitionScalarFieldEnum | UserStatusTransitionScalarFieldEnum[]
  }

  /**
   * UserStatusTransition findFirstOrThrow
   */
  export type UserStatusTransitionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    /**
     * Filter, which UserStatusTransition to fetch.
     */
    where?: UserStatusTransitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStatusTransitions to fetch.
     */
    orderBy?: UserStatusTransitionOrderByWithRelationInput | UserStatusTransitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserStatusTransitions.
     */
    cursor?: UserStatusTransitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStatusTransitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStatusTransitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserStatusTransitions.
     */
    distinct?: UserStatusTransitionScalarFieldEnum | UserStatusTransitionScalarFieldEnum[]
  }

  /**
   * UserStatusTransition findMany
   */
  export type UserStatusTransitionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    /**
     * Filter, which UserStatusTransitions to fetch.
     */
    where?: UserStatusTransitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserStatusTransitions to fetch.
     */
    orderBy?: UserStatusTransitionOrderByWithRelationInput | UserStatusTransitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserStatusTransitions.
     */
    cursor?: UserStatusTransitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserStatusTransitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserStatusTransitions.
     */
    skip?: number
    distinct?: UserStatusTransitionScalarFieldEnum | UserStatusTransitionScalarFieldEnum[]
  }

  /**
   * UserStatusTransition create
   */
  export type UserStatusTransitionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserStatusTransition.
     */
    data: XOR<UserStatusTransitionCreateInput, UserStatusTransitionUncheckedCreateInput>
  }

  /**
   * UserStatusTransition createMany
   */
  export type UserStatusTransitionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserStatusTransitions.
     */
    data: UserStatusTransitionCreateManyInput | UserStatusTransitionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserStatusTransition createManyAndReturn
   */
  export type UserStatusTransitionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * The data used to create many UserStatusTransitions.
     */
    data: UserStatusTransitionCreateManyInput | UserStatusTransitionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStatusTransition update
   */
  export type UserStatusTransitionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserStatusTransition.
     */
    data: XOR<UserStatusTransitionUpdateInput, UserStatusTransitionUncheckedUpdateInput>
    /**
     * Choose, which UserStatusTransition to update.
     */
    where: UserStatusTransitionWhereUniqueInput
  }

  /**
   * UserStatusTransition updateMany
   */
  export type UserStatusTransitionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserStatusTransitions.
     */
    data: XOR<UserStatusTransitionUpdateManyMutationInput, UserStatusTransitionUncheckedUpdateManyInput>
    /**
     * Filter which UserStatusTransitions to update
     */
    where?: UserStatusTransitionWhereInput
    /**
     * Limit how many UserStatusTransitions to update.
     */
    limit?: number
  }

  /**
   * UserStatusTransition updateManyAndReturn
   */
  export type UserStatusTransitionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * The data used to update UserStatusTransitions.
     */
    data: XOR<UserStatusTransitionUpdateManyMutationInput, UserStatusTransitionUncheckedUpdateManyInput>
    /**
     * Filter which UserStatusTransitions to update
     */
    where?: UserStatusTransitionWhereInput
    /**
     * Limit how many UserStatusTransitions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserStatusTransition upsert
   */
  export type UserStatusTransitionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserStatusTransition to update in case it exists.
     */
    where: UserStatusTransitionWhereUniqueInput
    /**
     * In case the UserStatusTransition found by the `where` argument doesn't exist, create a new UserStatusTransition with this data.
     */
    create: XOR<UserStatusTransitionCreateInput, UserStatusTransitionUncheckedCreateInput>
    /**
     * In case the UserStatusTransition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserStatusTransitionUpdateInput, UserStatusTransitionUncheckedUpdateInput>
  }

  /**
   * UserStatusTransition delete
   */
  export type UserStatusTransitionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
    /**
     * Filter which UserStatusTransition to delete.
     */
    where: UserStatusTransitionWhereUniqueInput
  }

  /**
   * UserStatusTransition deleteMany
   */
  export type UserStatusTransitionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserStatusTransitions to delete
     */
    where?: UserStatusTransitionWhereInput
    /**
     * Limit how many UserStatusTransitions to delete.
     */
    limit?: number
  }

  /**
   * UserStatusTransition without action
   */
  export type UserStatusTransitionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserStatusTransition
     */
    select?: UserStatusTransitionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserStatusTransition
     */
    omit?: UserStatusTransitionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserStatusTransitionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    emailVerified: 'emailVerified',
    lastLoginAt: 'lastLoginAt',
    preferredLanguage: 'preferredLanguage',
    timezone: 'timezone',
    isTwoFactorEnabled: 'isTwoFactorEnabled',
    status: 'status',
    statusChangedAt: 'statusChangedAt',
    inactiveReason: 'inactiveReason',
    suspensionReason: 'suspensionReason',
    banReason: 'banReason',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    lastLoginAt: 'lastLoginAt',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    isValid: 'isValid'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    deletedAt: 'deletedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    deletedAt: 'deletedAt'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    id: 'id',
    roleId: 'roleId',
    permissionId: 'permissionId'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    roleId: 'roleId'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    preferredName: 'preferredName',
    dob: 'dob',
    gender: 'gender',
    phone: 'phone',
    email: 'email',
    image: 'image',
    address: 'address',
    emergencyContactName: 'emergencyContactName',
    emergencyContactPhone: 'emergencyContactPhone',
    emergencyContactEmail: 'emergencyContactEmail',
    preferredLanguage: 'preferredLanguage',
    preferredContactMethod: 'preferredContactMethod',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    website: 'website',
    address: 'address',
    billingAddress: 'billingAddress',
    taxId: 'taxId',
    contactPerson: 'contactPerson',
    contactEmail: 'contactEmail',
    contactPhone: 'contactPhone',
    industryId: 'industryId',
    status: 'status',
    preferredContactMethod: 'preferredContactMethod',
    timezone: 'timezone',
    isVerified: 'isVerified',
    notes: 'notes',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const IndustryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    parentId: 'parentId',
    externalId: 'externalId',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IndustryScalarFieldEnum = (typeof IndustryScalarFieldEnum)[keyof typeof IndustryScalarFieldEnum]


  export const ContractScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    startDate: 'startDate',
    endDate: 'endDate',
    renewalDate: 'renewalDate',
    billingRate: 'billingRate',
    isRenewable: 'isRenewable',
    isAutoRenew: 'isAutoRenew',
    paymentStatus: 'paymentStatus',
    paymentFrequency: 'paymentFrequency',
    paymentTerms: 'paymentTerms',
    currency: 'currency',
    lastBillingDate: 'lastBillingDate',
    nextBillingDate: 'nextBillingDate',
    documentUrl: 'documentUrl',
    status: 'status',
    signedBy: 'signedBy',
    signedAt: 'signedAt',
    terminationReason: 'terminationReason',
    notes: 'notes',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContractScalarFieldEnum = (typeof ContractScalarFieldEnum)[keyof typeof ContractScalarFieldEnum]


  export const ServiceCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceCategoryScalarFieldEnum = (typeof ServiceCategoryScalarFieldEnum)[keyof typeof ServiceCategoryScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    categoryId: 'categoryId',
    status: 'status',
    duration: 'duration',
    capacity: 'capacity',
    prerequisites: 'prerequisites',
    isPublic: 'isPublic',
    price: 'price',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    serviceProviderId: 'serviceProviderId'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const ServiceAssignmentScalarFieldEnum: {
    id: 'id',
    serviceId: 'serviceId',
    contractId: 'contractId',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    frequency: 'frequency',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clientId: 'clientId'
  };

  export type ServiceAssignmentScalarFieldEnum = (typeof ServiceAssignmentScalarFieldEnum)[keyof typeof ServiceAssignmentScalarFieldEnum]


  export const ServiceProviderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    contactEmail: 'contactEmail',
    contactPhone: 'contactPhone',
    location: 'location',
    qualifications: 'qualifications',
    specializations: 'specializations',
    availability: 'availability',
    rating: 'rating',
    isVerified: 'isVerified',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceProviderScalarFieldEnum = (typeof ServiceProviderScalarFieldEnum)[keyof typeof ServiceProviderScalarFieldEnum]


  export const ServiceSessionScalarFieldEnum: {
    id: 'id',
    serviceId: 'serviceId',
    providerId: 'providerId',
    scheduledAt: 'scheduledAt',
    completedAt: 'completedAt',
    status: 'status',
    notes: 'notes',
    feedback: 'feedback',
    duration: 'duration',
    location: 'location',
    cancellationReason: 'cancellationReason',
    rescheduleCount: 'rescheduleCount',
    isGroupSession: 'isGroupSession',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    staffId: 'staffId',
    beneficiaryId: 'beneficiaryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceSessionScalarFieldEnum = (typeof ServiceSessionScalarFieldEnum)[keyof typeof ServiceSessionScalarFieldEnum]


  export const SessionFeedbackScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    rating: 'rating',
    comment: 'comment',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt'
  };

  export type SessionFeedbackScalarFieldEnum = (typeof SessionFeedbackScalarFieldEnum)[keyof typeof SessionFeedbackScalarFieldEnum]


  export const StaffScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    clientId: 'clientId',
    role: 'role',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    qualifications: 'qualifications',
    specializations: 'specializations',
    preferredWorkingHours: 'preferredWorkingHours',
    emergencyContactName: 'emergencyContactName',
    emergencyContactPhone: 'emergencyContactPhone',
    emergencyContactEmail: 'emergencyContactEmail',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const BeneficiaryScalarFieldEnum: {
    id: 'id',
    profileId: 'profileId',
    relation: 'relation',
    isStaffLink: 'isStaffLink',
    staffId: 'staffId',
    guardianId: 'guardianId',
    userLinkId: 'userLinkId',
    status: 'status',
    lastServiceDate: 'lastServiceDate',
    preferredLanguage: 'preferredLanguage',
    notes: 'notes',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BeneficiaryScalarFieldEnum = (typeof BeneficiaryScalarFieldEnum)[keyof typeof BeneficiaryScalarFieldEnum]


  export const KPIScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    typeId: 'typeId',
    unit: 'unit',
    unitType: 'unitType',
    targetValue: 'targetValue',
    isPublic: 'isPublic',
    calculationMethod: 'calculationMethod',
    frequency: 'frequency',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clientId: 'clientId',
    contractId: 'contractId'
  };

  export type KPIScalarFieldEnum = (typeof KPIScalarFieldEnum)[keyof typeof KPIScalarFieldEnum]


  export const KpiTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    weight: 'weight',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KpiTypeScalarFieldEnum = (typeof KpiTypeScalarFieldEnum)[keyof typeof KpiTypeScalarFieldEnum]


  export const KPIAssignmentScalarFieldEnum: {
    id: 'id',
    kpiId: 'kpiId',
    contractId: 'contractId',
    targetValue: 'targetValue',
    frequency: 'frequency',
    status: 'status',
    notes: 'notes',
    startDate: 'startDate',
    endDate: 'endDate',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    clientId: 'clientId'
  };

  export type KPIAssignmentScalarFieldEnum = (typeof KPIAssignmentScalarFieldEnum)[keyof typeof KPIAssignmentScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    type: 'type',
    url: 'url',
    fileSize: 'fileSize',
    fileType: 'fileType',
    version: 'version',
    isLatest: 'isLatest',
    previousVersionId: 'previousVersionId',
    status: 'status',
    expiryDate: 'expiryDate',
    isConfidential: 'isConfidential',
    tags: 'tags',
    metadata: 'metadata',
    deletedAt: 'deletedAt',
    uploadedById: 'uploadedById',
    clientId: 'clientId',
    contractId: 'contractId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    data: 'data',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    timestamp: 'timestamp',
    userId: 'userId'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const EntityChangeScalarFieldEnum: {
    id: 'id',
    entityType: 'entityType',
    entityId: 'entityId',
    changeType: 'changeType',
    changedAt: 'changedAt',
    changedBy: 'changedBy',
    changeReason: 'changeReason',
    oldData: 'oldData',
    newData: 'newData',
    metadata: 'metadata',
    isActive: 'isActive',
    deletedAt: 'deletedAt'
  };

  export type EntityChangeScalarFieldEnum = (typeof EntityChangeScalarFieldEnum)[keyof typeof EntityChangeScalarFieldEnum]


  export const FieldChangeScalarFieldEnum: {
    id: 'id',
    entityChangeId: 'entityChangeId',
    fieldName: 'fieldName',
    oldValue: 'oldValue',
    newValue: 'newValue',
    changeType: 'changeType',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FieldChangeScalarFieldEnum = (typeof FieldChangeScalarFieldEnum)[keyof typeof FieldChangeScalarFieldEnum]


  export const UserStatusTransitionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    fromStatus: 'fromStatus',
    toStatus: 'toStatus',
    reason: 'reason',
    metadata: 'metadata',
    changedBy: 'changedBy',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type UserStatusTransitionScalarFieldEnum = (typeof UserStatusTransitionScalarFieldEnum)[keyof typeof UserStatusTransitionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Language'
   */
  export type EnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language'>
    


  /**
   * Reference to a field of type 'Language[]'
   */
  export type ListEnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'ContactMethod'
   */
  export type EnumContactMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactMethod'>
    


  /**
   * Reference to a field of type 'ContactMethod[]'
   */
  export type ListEnumContactMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactMethod[]'>
    


  /**
   * Reference to a field of type 'BaseStatus'
   */
  export type EnumBaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BaseStatus'>
    


  /**
   * Reference to a field of type 'BaseStatus[]'
   */
  export type ListEnumBaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BaseStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'ContractStatus'
   */
  export type EnumContractStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractStatus'>
    


  /**
   * Reference to a field of type 'ContractStatus[]'
   */
  export type ListEnumContractStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractStatus[]'>
    


  /**
   * Reference to a field of type 'AssignmentStatus'
   */
  export type EnumAssignmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentStatus'>
    


  /**
   * Reference to a field of type 'AssignmentStatus[]'
   */
  export type ListEnumAssignmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentStatus[]'>
    


  /**
   * Reference to a field of type 'Frequency'
   */
  export type EnumFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Frequency'>
    


  /**
   * Reference to a field of type 'Frequency[]'
   */
  export type ListEnumFrequencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Frequency[]'>
    


  /**
   * Reference to a field of type 'ServiceProviderType'
   */
  export type EnumServiceProviderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceProviderType'>
    


  /**
   * Reference to a field of type 'ServiceProviderType[]'
   */
  export type ListEnumServiceProviderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceProviderType[]'>
    


  /**
   * Reference to a field of type 'WorkStatus'
   */
  export type EnumWorkStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkStatus'>
    


  /**
   * Reference to a field of type 'WorkStatus[]'
   */
  export type ListEnumWorkStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkStatus[]'>
    


  /**
   * Reference to a field of type 'SessionStatus'
   */
  export type EnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus'>
    


  /**
   * Reference to a field of type 'SessionStatus[]'
   */
  export type ListEnumSessionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SessionStatus[]'>
    


  /**
   * Reference to a field of type 'StaffRole'
   */
  export type EnumStaffRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StaffRole'>
    


  /**
   * Reference to a field of type 'StaffRole[]'
   */
  export type ListEnumStaffRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StaffRole[]'>
    


  /**
   * Reference to a field of type 'RelationType'
   */
  export type EnumRelationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelationType'>
    


  /**
   * Reference to a field of type 'RelationType[]'
   */
  export type ListEnumRelationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RelationType[]'>
    


  /**
   * Reference to a field of type 'Unit'
   */
  export type EnumUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Unit'>
    


  /**
   * Reference to a field of type 'Unit[]'
   */
  export type ListEnumUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Unit[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'DocumentStatus'
   */
  export type EnumDocumentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentStatus'>
    


  /**
   * Reference to a field of type 'DocumentStatus[]'
   */
  export type ListEnumDocumentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentStatus[]'>
    


  /**
   * Reference to a field of type 'ActionType'
   */
  export type EnumActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActionType'>
    


  /**
   * Reference to a field of type 'ActionType[]'
   */
  export type ListEnumActionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActionType[]'>
    


  /**
   * Reference to a field of type 'ChangeType'
   */
  export type EnumChangeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChangeType'>
    


  /**
   * Reference to a field of type 'ChangeType[]'
   */
  export type ListEnumChangeTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChangeType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    preferredLanguage?: EnumLanguageNullableFilter<"User"> | $Enums.Language | null
    timezone?: StringNullableFilter<"User"> | string | null
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    statusChangedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    inactiveReason?: StringNullableFilter<"User"> | string | null
    suspensionReason?: StringNullableFilter<"User"> | string | null
    banReason?: StringNullableFilter<"User"> | string | null
    metadata?: JsonNullableFilter<"User">
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    userRoles?: UserRoleListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    documents?: DocumentListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    staffProfiles?: StaffListRelationFilter
    beneficiaries?: BeneficiaryListRelationFilter
    guardianOf?: BeneficiaryListRelationFilter
    statusTransitions?: UserStatusTransitionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    isTwoFactorEnabled?: SortOrder
    status?: SortOrder
    statusChangedAt?: SortOrderInput | SortOrder
    inactiveReason?: SortOrderInput | SortOrder
    suspensionReason?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    userRoles?: UserRoleOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    profile?: ProfileOrderByWithRelationInput
    staffProfiles?: StaffOrderByRelationAggregateInput
    beneficiaries?: BeneficiaryOrderByRelationAggregateInput
    guardianOf?: BeneficiaryOrderByRelationAggregateInput
    statusTransitions?: UserStatusTransitionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    preferredLanguage?: EnumLanguageNullableFilter<"User"> | $Enums.Language | null
    timezone?: StringNullableFilter<"User"> | string | null
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    statusChangedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    inactiveReason?: StringNullableFilter<"User"> | string | null
    suspensionReason?: StringNullableFilter<"User"> | string | null
    banReason?: StringNullableFilter<"User"> | string | null
    metadata?: JsonNullableFilter<"User">
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    userRoles?: UserRoleListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    documents?: DocumentListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    staffProfiles?: StaffListRelationFilter
    beneficiaries?: BeneficiaryListRelationFilter
    guardianOf?: BeneficiaryListRelationFilter
    statusTransitions?: UserStatusTransitionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    isTwoFactorEnabled?: SortOrder
    status?: SortOrder
    statusChangedAt?: SortOrderInput | SortOrder
    inactiveReason?: SortOrderInput | SortOrder
    suspensionReason?: SortOrderInput | SortOrder
    banReason?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    preferredLanguage?: EnumLanguageNullableWithAggregatesFilter<"User"> | $Enums.Language | null
    timezone?: StringNullableWithAggregatesFilter<"User"> | string | null
    isTwoFactorEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    statusChangedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    inactiveReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    suspensionReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    banReason?: StringNullableWithAggregatesFilter<"User"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"User">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    lastLoginAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    lastLoginAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    isValid?: BoolFilter<"Session"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isValid?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    isValid?: BoolFilter<"Session"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isValid?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    isValid?: BoolWithAggregatesFilter<"Session"> | boolean
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    deletedAt?: DateTimeNullableFilter<"Role"> | Date | string | null
    permissions?: RolePermissionListRelationFilter
    users?: UserRoleListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    permissions?: RolePermissionOrderByRelationAggregateInput
    users?: UserRoleOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    description?: StringNullableFilter<"Role"> | string | null
    deletedAt?: DateTimeNullableFilter<"Role"> | Date | string | null
    permissions?: RolePermissionListRelationFilter
    users?: UserRoleListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Role"> | Date | string | null
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    deletedAt?: DateTimeNullableFilter<"Permission"> | Date | string | null
    roles?: RolePermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    roles?: RolePermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    description?: StringNullableFilter<"Permission"> | string | null
    deletedAt?: DateTimeNullableFilter<"Permission"> | Date | string | null
    roles?: RolePermissionListRelationFilter
  }, "id" | "name">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Permission"> | Date | string | null
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }

  export type RolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    role?: RoleOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    roleId_permissionId?: RolePermissionRoleIdPermissionIdCompoundUniqueInput
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }, "id" | "roleId_permissionId">

  export type RolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RolePermission"> | string
    roleId?: StringWithAggregatesFilter<"RolePermission"> | string
    permissionId?: StringWithAggregatesFilter<"RolePermission"> | string
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id?: StringFilter<"UserRole"> | string
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_roleId?: UserRoleUserIdRoleIdCompoundUniqueInput
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }, "id" | "userId_roleId">

  export type UserRoleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserRole"> | string
    userId?: StringWithAggregatesFilter<"UserRole"> | string
    roleId?: StringWithAggregatesFilter<"UserRole"> | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    fullName?: StringFilter<"Profile"> | string
    preferredName?: StringNullableFilter<"Profile"> | string | null
    dob?: DateTimeNullableFilter<"Profile"> | Date | string | null
    gender?: EnumGenderNullableFilter<"Profile"> | $Enums.Gender | null
    phone?: StringNullableFilter<"Profile"> | string | null
    email?: StringNullableFilter<"Profile"> | string | null
    image?: StringNullableFilter<"Profile"> | string | null
    address?: StringNullableFilter<"Profile"> | string | null
    emergencyContactName?: StringNullableFilter<"Profile"> | string | null
    emergencyContactPhone?: StringNullableFilter<"Profile"> | string | null
    emergencyContactEmail?: StringNullableFilter<"Profile"> | string | null
    preferredLanguage?: EnumLanguageNullableFilter<"Profile"> | $Enums.Language | null
    preferredContactMethod?: EnumContactMethodNullableFilter<"Profile"> | $Enums.ContactMethod | null
    metadata?: JsonNullableFilter<"Profile">
    deletedAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    userId?: StringNullableFilter<"Profile"> | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    staff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    beneficiary?: XOR<BeneficiaryNullableScalarRelationFilter, BeneficiaryWhereInput> | null
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    preferredName?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    emergencyContactEmail?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    preferredContactMethod?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    staff?: StaffOrderByWithRelationInput
    beneficiary?: BeneficiaryOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    fullName?: StringFilter<"Profile"> | string
    preferredName?: StringNullableFilter<"Profile"> | string | null
    dob?: DateTimeNullableFilter<"Profile"> | Date | string | null
    gender?: EnumGenderNullableFilter<"Profile"> | $Enums.Gender | null
    phone?: StringNullableFilter<"Profile"> | string | null
    email?: StringNullableFilter<"Profile"> | string | null
    image?: StringNullableFilter<"Profile"> | string | null
    address?: StringNullableFilter<"Profile"> | string | null
    emergencyContactName?: StringNullableFilter<"Profile"> | string | null
    emergencyContactPhone?: StringNullableFilter<"Profile"> | string | null
    emergencyContactEmail?: StringNullableFilter<"Profile"> | string | null
    preferredLanguage?: EnumLanguageNullableFilter<"Profile"> | $Enums.Language | null
    preferredContactMethod?: EnumContactMethodNullableFilter<"Profile"> | $Enums.ContactMethod | null
    metadata?: JsonNullableFilter<"Profile">
    deletedAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    createdAt?: DateTimeFilter<"Profile"> | Date | string
    updatedAt?: DateTimeFilter<"Profile"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    staff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    beneficiary?: XOR<BeneficiaryNullableScalarRelationFilter, BeneficiaryWhereInput> | null
  }, "id" | "userId">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    preferredName?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    emergencyContactEmail?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    preferredContactMethod?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    fullName?: StringWithAggregatesFilter<"Profile"> | string
    preferredName?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    gender?: EnumGenderNullableWithAggregatesFilter<"Profile"> | $Enums.Gender | null
    phone?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    email?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    image?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    address?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    emergencyContactName?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    emergencyContactPhone?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    emergencyContactEmail?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    preferredLanguage?: EnumLanguageNullableWithAggregatesFilter<"Profile"> | $Enums.Language | null
    preferredContactMethod?: EnumContactMethodNullableWithAggregatesFilter<"Profile"> | $Enums.ContactMethod | null
    metadata?: JsonNullableWithAggregatesFilter<"Profile">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    userId?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Profile"> | Date | string
  }

  export type ClientWhereInput = {
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    id?: StringFilter<"Client"> | string
    name?: StringFilter<"Client"> | string
    email?: StringNullableFilter<"Client"> | string | null
    phone?: StringNullableFilter<"Client"> | string | null
    website?: StringNullableFilter<"Client"> | string | null
    address?: StringNullableFilter<"Client"> | string | null
    billingAddress?: StringNullableFilter<"Client"> | string | null
    taxId?: StringNullableFilter<"Client"> | string | null
    contactPerson?: StringNullableFilter<"Client"> | string | null
    contactEmail?: StringNullableFilter<"Client"> | string | null
    contactPhone?: StringNullableFilter<"Client"> | string | null
    industryId?: StringNullableFilter<"Client"> | string | null
    status?: EnumBaseStatusFilter<"Client"> | $Enums.BaseStatus
    preferredContactMethod?: EnumContactMethodNullableFilter<"Client"> | $Enums.ContactMethod | null
    timezone?: StringNullableFilter<"Client"> | string | null
    isVerified?: BoolFilter<"Client"> | boolean
    notes?: StringNullableFilter<"Client"> | string | null
    metadata?: JsonNullableFilter<"Client">
    deletedAt?: DateTimeNullableFilter<"Client"> | Date | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    industry?: XOR<IndustryNullableScalarRelationFilter, IndustryWhereInput> | null
    contracts?: ContractListRelationFilter
    documents?: DocumentListRelationFilter
    kpis?: KPIListRelationFilter
    kpiAssignments?: KPIAssignmentListRelationFilter
    serviceAssignments?: ServiceAssignmentListRelationFilter
    staff?: StaffListRelationFilter
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    taxId?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    industryId?: SortOrderInput | SortOrder
    status?: SortOrder
    preferredContactMethod?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    notes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    industry?: IndustryOrderByWithRelationInput
    contracts?: ContractOrderByRelationAggregateInput
    documents?: DocumentOrderByRelationAggregateInput
    kpis?: KPIOrderByRelationAggregateInput
    kpiAssignments?: KPIAssignmentOrderByRelationAggregateInput
    serviceAssignments?: ServiceAssignmentOrderByRelationAggregateInput
    staff?: StaffOrderByRelationAggregateInput
  }

  export type ClientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClientWhereInput | ClientWhereInput[]
    OR?: ClientWhereInput[]
    NOT?: ClientWhereInput | ClientWhereInput[]
    name?: StringFilter<"Client"> | string
    email?: StringNullableFilter<"Client"> | string | null
    phone?: StringNullableFilter<"Client"> | string | null
    website?: StringNullableFilter<"Client"> | string | null
    address?: StringNullableFilter<"Client"> | string | null
    billingAddress?: StringNullableFilter<"Client"> | string | null
    taxId?: StringNullableFilter<"Client"> | string | null
    contactPerson?: StringNullableFilter<"Client"> | string | null
    contactEmail?: StringNullableFilter<"Client"> | string | null
    contactPhone?: StringNullableFilter<"Client"> | string | null
    industryId?: StringNullableFilter<"Client"> | string | null
    status?: EnumBaseStatusFilter<"Client"> | $Enums.BaseStatus
    preferredContactMethod?: EnumContactMethodNullableFilter<"Client"> | $Enums.ContactMethod | null
    timezone?: StringNullableFilter<"Client"> | string | null
    isVerified?: BoolFilter<"Client"> | boolean
    notes?: StringNullableFilter<"Client"> | string | null
    metadata?: JsonNullableFilter<"Client">
    deletedAt?: DateTimeNullableFilter<"Client"> | Date | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
    industry?: XOR<IndustryNullableScalarRelationFilter, IndustryWhereInput> | null
    contracts?: ContractListRelationFilter
    documents?: DocumentListRelationFilter
    kpis?: KPIListRelationFilter
    kpiAssignments?: KPIAssignmentListRelationFilter
    serviceAssignments?: ServiceAssignmentListRelationFilter
    staff?: StaffListRelationFilter
  }, "id">

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    taxId?: SortOrderInput | SortOrder
    contactPerson?: SortOrderInput | SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    industryId?: SortOrderInput | SortOrder
    status?: SortOrder
    preferredContactMethod?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    notes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    OR?: ClientScalarWhereWithAggregatesInput[]
    NOT?: ClientScalarWhereWithAggregatesInput | ClientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Client"> | string
    name?: StringWithAggregatesFilter<"Client"> | string
    email?: StringNullableWithAggregatesFilter<"Client"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Client"> | string | null
    website?: StringNullableWithAggregatesFilter<"Client"> | string | null
    address?: StringNullableWithAggregatesFilter<"Client"> | string | null
    billingAddress?: StringNullableWithAggregatesFilter<"Client"> | string | null
    taxId?: StringNullableWithAggregatesFilter<"Client"> | string | null
    contactPerson?: StringNullableWithAggregatesFilter<"Client"> | string | null
    contactEmail?: StringNullableWithAggregatesFilter<"Client"> | string | null
    contactPhone?: StringNullableWithAggregatesFilter<"Client"> | string | null
    industryId?: StringNullableWithAggregatesFilter<"Client"> | string | null
    status?: EnumBaseStatusWithAggregatesFilter<"Client"> | $Enums.BaseStatus
    preferredContactMethod?: EnumContactMethodNullableWithAggregatesFilter<"Client"> | $Enums.ContactMethod | null
    timezone?: StringNullableWithAggregatesFilter<"Client"> | string | null
    isVerified?: BoolWithAggregatesFilter<"Client"> | boolean
    notes?: StringNullableWithAggregatesFilter<"Client"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Client">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Client"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Client"> | Date | string
  }

  export type IndustryWhereInput = {
    AND?: IndustryWhereInput | IndustryWhereInput[]
    OR?: IndustryWhereInput[]
    NOT?: IndustryWhereInput | IndustryWhereInput[]
    id?: StringFilter<"Industry"> | string
    name?: StringFilter<"Industry"> | string
    code?: StringNullableFilter<"Industry"> | string | null
    description?: StringNullableFilter<"Industry"> | string | null
    parentId?: StringNullableFilter<"Industry"> | string | null
    externalId?: StringNullableFilter<"Industry"> | string | null
    metadata?: JsonNullableFilter<"Industry">
    deletedAt?: DateTimeNullableFilter<"Industry"> | Date | string | null
    createdAt?: DateTimeFilter<"Industry"> | Date | string
    updatedAt?: DateTimeFilter<"Industry"> | Date | string
    parent?: XOR<IndustryNullableScalarRelationFilter, IndustryWhereInput> | null
    children?: IndustryListRelationFilter
    clients?: ClientListRelationFilter
  }

  export type IndustryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    externalId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: IndustryOrderByWithRelationInput
    children?: IndustryOrderByRelationAggregateInput
    clients?: ClientOrderByRelationAggregateInput
  }

  export type IndustryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: IndustryWhereInput | IndustryWhereInput[]
    OR?: IndustryWhereInput[]
    NOT?: IndustryWhereInput | IndustryWhereInput[]
    description?: StringNullableFilter<"Industry"> | string | null
    parentId?: StringNullableFilter<"Industry"> | string | null
    externalId?: StringNullableFilter<"Industry"> | string | null
    metadata?: JsonNullableFilter<"Industry">
    deletedAt?: DateTimeNullableFilter<"Industry"> | Date | string | null
    createdAt?: DateTimeFilter<"Industry"> | Date | string
    updatedAt?: DateTimeFilter<"Industry"> | Date | string
    parent?: XOR<IndustryNullableScalarRelationFilter, IndustryWhereInput> | null
    children?: IndustryListRelationFilter
    clients?: ClientListRelationFilter
  }, "id" | "name" | "code">

  export type IndustryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    externalId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IndustryCountOrderByAggregateInput
    _max?: IndustryMaxOrderByAggregateInput
    _min?: IndustryMinOrderByAggregateInput
  }

  export type IndustryScalarWhereWithAggregatesInput = {
    AND?: IndustryScalarWhereWithAggregatesInput | IndustryScalarWhereWithAggregatesInput[]
    OR?: IndustryScalarWhereWithAggregatesInput[]
    NOT?: IndustryScalarWhereWithAggregatesInput | IndustryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Industry"> | string
    name?: StringWithAggregatesFilter<"Industry"> | string
    code?: StringNullableWithAggregatesFilter<"Industry"> | string | null
    description?: StringNullableWithAggregatesFilter<"Industry"> | string | null
    parentId?: StringNullableWithAggregatesFilter<"Industry"> | string | null
    externalId?: StringNullableWithAggregatesFilter<"Industry"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Industry">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Industry"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Industry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Industry"> | Date | string
  }

  export type ContractWhereInput = {
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    id?: StringFilter<"Contract"> | string
    clientId?: StringFilter<"Contract"> | string
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    renewalDate?: DateTimeNullableFilter<"Contract"> | Date | string | null
    billingRate?: FloatFilter<"Contract"> | number
    isRenewable?: BoolFilter<"Contract"> | boolean
    isAutoRenew?: BoolFilter<"Contract"> | boolean
    paymentStatus?: EnumPaymentStatusFilter<"Contract"> | $Enums.PaymentStatus
    paymentFrequency?: StringNullableFilter<"Contract"> | string | null
    paymentTerms?: StringNullableFilter<"Contract"> | string | null
    currency?: StringNullableFilter<"Contract"> | string | null
    lastBillingDate?: DateTimeNullableFilter<"Contract"> | Date | string | null
    nextBillingDate?: DateTimeNullableFilter<"Contract"> | Date | string | null
    documentUrl?: StringNullableFilter<"Contract"> | string | null
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    signedBy?: StringNullableFilter<"Contract"> | string | null
    signedAt?: DateTimeNullableFilter<"Contract"> | Date | string | null
    terminationReason?: StringNullableFilter<"Contract"> | string | null
    notes?: StringNullableFilter<"Contract"> | string | null
    deletedAt?: DateTimeNullableFilter<"Contract"> | Date | string | null
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    documents?: DocumentListRelationFilter
    kpis?: KPIListRelationFilter
    kpiAssignments?: KPIAssignmentListRelationFilter
    serviceAssignments?: ServiceAssignmentListRelationFilter
  }

  export type ContractOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    renewalDate?: SortOrderInput | SortOrder
    billingRate?: SortOrder
    isRenewable?: SortOrder
    isAutoRenew?: SortOrder
    paymentStatus?: SortOrder
    paymentFrequency?: SortOrderInput | SortOrder
    paymentTerms?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    lastBillingDate?: SortOrderInput | SortOrder
    nextBillingDate?: SortOrderInput | SortOrder
    documentUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    signedBy?: SortOrderInput | SortOrder
    signedAt?: SortOrderInput | SortOrder
    terminationReason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: ClientOrderByWithRelationInput
    documents?: DocumentOrderByRelationAggregateInput
    kpis?: KPIOrderByRelationAggregateInput
    kpiAssignments?: KPIAssignmentOrderByRelationAggregateInput
    serviceAssignments?: ServiceAssignmentOrderByRelationAggregateInput
  }

  export type ContractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContractWhereInput | ContractWhereInput[]
    OR?: ContractWhereInput[]
    NOT?: ContractWhereInput | ContractWhereInput[]
    clientId?: StringFilter<"Contract"> | string
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    renewalDate?: DateTimeNullableFilter<"Contract"> | Date | string | null
    billingRate?: FloatFilter<"Contract"> | number
    isRenewable?: BoolFilter<"Contract"> | boolean
    isAutoRenew?: BoolFilter<"Contract"> | boolean
    paymentStatus?: EnumPaymentStatusFilter<"Contract"> | $Enums.PaymentStatus
    paymentFrequency?: StringNullableFilter<"Contract"> | string | null
    paymentTerms?: StringNullableFilter<"Contract"> | string | null
    currency?: StringNullableFilter<"Contract"> | string | null
    lastBillingDate?: DateTimeNullableFilter<"Contract"> | Date | string | null
    nextBillingDate?: DateTimeNullableFilter<"Contract"> | Date | string | null
    documentUrl?: StringNullableFilter<"Contract"> | string | null
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    signedBy?: StringNullableFilter<"Contract"> | string | null
    signedAt?: DateTimeNullableFilter<"Contract"> | Date | string | null
    terminationReason?: StringNullableFilter<"Contract"> | string | null
    notes?: StringNullableFilter<"Contract"> | string | null
    deletedAt?: DateTimeNullableFilter<"Contract"> | Date | string | null
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    documents?: DocumentListRelationFilter
    kpis?: KPIListRelationFilter
    kpiAssignments?: KPIAssignmentListRelationFilter
    serviceAssignments?: ServiceAssignmentListRelationFilter
  }, "id">

  export type ContractOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    renewalDate?: SortOrderInput | SortOrder
    billingRate?: SortOrder
    isRenewable?: SortOrder
    isAutoRenew?: SortOrder
    paymentStatus?: SortOrder
    paymentFrequency?: SortOrderInput | SortOrder
    paymentTerms?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    lastBillingDate?: SortOrderInput | SortOrder
    nextBillingDate?: SortOrderInput | SortOrder
    documentUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    signedBy?: SortOrderInput | SortOrder
    signedAt?: SortOrderInput | SortOrder
    terminationReason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContractCountOrderByAggregateInput
    _avg?: ContractAvgOrderByAggregateInput
    _max?: ContractMaxOrderByAggregateInput
    _min?: ContractMinOrderByAggregateInput
    _sum?: ContractSumOrderByAggregateInput
  }

  export type ContractScalarWhereWithAggregatesInput = {
    AND?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    OR?: ContractScalarWhereWithAggregatesInput[]
    NOT?: ContractScalarWhereWithAggregatesInput | ContractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contract"> | string
    clientId?: StringWithAggregatesFilter<"Contract"> | string
    startDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    renewalDate?: DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
    billingRate?: FloatWithAggregatesFilter<"Contract"> | number
    isRenewable?: BoolWithAggregatesFilter<"Contract"> | boolean
    isAutoRenew?: BoolWithAggregatesFilter<"Contract"> | boolean
    paymentStatus?: EnumPaymentStatusWithAggregatesFilter<"Contract"> | $Enums.PaymentStatus
    paymentFrequency?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    paymentTerms?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    currency?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    lastBillingDate?: DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
    nextBillingDate?: DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
    documentUrl?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    status?: EnumContractStatusWithAggregatesFilter<"Contract"> | $Enums.ContractStatus
    signedBy?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    signedAt?: DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
    terminationReason?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Contract"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Contract"> | Date | string
  }

  export type ServiceCategoryWhereInput = {
    AND?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    OR?: ServiceCategoryWhereInput[]
    NOT?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    id?: StringFilter<"ServiceCategory"> | string
    name?: StringFilter<"ServiceCategory"> | string
    description?: StringNullableFilter<"ServiceCategory"> | string | null
    metadata?: JsonNullableFilter<"ServiceCategory">
    deletedAt?: DateTimeNullableFilter<"ServiceCategory"> | Date | string | null
    createdAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    services?: ServiceListRelationFilter
  }

  export type ServiceCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    services?: ServiceOrderByRelationAggregateInput
  }

  export type ServiceCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    OR?: ServiceCategoryWhereInput[]
    NOT?: ServiceCategoryWhereInput | ServiceCategoryWhereInput[]
    description?: StringNullableFilter<"ServiceCategory"> | string | null
    metadata?: JsonNullableFilter<"ServiceCategory">
    deletedAt?: DateTimeNullableFilter<"ServiceCategory"> | Date | string | null
    createdAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceCategory"> | Date | string
    services?: ServiceListRelationFilter
  }, "id" | "name">

  export type ServiceCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceCategoryCountOrderByAggregateInput
    _max?: ServiceCategoryMaxOrderByAggregateInput
    _min?: ServiceCategoryMinOrderByAggregateInput
  }

  export type ServiceCategoryScalarWhereWithAggregatesInput = {
    AND?: ServiceCategoryScalarWhereWithAggregatesInput | ServiceCategoryScalarWhereWithAggregatesInput[]
    OR?: ServiceCategoryScalarWhereWithAggregatesInput[]
    NOT?: ServiceCategoryScalarWhereWithAggregatesInput | ServiceCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServiceCategory"> | string
    name?: StringWithAggregatesFilter<"ServiceCategory"> | string
    description?: StringNullableWithAggregatesFilter<"ServiceCategory"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"ServiceCategory">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ServiceCategory"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ServiceCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServiceCategory"> | Date | string
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: StringFilter<"Service"> | string
    name?: StringFilter<"Service"> | string
    description?: StringNullableFilter<"Service"> | string | null
    categoryId?: StringFilter<"Service"> | string
    status?: EnumBaseStatusFilter<"Service"> | $Enums.BaseStatus
    duration?: IntNullableFilter<"Service"> | number | null
    capacity?: IntNullableFilter<"Service"> | number | null
    prerequisites?: StringNullableFilter<"Service"> | string | null
    isPublic?: BoolFilter<"Service"> | boolean
    price?: FloatNullableFilter<"Service"> | number | null
    metadata?: JsonNullableFilter<"Service">
    deletedAt?: DateTimeNullableFilter<"Service"> | Date | string | null
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    serviceProviderId?: StringNullableFilter<"Service"> | string | null
    category?: XOR<ServiceCategoryScalarRelationFilter, ServiceCategoryWhereInput>
    assignments?: ServiceAssignmentListRelationFilter
    ServiceProvider?: XOR<ServiceProviderNullableScalarRelationFilter, ServiceProviderWhereInput> | null
    ServiceSession?: ServiceSessionListRelationFilter
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    status?: SortOrder
    duration?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    prerequisites?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    price?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceProviderId?: SortOrderInput | SortOrder
    category?: ServiceCategoryOrderByWithRelationInput
    assignments?: ServiceAssignmentOrderByRelationAggregateInput
    ServiceProvider?: ServiceProviderOrderByWithRelationInput
    ServiceSession?: ServiceSessionOrderByRelationAggregateInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    name?: StringFilter<"Service"> | string
    description?: StringNullableFilter<"Service"> | string | null
    categoryId?: StringFilter<"Service"> | string
    status?: EnumBaseStatusFilter<"Service"> | $Enums.BaseStatus
    duration?: IntNullableFilter<"Service"> | number | null
    capacity?: IntNullableFilter<"Service"> | number | null
    prerequisites?: StringNullableFilter<"Service"> | string | null
    isPublic?: BoolFilter<"Service"> | boolean
    price?: FloatNullableFilter<"Service"> | number | null
    metadata?: JsonNullableFilter<"Service">
    deletedAt?: DateTimeNullableFilter<"Service"> | Date | string | null
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    serviceProviderId?: StringNullableFilter<"Service"> | string | null
    category?: XOR<ServiceCategoryScalarRelationFilter, ServiceCategoryWhereInput>
    assignments?: ServiceAssignmentListRelationFilter
    ServiceProvider?: XOR<ServiceProviderNullableScalarRelationFilter, ServiceProviderWhereInput> | null
    ServiceSession?: ServiceSessionListRelationFilter
  }, "id">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    status?: SortOrder
    duration?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    prerequisites?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    price?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceProviderId?: SortOrderInput | SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Service"> | string
    name?: StringWithAggregatesFilter<"Service"> | string
    description?: StringNullableWithAggregatesFilter<"Service"> | string | null
    categoryId?: StringWithAggregatesFilter<"Service"> | string
    status?: EnumBaseStatusWithAggregatesFilter<"Service"> | $Enums.BaseStatus
    duration?: IntNullableWithAggregatesFilter<"Service"> | number | null
    capacity?: IntNullableWithAggregatesFilter<"Service"> | number | null
    prerequisites?: StringNullableWithAggregatesFilter<"Service"> | string | null
    isPublic?: BoolWithAggregatesFilter<"Service"> | boolean
    price?: FloatNullableWithAggregatesFilter<"Service"> | number | null
    metadata?: JsonNullableWithAggregatesFilter<"Service">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Service"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    serviceProviderId?: StringNullableWithAggregatesFilter<"Service"> | string | null
  }

  export type ServiceAssignmentWhereInput = {
    AND?: ServiceAssignmentWhereInput | ServiceAssignmentWhereInput[]
    OR?: ServiceAssignmentWhereInput[]
    NOT?: ServiceAssignmentWhereInput | ServiceAssignmentWhereInput[]
    id?: StringFilter<"ServiceAssignment"> | string
    serviceId?: StringFilter<"ServiceAssignment"> | string
    contractId?: StringFilter<"ServiceAssignment"> | string
    status?: EnumAssignmentStatusFilter<"ServiceAssignment"> | $Enums.AssignmentStatus
    startDate?: DateTimeFilter<"ServiceAssignment"> | Date | string
    endDate?: DateTimeNullableFilter<"ServiceAssignment"> | Date | string | null
    frequency?: EnumFrequencyFilter<"ServiceAssignment"> | $Enums.Frequency
    metadata?: JsonNullableFilter<"ServiceAssignment">
    deletedAt?: DateTimeNullableFilter<"ServiceAssignment"> | Date | string | null
    createdAt?: DateTimeFilter<"ServiceAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceAssignment"> | Date | string
    clientId?: StringNullableFilter<"ServiceAssignment"> | string | null
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }

  export type ServiceAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    serviceId?: SortOrder
    contractId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    frequency?: SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrderInput | SortOrder
    service?: ServiceOrderByWithRelationInput
    contract?: ContractOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type ServiceAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceAssignmentWhereInput | ServiceAssignmentWhereInput[]
    OR?: ServiceAssignmentWhereInput[]
    NOT?: ServiceAssignmentWhereInput | ServiceAssignmentWhereInput[]
    serviceId?: StringFilter<"ServiceAssignment"> | string
    contractId?: StringFilter<"ServiceAssignment"> | string
    status?: EnumAssignmentStatusFilter<"ServiceAssignment"> | $Enums.AssignmentStatus
    startDate?: DateTimeFilter<"ServiceAssignment"> | Date | string
    endDate?: DateTimeNullableFilter<"ServiceAssignment"> | Date | string | null
    frequency?: EnumFrequencyFilter<"ServiceAssignment"> | $Enums.Frequency
    metadata?: JsonNullableFilter<"ServiceAssignment">
    deletedAt?: DateTimeNullableFilter<"ServiceAssignment"> | Date | string | null
    createdAt?: DateTimeFilter<"ServiceAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceAssignment"> | Date | string
    clientId?: StringNullableFilter<"ServiceAssignment"> | string | null
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }, "id">

  export type ServiceAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    serviceId?: SortOrder
    contractId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    frequency?: SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrderInput | SortOrder
    _count?: ServiceAssignmentCountOrderByAggregateInput
    _max?: ServiceAssignmentMaxOrderByAggregateInput
    _min?: ServiceAssignmentMinOrderByAggregateInput
  }

  export type ServiceAssignmentScalarWhereWithAggregatesInput = {
    AND?: ServiceAssignmentScalarWhereWithAggregatesInput | ServiceAssignmentScalarWhereWithAggregatesInput[]
    OR?: ServiceAssignmentScalarWhereWithAggregatesInput[]
    NOT?: ServiceAssignmentScalarWhereWithAggregatesInput | ServiceAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServiceAssignment"> | string
    serviceId?: StringWithAggregatesFilter<"ServiceAssignment"> | string
    contractId?: StringWithAggregatesFilter<"ServiceAssignment"> | string
    status?: EnumAssignmentStatusWithAggregatesFilter<"ServiceAssignment"> | $Enums.AssignmentStatus
    startDate?: DateTimeWithAggregatesFilter<"ServiceAssignment"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"ServiceAssignment"> | Date | string | null
    frequency?: EnumFrequencyWithAggregatesFilter<"ServiceAssignment"> | $Enums.Frequency
    metadata?: JsonNullableWithAggregatesFilter<"ServiceAssignment">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ServiceAssignment"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ServiceAssignment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServiceAssignment"> | Date | string
    clientId?: StringNullableWithAggregatesFilter<"ServiceAssignment"> | string | null
  }

  export type ServiceProviderWhereInput = {
    AND?: ServiceProviderWhereInput | ServiceProviderWhereInput[]
    OR?: ServiceProviderWhereInput[]
    NOT?: ServiceProviderWhereInput | ServiceProviderWhereInput[]
    id?: StringFilter<"ServiceProvider"> | string
    name?: StringFilter<"ServiceProvider"> | string
    type?: EnumServiceProviderTypeFilter<"ServiceProvider"> | $Enums.ServiceProviderType
    contactEmail?: StringNullableFilter<"ServiceProvider"> | string | null
    contactPhone?: StringNullableFilter<"ServiceProvider"> | string | null
    location?: StringNullableFilter<"ServiceProvider"> | string | null
    qualifications?: StringNullableListFilter<"ServiceProvider">
    specializations?: StringNullableListFilter<"ServiceProvider">
    availability?: JsonNullableFilter<"ServiceProvider">
    rating?: FloatNullableFilter<"ServiceProvider"> | number | null
    isVerified?: BoolFilter<"ServiceProvider"> | boolean
    metadata?: JsonNullableFilter<"ServiceProvider">
    deletedAt?: DateTimeNullableFilter<"ServiceProvider"> | Date | string | null
    status?: EnumWorkStatusFilter<"ServiceProvider"> | $Enums.WorkStatus
    createdAt?: DateTimeFilter<"ServiceProvider"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceProvider"> | Date | string
    services?: ServiceListRelationFilter
    sessions?: ServiceSessionListRelationFilter
  }

  export type ServiceProviderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    qualifications?: SortOrder
    specializations?: SortOrder
    availability?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    services?: ServiceOrderByRelationAggregateInput
    sessions?: ServiceSessionOrderByRelationAggregateInput
  }

  export type ServiceProviderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceProviderWhereInput | ServiceProviderWhereInput[]
    OR?: ServiceProviderWhereInput[]
    NOT?: ServiceProviderWhereInput | ServiceProviderWhereInput[]
    name?: StringFilter<"ServiceProvider"> | string
    type?: EnumServiceProviderTypeFilter<"ServiceProvider"> | $Enums.ServiceProviderType
    contactEmail?: StringNullableFilter<"ServiceProvider"> | string | null
    contactPhone?: StringNullableFilter<"ServiceProvider"> | string | null
    location?: StringNullableFilter<"ServiceProvider"> | string | null
    qualifications?: StringNullableListFilter<"ServiceProvider">
    specializations?: StringNullableListFilter<"ServiceProvider">
    availability?: JsonNullableFilter<"ServiceProvider">
    rating?: FloatNullableFilter<"ServiceProvider"> | number | null
    isVerified?: BoolFilter<"ServiceProvider"> | boolean
    metadata?: JsonNullableFilter<"ServiceProvider">
    deletedAt?: DateTimeNullableFilter<"ServiceProvider"> | Date | string | null
    status?: EnumWorkStatusFilter<"ServiceProvider"> | $Enums.WorkStatus
    createdAt?: DateTimeFilter<"ServiceProvider"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceProvider"> | Date | string
    services?: ServiceListRelationFilter
    sessions?: ServiceSessionListRelationFilter
  }, "id">

  export type ServiceProviderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    contactEmail?: SortOrderInput | SortOrder
    contactPhone?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    qualifications?: SortOrder
    specializations?: SortOrder
    availability?: SortOrderInput | SortOrder
    rating?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceProviderCountOrderByAggregateInput
    _avg?: ServiceProviderAvgOrderByAggregateInput
    _max?: ServiceProviderMaxOrderByAggregateInput
    _min?: ServiceProviderMinOrderByAggregateInput
    _sum?: ServiceProviderSumOrderByAggregateInput
  }

  export type ServiceProviderScalarWhereWithAggregatesInput = {
    AND?: ServiceProviderScalarWhereWithAggregatesInput | ServiceProviderScalarWhereWithAggregatesInput[]
    OR?: ServiceProviderScalarWhereWithAggregatesInput[]
    NOT?: ServiceProviderScalarWhereWithAggregatesInput | ServiceProviderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServiceProvider"> | string
    name?: StringWithAggregatesFilter<"ServiceProvider"> | string
    type?: EnumServiceProviderTypeWithAggregatesFilter<"ServiceProvider"> | $Enums.ServiceProviderType
    contactEmail?: StringNullableWithAggregatesFilter<"ServiceProvider"> | string | null
    contactPhone?: StringNullableWithAggregatesFilter<"ServiceProvider"> | string | null
    location?: StringNullableWithAggregatesFilter<"ServiceProvider"> | string | null
    qualifications?: StringNullableListFilter<"ServiceProvider">
    specializations?: StringNullableListFilter<"ServiceProvider">
    availability?: JsonNullableWithAggregatesFilter<"ServiceProvider">
    rating?: FloatNullableWithAggregatesFilter<"ServiceProvider"> | number | null
    isVerified?: BoolWithAggregatesFilter<"ServiceProvider"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"ServiceProvider">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ServiceProvider"> | Date | string | null
    status?: EnumWorkStatusWithAggregatesFilter<"ServiceProvider"> | $Enums.WorkStatus
    createdAt?: DateTimeWithAggregatesFilter<"ServiceProvider"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServiceProvider"> | Date | string
  }

  export type ServiceSessionWhereInput = {
    AND?: ServiceSessionWhereInput | ServiceSessionWhereInput[]
    OR?: ServiceSessionWhereInput[]
    NOT?: ServiceSessionWhereInput | ServiceSessionWhereInput[]
    id?: StringFilter<"ServiceSession"> | string
    serviceId?: StringFilter<"ServiceSession"> | string
    providerId?: StringFilter<"ServiceSession"> | string
    scheduledAt?: DateTimeFilter<"ServiceSession"> | Date | string
    completedAt?: DateTimeNullableFilter<"ServiceSession"> | Date | string | null
    status?: EnumSessionStatusFilter<"ServiceSession"> | $Enums.SessionStatus
    notes?: StringNullableFilter<"ServiceSession"> | string | null
    feedback?: StringNullableFilter<"ServiceSession"> | string | null
    duration?: IntNullableFilter<"ServiceSession"> | number | null
    location?: StringNullableFilter<"ServiceSession"> | string | null
    cancellationReason?: StringNullableFilter<"ServiceSession"> | string | null
    rescheduleCount?: IntFilter<"ServiceSession"> | number
    isGroupSession?: BoolFilter<"ServiceSession"> | boolean
    metadata?: JsonNullableFilter<"ServiceSession">
    deletedAt?: DateTimeNullableFilter<"ServiceSession"> | Date | string | null
    staffId?: StringNullableFilter<"ServiceSession"> | string | null
    beneficiaryId?: StringNullableFilter<"ServiceSession"> | string | null
    createdAt?: DateTimeFilter<"ServiceSession"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceSession"> | Date | string
    staff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    beneficiary?: XOR<BeneficiaryNullableScalarRelationFilter, BeneficiaryWhereInput> | null
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    provider?: XOR<ServiceProviderScalarRelationFilter, ServiceProviderWhereInput>
    SessionFeedback?: SessionFeedbackListRelationFilter
  }

  export type ServiceSessionOrderByWithRelationInput = {
    id?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    scheduledAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    cancellationReason?: SortOrderInput | SortOrder
    rescheduleCount?: SortOrder
    isGroupSession?: SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    staffId?: SortOrderInput | SortOrder
    beneficiaryId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staff?: StaffOrderByWithRelationInput
    beneficiary?: BeneficiaryOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
    provider?: ServiceProviderOrderByWithRelationInput
    SessionFeedback?: SessionFeedbackOrderByRelationAggregateInput
  }

  export type ServiceSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServiceSessionWhereInput | ServiceSessionWhereInput[]
    OR?: ServiceSessionWhereInput[]
    NOT?: ServiceSessionWhereInput | ServiceSessionWhereInput[]
    serviceId?: StringFilter<"ServiceSession"> | string
    providerId?: StringFilter<"ServiceSession"> | string
    scheduledAt?: DateTimeFilter<"ServiceSession"> | Date | string
    completedAt?: DateTimeNullableFilter<"ServiceSession"> | Date | string | null
    status?: EnumSessionStatusFilter<"ServiceSession"> | $Enums.SessionStatus
    notes?: StringNullableFilter<"ServiceSession"> | string | null
    feedback?: StringNullableFilter<"ServiceSession"> | string | null
    duration?: IntNullableFilter<"ServiceSession"> | number | null
    location?: StringNullableFilter<"ServiceSession"> | string | null
    cancellationReason?: StringNullableFilter<"ServiceSession"> | string | null
    rescheduleCount?: IntFilter<"ServiceSession"> | number
    isGroupSession?: BoolFilter<"ServiceSession"> | boolean
    metadata?: JsonNullableFilter<"ServiceSession">
    deletedAt?: DateTimeNullableFilter<"ServiceSession"> | Date | string | null
    staffId?: StringNullableFilter<"ServiceSession"> | string | null
    beneficiaryId?: StringNullableFilter<"ServiceSession"> | string | null
    createdAt?: DateTimeFilter<"ServiceSession"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceSession"> | Date | string
    staff?: XOR<StaffNullableScalarRelationFilter, StaffWhereInput> | null
    beneficiary?: XOR<BeneficiaryNullableScalarRelationFilter, BeneficiaryWhereInput> | null
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    provider?: XOR<ServiceProviderScalarRelationFilter, ServiceProviderWhereInput>
    SessionFeedback?: SessionFeedbackListRelationFilter
  }, "id">

  export type ServiceSessionOrderByWithAggregationInput = {
    id?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    scheduledAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    cancellationReason?: SortOrderInput | SortOrder
    rescheduleCount?: SortOrder
    isGroupSession?: SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    staffId?: SortOrderInput | SortOrder
    beneficiaryId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceSessionCountOrderByAggregateInput
    _avg?: ServiceSessionAvgOrderByAggregateInput
    _max?: ServiceSessionMaxOrderByAggregateInput
    _min?: ServiceSessionMinOrderByAggregateInput
    _sum?: ServiceSessionSumOrderByAggregateInput
  }

  export type ServiceSessionScalarWhereWithAggregatesInput = {
    AND?: ServiceSessionScalarWhereWithAggregatesInput | ServiceSessionScalarWhereWithAggregatesInput[]
    OR?: ServiceSessionScalarWhereWithAggregatesInput[]
    NOT?: ServiceSessionScalarWhereWithAggregatesInput | ServiceSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServiceSession"> | string
    serviceId?: StringWithAggregatesFilter<"ServiceSession"> | string
    providerId?: StringWithAggregatesFilter<"ServiceSession"> | string
    scheduledAt?: DateTimeWithAggregatesFilter<"ServiceSession"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"ServiceSession"> | Date | string | null
    status?: EnumSessionStatusWithAggregatesFilter<"ServiceSession"> | $Enums.SessionStatus
    notes?: StringNullableWithAggregatesFilter<"ServiceSession"> | string | null
    feedback?: StringNullableWithAggregatesFilter<"ServiceSession"> | string | null
    duration?: IntNullableWithAggregatesFilter<"ServiceSession"> | number | null
    location?: StringNullableWithAggregatesFilter<"ServiceSession"> | string | null
    cancellationReason?: StringNullableWithAggregatesFilter<"ServiceSession"> | string | null
    rescheduleCount?: IntWithAggregatesFilter<"ServiceSession"> | number
    isGroupSession?: BoolWithAggregatesFilter<"ServiceSession"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"ServiceSession">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ServiceSession"> | Date | string | null
    staffId?: StringNullableWithAggregatesFilter<"ServiceSession"> | string | null
    beneficiaryId?: StringNullableWithAggregatesFilter<"ServiceSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ServiceSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServiceSession"> | Date | string
  }

  export type SessionFeedbackWhereInput = {
    AND?: SessionFeedbackWhereInput | SessionFeedbackWhereInput[]
    OR?: SessionFeedbackWhereInput[]
    NOT?: SessionFeedbackWhereInput | SessionFeedbackWhereInput[]
    id?: StringFilter<"SessionFeedback"> | string
    sessionId?: StringFilter<"SessionFeedback"> | string
    rating?: IntFilter<"SessionFeedback"> | number
    comment?: StringNullableFilter<"SessionFeedback"> | string | null
    metadata?: JsonNullableFilter<"SessionFeedback">
    deletedAt?: DateTimeNullableFilter<"SessionFeedback"> | Date | string | null
    createdAt?: DateTimeFilter<"SessionFeedback"> | Date | string
    session?: XOR<ServiceSessionScalarRelationFilter, ServiceSessionWhereInput>
  }

  export type SessionFeedbackOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    session?: ServiceSessionOrderByWithRelationInput
  }

  export type SessionFeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionFeedbackWhereInput | SessionFeedbackWhereInput[]
    OR?: SessionFeedbackWhereInput[]
    NOT?: SessionFeedbackWhereInput | SessionFeedbackWhereInput[]
    sessionId?: StringFilter<"SessionFeedback"> | string
    rating?: IntFilter<"SessionFeedback"> | number
    comment?: StringNullableFilter<"SessionFeedback"> | string | null
    metadata?: JsonNullableFilter<"SessionFeedback">
    deletedAt?: DateTimeNullableFilter<"SessionFeedback"> | Date | string | null
    createdAt?: DateTimeFilter<"SessionFeedback"> | Date | string
    session?: XOR<ServiceSessionScalarRelationFilter, ServiceSessionWhereInput>
  }, "id">

  export type SessionFeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SessionFeedbackCountOrderByAggregateInput
    _avg?: SessionFeedbackAvgOrderByAggregateInput
    _max?: SessionFeedbackMaxOrderByAggregateInput
    _min?: SessionFeedbackMinOrderByAggregateInput
    _sum?: SessionFeedbackSumOrderByAggregateInput
  }

  export type SessionFeedbackScalarWhereWithAggregatesInput = {
    AND?: SessionFeedbackScalarWhereWithAggregatesInput | SessionFeedbackScalarWhereWithAggregatesInput[]
    OR?: SessionFeedbackScalarWhereWithAggregatesInput[]
    NOT?: SessionFeedbackScalarWhereWithAggregatesInput | SessionFeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionFeedback"> | string
    sessionId?: StringWithAggregatesFilter<"SessionFeedback"> | string
    rating?: IntWithAggregatesFilter<"SessionFeedback"> | number
    comment?: StringNullableWithAggregatesFilter<"SessionFeedback"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"SessionFeedback">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"SessionFeedback"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SessionFeedback"> | Date | string
  }

  export type StaffWhereInput = {
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    id?: StringFilter<"Staff"> | string
    profileId?: StringFilter<"Staff"> | string
    clientId?: StringFilter<"Staff"> | string
    role?: EnumStaffRoleFilter<"Staff"> | $Enums.StaffRole
    startDate?: DateTimeFilter<"Staff"> | Date | string
    endDate?: DateTimeNullableFilter<"Staff"> | Date | string | null
    status?: EnumWorkStatusFilter<"Staff"> | $Enums.WorkStatus
    qualifications?: StringNullableListFilter<"Staff">
    specializations?: StringNullableListFilter<"Staff">
    preferredWorkingHours?: JsonNullableFilter<"Staff">
    emergencyContactName?: StringNullableFilter<"Staff"> | string | null
    emergencyContactPhone?: StringNullableFilter<"Staff"> | string | null
    emergencyContactEmail?: StringNullableFilter<"Staff"> | string | null
    metadata?: JsonNullableFilter<"Staff">
    deletedAt?: DateTimeNullableFilter<"Staff"> | Date | string | null
    userId?: StringFilter<"Staff"> | string
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    beneficiaries?: BeneficiaryListRelationFilter
    ServiceSession?: ServiceSessionListRelationFilter
  }

  export type StaffOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    clientId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrder
    qualifications?: SortOrder
    specializations?: SortOrder
    preferredWorkingHours?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    emergencyContactEmail?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
    beneficiaries?: BeneficiaryOrderByRelationAggregateInput
    ServiceSession?: ServiceSessionOrderByRelationAggregateInput
  }

  export type StaffWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    profileId?: string
    AND?: StaffWhereInput | StaffWhereInput[]
    OR?: StaffWhereInput[]
    NOT?: StaffWhereInput | StaffWhereInput[]
    clientId?: StringFilter<"Staff"> | string
    role?: EnumStaffRoleFilter<"Staff"> | $Enums.StaffRole
    startDate?: DateTimeFilter<"Staff"> | Date | string
    endDate?: DateTimeNullableFilter<"Staff"> | Date | string | null
    status?: EnumWorkStatusFilter<"Staff"> | $Enums.WorkStatus
    qualifications?: StringNullableListFilter<"Staff">
    specializations?: StringNullableListFilter<"Staff">
    preferredWorkingHours?: JsonNullableFilter<"Staff">
    emergencyContactName?: StringNullableFilter<"Staff"> | string | null
    emergencyContactPhone?: StringNullableFilter<"Staff"> | string | null
    emergencyContactEmail?: StringNullableFilter<"Staff"> | string | null
    metadata?: JsonNullableFilter<"Staff">
    deletedAt?: DateTimeNullableFilter<"Staff"> | Date | string | null
    userId?: StringFilter<"Staff"> | string
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    client?: XOR<ClientScalarRelationFilter, ClientWhereInput>
    beneficiaries?: BeneficiaryListRelationFilter
    ServiceSession?: ServiceSessionListRelationFilter
  }, "id" | "profileId">

  export type StaffOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    clientId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    status?: SortOrder
    qualifications?: SortOrder
    specializations?: SortOrder
    preferredWorkingHours?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    emergencyContactEmail?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffCountOrderByAggregateInput
    _max?: StaffMaxOrderByAggregateInput
    _min?: StaffMinOrderByAggregateInput
  }

  export type StaffScalarWhereWithAggregatesInput = {
    AND?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    OR?: StaffScalarWhereWithAggregatesInput[]
    NOT?: StaffScalarWhereWithAggregatesInput | StaffScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Staff"> | string
    profileId?: StringWithAggregatesFilter<"Staff"> | string
    clientId?: StringWithAggregatesFilter<"Staff"> | string
    role?: EnumStaffRoleWithAggregatesFilter<"Staff"> | $Enums.StaffRole
    startDate?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Staff"> | Date | string | null
    status?: EnumWorkStatusWithAggregatesFilter<"Staff"> | $Enums.WorkStatus
    qualifications?: StringNullableListFilter<"Staff">
    specializations?: StringNullableListFilter<"Staff">
    preferredWorkingHours?: JsonNullableWithAggregatesFilter<"Staff">
    emergencyContactName?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    emergencyContactPhone?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    emergencyContactEmail?: StringNullableWithAggregatesFilter<"Staff"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Staff">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Staff"> | Date | string | null
    userId?: StringWithAggregatesFilter<"Staff"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Staff"> | Date | string
  }

  export type BeneficiaryWhereInput = {
    AND?: BeneficiaryWhereInput | BeneficiaryWhereInput[]
    OR?: BeneficiaryWhereInput[]
    NOT?: BeneficiaryWhereInput | BeneficiaryWhereInput[]
    id?: StringFilter<"Beneficiary"> | string
    profileId?: StringFilter<"Beneficiary"> | string
    relation?: EnumRelationTypeFilter<"Beneficiary"> | $Enums.RelationType
    isStaffLink?: BoolFilter<"Beneficiary"> | boolean
    staffId?: StringFilter<"Beneficiary"> | string
    guardianId?: StringNullableFilter<"Beneficiary"> | string | null
    userLinkId?: StringNullableFilter<"Beneficiary"> | string | null
    status?: EnumBaseStatusFilter<"Beneficiary"> | $Enums.BaseStatus
    lastServiceDate?: DateTimeNullableFilter<"Beneficiary"> | Date | string | null
    preferredLanguage?: EnumLanguageNullableFilter<"Beneficiary"> | $Enums.Language | null
    notes?: StringNullableFilter<"Beneficiary"> | string | null
    deletedAt?: DateTimeNullableFilter<"Beneficiary"> | Date | string | null
    createdAt?: DateTimeFilter<"Beneficiary"> | Date | string
    updatedAt?: DateTimeFilter<"Beneficiary"> | Date | string
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    staff?: XOR<StaffScalarRelationFilter, StaffWhereInput>
    guardian?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    userLink?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    ServiceSession?: ServiceSessionListRelationFilter
  }

  export type BeneficiaryOrderByWithRelationInput = {
    id?: SortOrder
    profileId?: SortOrder
    relation?: SortOrder
    isStaffLink?: SortOrder
    staffId?: SortOrder
    guardianId?: SortOrderInput | SortOrder
    userLinkId?: SortOrderInput | SortOrder
    status?: SortOrder
    lastServiceDate?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    staff?: StaffOrderByWithRelationInput
    guardian?: UserOrderByWithRelationInput
    userLink?: UserOrderByWithRelationInput
    ServiceSession?: ServiceSessionOrderByRelationAggregateInput
  }

  export type BeneficiaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    profileId?: string
    AND?: BeneficiaryWhereInput | BeneficiaryWhereInput[]
    OR?: BeneficiaryWhereInput[]
    NOT?: BeneficiaryWhereInput | BeneficiaryWhereInput[]
    relation?: EnumRelationTypeFilter<"Beneficiary"> | $Enums.RelationType
    isStaffLink?: BoolFilter<"Beneficiary"> | boolean
    staffId?: StringFilter<"Beneficiary"> | string
    guardianId?: StringNullableFilter<"Beneficiary"> | string | null
    userLinkId?: StringNullableFilter<"Beneficiary"> | string | null
    status?: EnumBaseStatusFilter<"Beneficiary"> | $Enums.BaseStatus
    lastServiceDate?: DateTimeNullableFilter<"Beneficiary"> | Date | string | null
    preferredLanguage?: EnumLanguageNullableFilter<"Beneficiary"> | $Enums.Language | null
    notes?: StringNullableFilter<"Beneficiary"> | string | null
    deletedAt?: DateTimeNullableFilter<"Beneficiary"> | Date | string | null
    createdAt?: DateTimeFilter<"Beneficiary"> | Date | string
    updatedAt?: DateTimeFilter<"Beneficiary"> | Date | string
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    staff?: XOR<StaffScalarRelationFilter, StaffWhereInput>
    guardian?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    userLink?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    ServiceSession?: ServiceSessionListRelationFilter
  }, "id" | "profileId">

  export type BeneficiaryOrderByWithAggregationInput = {
    id?: SortOrder
    profileId?: SortOrder
    relation?: SortOrder
    isStaffLink?: SortOrder
    staffId?: SortOrder
    guardianId?: SortOrderInput | SortOrder
    userLinkId?: SortOrderInput | SortOrder
    status?: SortOrder
    lastServiceDate?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BeneficiaryCountOrderByAggregateInput
    _max?: BeneficiaryMaxOrderByAggregateInput
    _min?: BeneficiaryMinOrderByAggregateInput
  }

  export type BeneficiaryScalarWhereWithAggregatesInput = {
    AND?: BeneficiaryScalarWhereWithAggregatesInput | BeneficiaryScalarWhereWithAggregatesInput[]
    OR?: BeneficiaryScalarWhereWithAggregatesInput[]
    NOT?: BeneficiaryScalarWhereWithAggregatesInput | BeneficiaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Beneficiary"> | string
    profileId?: StringWithAggregatesFilter<"Beneficiary"> | string
    relation?: EnumRelationTypeWithAggregatesFilter<"Beneficiary"> | $Enums.RelationType
    isStaffLink?: BoolWithAggregatesFilter<"Beneficiary"> | boolean
    staffId?: StringWithAggregatesFilter<"Beneficiary"> | string
    guardianId?: StringNullableWithAggregatesFilter<"Beneficiary"> | string | null
    userLinkId?: StringNullableWithAggregatesFilter<"Beneficiary"> | string | null
    status?: EnumBaseStatusWithAggregatesFilter<"Beneficiary"> | $Enums.BaseStatus
    lastServiceDate?: DateTimeNullableWithAggregatesFilter<"Beneficiary"> | Date | string | null
    preferredLanguage?: EnumLanguageNullableWithAggregatesFilter<"Beneficiary"> | $Enums.Language | null
    notes?: StringNullableWithAggregatesFilter<"Beneficiary"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Beneficiary"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Beneficiary"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Beneficiary"> | Date | string
  }

  export type KPIWhereInput = {
    AND?: KPIWhereInput | KPIWhereInput[]
    OR?: KPIWhereInput[]
    NOT?: KPIWhereInput | KPIWhereInput[]
    id?: StringFilter<"KPI"> | string
    name?: StringFilter<"KPI"> | string
    description?: StringNullableFilter<"KPI"> | string | null
    typeId?: StringFilter<"KPI"> | string
    unit?: StringFilter<"KPI"> | string
    unitType?: EnumUnitFilter<"KPI"> | $Enums.Unit
    targetValue?: StringNullableFilter<"KPI"> | string | null
    isPublic?: BoolFilter<"KPI"> | boolean
    calculationMethod?: StringNullableFilter<"KPI"> | string | null
    frequency?: EnumFrequencyNullableFilter<"KPI"> | $Enums.Frequency | null
    metadata?: JsonNullableFilter<"KPI">
    deletedAt?: DateTimeNullableFilter<"KPI"> | Date | string | null
    createdAt?: DateTimeFilter<"KPI"> | Date | string
    updatedAt?: DateTimeFilter<"KPI"> | Date | string
    clientId?: StringNullableFilter<"KPI"> | string | null
    contractId?: StringNullableFilter<"KPI"> | string | null
    type?: XOR<KpiTypeScalarRelationFilter, KpiTypeWhereInput>
    assignments?: KPIAssignmentListRelationFilter
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    Contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
  }

  export type KPIOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    typeId?: SortOrder
    unit?: SortOrder
    unitType?: SortOrder
    targetValue?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    calculationMethod?: SortOrderInput | SortOrder
    frequency?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrderInput | SortOrder
    contractId?: SortOrderInput | SortOrder
    type?: KpiTypeOrderByWithRelationInput
    assignments?: KPIAssignmentOrderByRelationAggregateInput
    client?: ClientOrderByWithRelationInput
    Contract?: ContractOrderByWithRelationInput
  }

  export type KPIWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: KPIWhereInput | KPIWhereInput[]
    OR?: KPIWhereInput[]
    NOT?: KPIWhereInput | KPIWhereInput[]
    name?: StringFilter<"KPI"> | string
    description?: StringNullableFilter<"KPI"> | string | null
    typeId?: StringFilter<"KPI"> | string
    unit?: StringFilter<"KPI"> | string
    unitType?: EnumUnitFilter<"KPI"> | $Enums.Unit
    targetValue?: StringNullableFilter<"KPI"> | string | null
    isPublic?: BoolFilter<"KPI"> | boolean
    calculationMethod?: StringNullableFilter<"KPI"> | string | null
    frequency?: EnumFrequencyNullableFilter<"KPI"> | $Enums.Frequency | null
    metadata?: JsonNullableFilter<"KPI">
    deletedAt?: DateTimeNullableFilter<"KPI"> | Date | string | null
    createdAt?: DateTimeFilter<"KPI"> | Date | string
    updatedAt?: DateTimeFilter<"KPI"> | Date | string
    clientId?: StringNullableFilter<"KPI"> | string | null
    contractId?: StringNullableFilter<"KPI"> | string | null
    type?: XOR<KpiTypeScalarRelationFilter, KpiTypeWhereInput>
    assignments?: KPIAssignmentListRelationFilter
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    Contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
  }, "id">

  export type KPIOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    typeId?: SortOrder
    unit?: SortOrder
    unitType?: SortOrder
    targetValue?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    calculationMethod?: SortOrderInput | SortOrder
    frequency?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrderInput | SortOrder
    contractId?: SortOrderInput | SortOrder
    _count?: KPICountOrderByAggregateInput
    _max?: KPIMaxOrderByAggregateInput
    _min?: KPIMinOrderByAggregateInput
  }

  export type KPIScalarWhereWithAggregatesInput = {
    AND?: KPIScalarWhereWithAggregatesInput | KPIScalarWhereWithAggregatesInput[]
    OR?: KPIScalarWhereWithAggregatesInput[]
    NOT?: KPIScalarWhereWithAggregatesInput | KPIScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KPI"> | string
    name?: StringWithAggregatesFilter<"KPI"> | string
    description?: StringNullableWithAggregatesFilter<"KPI"> | string | null
    typeId?: StringWithAggregatesFilter<"KPI"> | string
    unit?: StringWithAggregatesFilter<"KPI"> | string
    unitType?: EnumUnitWithAggregatesFilter<"KPI"> | $Enums.Unit
    targetValue?: StringNullableWithAggregatesFilter<"KPI"> | string | null
    isPublic?: BoolWithAggregatesFilter<"KPI"> | boolean
    calculationMethod?: StringNullableWithAggregatesFilter<"KPI"> | string | null
    frequency?: EnumFrequencyNullableWithAggregatesFilter<"KPI"> | $Enums.Frequency | null
    metadata?: JsonNullableWithAggregatesFilter<"KPI">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"KPI"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"KPI"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KPI"> | Date | string
    clientId?: StringNullableWithAggregatesFilter<"KPI"> | string | null
    contractId?: StringNullableWithAggregatesFilter<"KPI"> | string | null
  }

  export type KpiTypeWhereInput = {
    AND?: KpiTypeWhereInput | KpiTypeWhereInput[]
    OR?: KpiTypeWhereInput[]
    NOT?: KpiTypeWhereInput | KpiTypeWhereInput[]
    id?: StringFilter<"KpiType"> | string
    name?: StringFilter<"KpiType"> | string
    description?: StringNullableFilter<"KpiType"> | string | null
    weight?: IntNullableFilter<"KpiType"> | number | null
    metadata?: JsonNullableFilter<"KpiType">
    deletedAt?: DateTimeNullableFilter<"KpiType"> | Date | string | null
    createdAt?: DateTimeFilter<"KpiType"> | Date | string
    updatedAt?: DateTimeFilter<"KpiType"> | Date | string
    kpis?: KPIListRelationFilter
  }

  export type KpiTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    kpis?: KPIOrderByRelationAggregateInput
  }

  export type KpiTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: KpiTypeWhereInput | KpiTypeWhereInput[]
    OR?: KpiTypeWhereInput[]
    NOT?: KpiTypeWhereInput | KpiTypeWhereInput[]
    description?: StringNullableFilter<"KpiType"> | string | null
    weight?: IntNullableFilter<"KpiType"> | number | null
    metadata?: JsonNullableFilter<"KpiType">
    deletedAt?: DateTimeNullableFilter<"KpiType"> | Date | string | null
    createdAt?: DateTimeFilter<"KpiType"> | Date | string
    updatedAt?: DateTimeFilter<"KpiType"> | Date | string
    kpis?: KPIListRelationFilter
  }, "id" | "name">

  export type KpiTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KpiTypeCountOrderByAggregateInput
    _avg?: KpiTypeAvgOrderByAggregateInput
    _max?: KpiTypeMaxOrderByAggregateInput
    _min?: KpiTypeMinOrderByAggregateInput
    _sum?: KpiTypeSumOrderByAggregateInput
  }

  export type KpiTypeScalarWhereWithAggregatesInput = {
    AND?: KpiTypeScalarWhereWithAggregatesInput | KpiTypeScalarWhereWithAggregatesInput[]
    OR?: KpiTypeScalarWhereWithAggregatesInput[]
    NOT?: KpiTypeScalarWhereWithAggregatesInput | KpiTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KpiType"> | string
    name?: StringWithAggregatesFilter<"KpiType"> | string
    description?: StringNullableWithAggregatesFilter<"KpiType"> | string | null
    weight?: IntNullableWithAggregatesFilter<"KpiType"> | number | null
    metadata?: JsonNullableWithAggregatesFilter<"KpiType">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"KpiType"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"KpiType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KpiType"> | Date | string
  }

  export type KPIAssignmentWhereInput = {
    AND?: KPIAssignmentWhereInput | KPIAssignmentWhereInput[]
    OR?: KPIAssignmentWhereInput[]
    NOT?: KPIAssignmentWhereInput | KPIAssignmentWhereInput[]
    id?: StringFilter<"KPIAssignment"> | string
    kpiId?: StringFilter<"KPIAssignment"> | string
    contractId?: StringFilter<"KPIAssignment"> | string
    targetValue?: StringNullableFilter<"KPIAssignment"> | string | null
    frequency?: EnumFrequencyFilter<"KPIAssignment"> | $Enums.Frequency
    status?: EnumAssignmentStatusFilter<"KPIAssignment"> | $Enums.AssignmentStatus
    notes?: StringNullableFilter<"KPIAssignment"> | string | null
    startDate?: DateTimeFilter<"KPIAssignment"> | Date | string
    endDate?: DateTimeNullableFilter<"KPIAssignment"> | Date | string | null
    metadata?: JsonNullableFilter<"KPIAssignment">
    deletedAt?: DateTimeNullableFilter<"KPIAssignment"> | Date | string | null
    createdAt?: DateTimeFilter<"KPIAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"KPIAssignment"> | Date | string
    clientId?: StringNullableFilter<"KPIAssignment"> | string | null
    kpi?: XOR<KPIScalarRelationFilter, KPIWhereInput>
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }

  export type KPIAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    kpiId?: SortOrder
    contractId?: SortOrder
    targetValue?: SortOrderInput | SortOrder
    frequency?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrderInput | SortOrder
    kpi?: KPIOrderByWithRelationInput
    contract?: ContractOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
  }

  export type KPIAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: KPIAssignmentWhereInput | KPIAssignmentWhereInput[]
    OR?: KPIAssignmentWhereInput[]
    NOT?: KPIAssignmentWhereInput | KPIAssignmentWhereInput[]
    kpiId?: StringFilter<"KPIAssignment"> | string
    contractId?: StringFilter<"KPIAssignment"> | string
    targetValue?: StringNullableFilter<"KPIAssignment"> | string | null
    frequency?: EnumFrequencyFilter<"KPIAssignment"> | $Enums.Frequency
    status?: EnumAssignmentStatusFilter<"KPIAssignment"> | $Enums.AssignmentStatus
    notes?: StringNullableFilter<"KPIAssignment"> | string | null
    startDate?: DateTimeFilter<"KPIAssignment"> | Date | string
    endDate?: DateTimeNullableFilter<"KPIAssignment"> | Date | string | null
    metadata?: JsonNullableFilter<"KPIAssignment">
    deletedAt?: DateTimeNullableFilter<"KPIAssignment"> | Date | string | null
    createdAt?: DateTimeFilter<"KPIAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"KPIAssignment"> | Date | string
    clientId?: StringNullableFilter<"KPIAssignment"> | string | null
    kpi?: XOR<KPIScalarRelationFilter, KPIWhereInput>
    contract?: XOR<ContractScalarRelationFilter, ContractWhereInput>
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
  }, "id">

  export type KPIAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    kpiId?: SortOrder
    contractId?: SortOrder
    targetValue?: SortOrderInput | SortOrder
    frequency?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrderInput | SortOrder
    _count?: KPIAssignmentCountOrderByAggregateInput
    _max?: KPIAssignmentMaxOrderByAggregateInput
    _min?: KPIAssignmentMinOrderByAggregateInput
  }

  export type KPIAssignmentScalarWhereWithAggregatesInput = {
    AND?: KPIAssignmentScalarWhereWithAggregatesInput | KPIAssignmentScalarWhereWithAggregatesInput[]
    OR?: KPIAssignmentScalarWhereWithAggregatesInput[]
    NOT?: KPIAssignmentScalarWhereWithAggregatesInput | KPIAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KPIAssignment"> | string
    kpiId?: StringWithAggregatesFilter<"KPIAssignment"> | string
    contractId?: StringWithAggregatesFilter<"KPIAssignment"> | string
    targetValue?: StringNullableWithAggregatesFilter<"KPIAssignment"> | string | null
    frequency?: EnumFrequencyWithAggregatesFilter<"KPIAssignment"> | $Enums.Frequency
    status?: EnumAssignmentStatusWithAggregatesFilter<"KPIAssignment"> | $Enums.AssignmentStatus
    notes?: StringNullableWithAggregatesFilter<"KPIAssignment"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"KPIAssignment"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"KPIAssignment"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"KPIAssignment">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"KPIAssignment"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"KPIAssignment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KPIAssignment"> | Date | string
    clientId?: StringNullableWithAggregatesFilter<"KPIAssignment"> | string | null
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    title?: StringFilter<"Document"> | string
    description?: StringNullableFilter<"Document"> | string | null
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    url?: StringFilter<"Document"> | string
    fileSize?: IntNullableFilter<"Document"> | number | null
    fileType?: StringNullableFilter<"Document"> | string | null
    version?: IntFilter<"Document"> | number
    isLatest?: BoolFilter<"Document"> | boolean
    previousVersionId?: StringNullableFilter<"Document"> | string | null
    status?: EnumDocumentStatusFilter<"Document"> | $Enums.DocumentStatus
    expiryDate?: DateTimeNullableFilter<"Document"> | Date | string | null
    isConfidential?: BoolFilter<"Document"> | boolean
    tags?: StringNullableListFilter<"Document">
    metadata?: JsonNullableFilter<"Document">
    deletedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    uploadedById?: StringNullableFilter<"Document"> | string | null
    clientId?: StringNullableFilter<"Document"> | string | null
    contractId?: StringNullableFilter<"Document"> | string | null
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    previousVersion?: XOR<DocumentNullableScalarRelationFilter, DocumentWhereInput> | null
    nextVersions?: DocumentListRelationFilter
    uploadedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    url?: SortOrder
    fileSize?: SortOrderInput | SortOrder
    fileType?: SortOrderInput | SortOrder
    version?: SortOrder
    isLatest?: SortOrder
    previousVersionId?: SortOrderInput | SortOrder
    status?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    isConfidential?: SortOrder
    tags?: SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    uploadedById?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    contractId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    previousVersion?: DocumentOrderByWithRelationInput
    nextVersions?: DocumentOrderByRelationAggregateInput
    uploadedBy?: UserOrderByWithRelationInput
    client?: ClientOrderByWithRelationInput
    contract?: ContractOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    title?: StringFilter<"Document"> | string
    description?: StringNullableFilter<"Document"> | string | null
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    url?: StringFilter<"Document"> | string
    fileSize?: IntNullableFilter<"Document"> | number | null
    fileType?: StringNullableFilter<"Document"> | string | null
    version?: IntFilter<"Document"> | number
    isLatest?: BoolFilter<"Document"> | boolean
    previousVersionId?: StringNullableFilter<"Document"> | string | null
    status?: EnumDocumentStatusFilter<"Document"> | $Enums.DocumentStatus
    expiryDate?: DateTimeNullableFilter<"Document"> | Date | string | null
    isConfidential?: BoolFilter<"Document"> | boolean
    tags?: StringNullableListFilter<"Document">
    metadata?: JsonNullableFilter<"Document">
    deletedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    uploadedById?: StringNullableFilter<"Document"> | string | null
    clientId?: StringNullableFilter<"Document"> | string | null
    contractId?: StringNullableFilter<"Document"> | string | null
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
    previousVersion?: XOR<DocumentNullableScalarRelationFilter, DocumentWhereInput> | null
    nextVersions?: DocumentListRelationFilter
    uploadedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    client?: XOR<ClientNullableScalarRelationFilter, ClientWhereInput> | null
    contract?: XOR<ContractNullableScalarRelationFilter, ContractWhereInput> | null
  }, "id">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    url?: SortOrder
    fileSize?: SortOrderInput | SortOrder
    fileType?: SortOrderInput | SortOrder
    version?: SortOrder
    isLatest?: SortOrder
    previousVersionId?: SortOrderInput | SortOrder
    status?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    isConfidential?: SortOrder
    tags?: SortOrder
    metadata?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    uploadedById?: SortOrderInput | SortOrder
    clientId?: SortOrderInput | SortOrder
    contractId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _avg?: DocumentAvgOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
    _sum?: DocumentSumOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    title?: StringWithAggregatesFilter<"Document"> | string
    description?: StringNullableWithAggregatesFilter<"Document"> | string | null
    type?: EnumDocumentTypeWithAggregatesFilter<"Document"> | $Enums.DocumentType
    url?: StringWithAggregatesFilter<"Document"> | string
    fileSize?: IntNullableWithAggregatesFilter<"Document"> | number | null
    fileType?: StringNullableWithAggregatesFilter<"Document"> | string | null
    version?: IntWithAggregatesFilter<"Document"> | number
    isLatest?: BoolWithAggregatesFilter<"Document"> | boolean
    previousVersionId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    status?: EnumDocumentStatusWithAggregatesFilter<"Document"> | $Enums.DocumentStatus
    expiryDate?: DateTimeNullableWithAggregatesFilter<"Document"> | Date | string | null
    isConfidential?: BoolWithAggregatesFilter<"Document"> | boolean
    tags?: StringNullableListFilter<"Document">
    metadata?: JsonNullableWithAggregatesFilter<"Document">
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Document"> | Date | string | null
    uploadedById?: StringNullableWithAggregatesFilter<"Document"> | string | null
    clientId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    contractId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: EnumActionTypeFilter<"AuditLog"> | $Enums.ActionType
    entityType?: StringNullableFilter<"AuditLog"> | string | null
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    data?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    userId?: SortOrderInput | SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    action?: EnumActionTypeFilter<"AuditLog"> | $Enums.ActionType
    entityType?: StringNullableFilter<"AuditLog"> | string | null
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    data?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    User?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: EnumActionTypeWithAggregatesFilter<"AuditLog"> | $Enums.ActionType
    entityType?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    entityId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    data?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
  }

  export type EntityChangeWhereInput = {
    AND?: EntityChangeWhereInput | EntityChangeWhereInput[]
    OR?: EntityChangeWhereInput[]
    NOT?: EntityChangeWhereInput | EntityChangeWhereInput[]
    id?: StringFilter<"EntityChange"> | string
    entityType?: StringFilter<"EntityChange"> | string
    entityId?: StringFilter<"EntityChange"> | string
    changeType?: EnumChangeTypeFilter<"EntityChange"> | $Enums.ChangeType
    changedAt?: DateTimeFilter<"EntityChange"> | Date | string
    changedBy?: StringNullableFilter<"EntityChange"> | string | null
    changeReason?: StringNullableFilter<"EntityChange"> | string | null
    oldData?: JsonNullableFilter<"EntityChange">
    newData?: JsonNullableFilter<"EntityChange">
    metadata?: JsonNullableFilter<"EntityChange">
    isActive?: BoolFilter<"EntityChange"> | boolean
    deletedAt?: DateTimeNullableFilter<"EntityChange"> | Date | string | null
    fieldChanges?: FieldChangeListRelationFilter
  }

  export type EntityChangeOrderByWithRelationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    changedAt?: SortOrder
    changedBy?: SortOrderInput | SortOrder
    changeReason?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    isActive?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    fieldChanges?: FieldChangeOrderByRelationAggregateInput
  }

  export type EntityChangeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    entityType_entityId_changedAt?: EntityChangeEntityTypeEntityIdChangedAtCompoundUniqueInput
    AND?: EntityChangeWhereInput | EntityChangeWhereInput[]
    OR?: EntityChangeWhereInput[]
    NOT?: EntityChangeWhereInput | EntityChangeWhereInput[]
    entityType?: StringFilter<"EntityChange"> | string
    entityId?: StringFilter<"EntityChange"> | string
    changeType?: EnumChangeTypeFilter<"EntityChange"> | $Enums.ChangeType
    changedAt?: DateTimeFilter<"EntityChange"> | Date | string
    changedBy?: StringNullableFilter<"EntityChange"> | string | null
    changeReason?: StringNullableFilter<"EntityChange"> | string | null
    oldData?: JsonNullableFilter<"EntityChange">
    newData?: JsonNullableFilter<"EntityChange">
    metadata?: JsonNullableFilter<"EntityChange">
    isActive?: BoolFilter<"EntityChange"> | boolean
    deletedAt?: DateTimeNullableFilter<"EntityChange"> | Date | string | null
    fieldChanges?: FieldChangeListRelationFilter
  }, "id" | "entityType_entityId_changedAt">

  export type EntityChangeOrderByWithAggregationInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    changedAt?: SortOrder
    changedBy?: SortOrderInput | SortOrder
    changeReason?: SortOrderInput | SortOrder
    oldData?: SortOrderInput | SortOrder
    newData?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    isActive?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: EntityChangeCountOrderByAggregateInput
    _max?: EntityChangeMaxOrderByAggregateInput
    _min?: EntityChangeMinOrderByAggregateInput
  }

  export type EntityChangeScalarWhereWithAggregatesInput = {
    AND?: EntityChangeScalarWhereWithAggregatesInput | EntityChangeScalarWhereWithAggregatesInput[]
    OR?: EntityChangeScalarWhereWithAggregatesInput[]
    NOT?: EntityChangeScalarWhereWithAggregatesInput | EntityChangeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EntityChange"> | string
    entityType?: StringWithAggregatesFilter<"EntityChange"> | string
    entityId?: StringWithAggregatesFilter<"EntityChange"> | string
    changeType?: EnumChangeTypeWithAggregatesFilter<"EntityChange"> | $Enums.ChangeType
    changedAt?: DateTimeWithAggregatesFilter<"EntityChange"> | Date | string
    changedBy?: StringNullableWithAggregatesFilter<"EntityChange"> | string | null
    changeReason?: StringNullableWithAggregatesFilter<"EntityChange"> | string | null
    oldData?: JsonNullableWithAggregatesFilter<"EntityChange">
    newData?: JsonNullableWithAggregatesFilter<"EntityChange">
    metadata?: JsonNullableWithAggregatesFilter<"EntityChange">
    isActive?: BoolWithAggregatesFilter<"EntityChange"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"EntityChange"> | Date | string | null
  }

  export type FieldChangeWhereInput = {
    AND?: FieldChangeWhereInput | FieldChangeWhereInput[]
    OR?: FieldChangeWhereInput[]
    NOT?: FieldChangeWhereInput | FieldChangeWhereInput[]
    id?: StringFilter<"FieldChange"> | string
    entityChangeId?: StringFilter<"FieldChange"> | string
    fieldName?: StringFilter<"FieldChange"> | string
    oldValue?: JsonNullableFilter<"FieldChange">
    newValue?: JsonNullableFilter<"FieldChange">
    changeType?: EnumChangeTypeFilter<"FieldChange"> | $Enums.ChangeType
    deletedAt?: DateTimeNullableFilter<"FieldChange"> | Date | string | null
    createdAt?: DateTimeFilter<"FieldChange"> | Date | string
    updatedAt?: DateTimeFilter<"FieldChange"> | Date | string
    entityChange?: XOR<EntityChangeScalarRelationFilter, EntityChangeWhereInput>
  }

  export type FieldChangeOrderByWithRelationInput = {
    id?: SortOrder
    entityChangeId?: SortOrder
    fieldName?: SortOrder
    oldValue?: SortOrderInput | SortOrder
    newValue?: SortOrderInput | SortOrder
    changeType?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityChange?: EntityChangeOrderByWithRelationInput
  }

  export type FieldChangeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FieldChangeWhereInput | FieldChangeWhereInput[]
    OR?: FieldChangeWhereInput[]
    NOT?: FieldChangeWhereInput | FieldChangeWhereInput[]
    entityChangeId?: StringFilter<"FieldChange"> | string
    fieldName?: StringFilter<"FieldChange"> | string
    oldValue?: JsonNullableFilter<"FieldChange">
    newValue?: JsonNullableFilter<"FieldChange">
    changeType?: EnumChangeTypeFilter<"FieldChange"> | $Enums.ChangeType
    deletedAt?: DateTimeNullableFilter<"FieldChange"> | Date | string | null
    createdAt?: DateTimeFilter<"FieldChange"> | Date | string
    updatedAt?: DateTimeFilter<"FieldChange"> | Date | string
    entityChange?: XOR<EntityChangeScalarRelationFilter, EntityChangeWhereInput>
  }, "id">

  export type FieldChangeOrderByWithAggregationInput = {
    id?: SortOrder
    entityChangeId?: SortOrder
    fieldName?: SortOrder
    oldValue?: SortOrderInput | SortOrder
    newValue?: SortOrderInput | SortOrder
    changeType?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FieldChangeCountOrderByAggregateInput
    _max?: FieldChangeMaxOrderByAggregateInput
    _min?: FieldChangeMinOrderByAggregateInput
  }

  export type FieldChangeScalarWhereWithAggregatesInput = {
    AND?: FieldChangeScalarWhereWithAggregatesInput | FieldChangeScalarWhereWithAggregatesInput[]
    OR?: FieldChangeScalarWhereWithAggregatesInput[]
    NOT?: FieldChangeScalarWhereWithAggregatesInput | FieldChangeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FieldChange"> | string
    entityChangeId?: StringWithAggregatesFilter<"FieldChange"> | string
    fieldName?: StringWithAggregatesFilter<"FieldChange"> | string
    oldValue?: JsonNullableWithAggregatesFilter<"FieldChange">
    newValue?: JsonNullableWithAggregatesFilter<"FieldChange">
    changeType?: EnumChangeTypeWithAggregatesFilter<"FieldChange"> | $Enums.ChangeType
    deletedAt?: DateTimeNullableWithAggregatesFilter<"FieldChange"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FieldChange"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FieldChange"> | Date | string
  }

  export type UserStatusTransitionWhereInput = {
    AND?: UserStatusTransitionWhereInput | UserStatusTransitionWhereInput[]
    OR?: UserStatusTransitionWhereInput[]
    NOT?: UserStatusTransitionWhereInput | UserStatusTransitionWhereInput[]
    id?: StringFilter<"UserStatusTransition"> | string
    userId?: StringFilter<"UserStatusTransition"> | string
    fromStatus?: EnumUserStatusFilter<"UserStatusTransition"> | $Enums.UserStatus
    toStatus?: EnumUserStatusFilter<"UserStatusTransition"> | $Enums.UserStatus
    reason?: StringNullableFilter<"UserStatusTransition"> | string | null
    metadata?: JsonNullableFilter<"UserStatusTransition">
    changedBy?: StringNullableFilter<"UserStatusTransition"> | string | null
    ipAddress?: StringNullableFilter<"UserStatusTransition"> | string | null
    userAgent?: StringNullableFilter<"UserStatusTransition"> | string | null
    createdAt?: DateTimeFilter<"UserStatusTransition"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserStatusTransitionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    reason?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    changedBy?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserStatusTransitionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserStatusTransitionWhereInput | UserStatusTransitionWhereInput[]
    OR?: UserStatusTransitionWhereInput[]
    NOT?: UserStatusTransitionWhereInput | UserStatusTransitionWhereInput[]
    userId?: StringFilter<"UserStatusTransition"> | string
    fromStatus?: EnumUserStatusFilter<"UserStatusTransition"> | $Enums.UserStatus
    toStatus?: EnumUserStatusFilter<"UserStatusTransition"> | $Enums.UserStatus
    reason?: StringNullableFilter<"UserStatusTransition"> | string | null
    metadata?: JsonNullableFilter<"UserStatusTransition">
    changedBy?: StringNullableFilter<"UserStatusTransition"> | string | null
    ipAddress?: StringNullableFilter<"UserStatusTransition"> | string | null
    userAgent?: StringNullableFilter<"UserStatusTransition"> | string | null
    createdAt?: DateTimeFilter<"UserStatusTransition"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserStatusTransitionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    reason?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    changedBy?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserStatusTransitionCountOrderByAggregateInput
    _max?: UserStatusTransitionMaxOrderByAggregateInput
    _min?: UserStatusTransitionMinOrderByAggregateInput
  }

  export type UserStatusTransitionScalarWhereWithAggregatesInput = {
    AND?: UserStatusTransitionScalarWhereWithAggregatesInput | UserStatusTransitionScalarWhereWithAggregatesInput[]
    OR?: UserStatusTransitionScalarWhereWithAggregatesInput[]
    NOT?: UserStatusTransitionScalarWhereWithAggregatesInput | UserStatusTransitionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserStatusTransition"> | string
    userId?: StringWithAggregatesFilter<"UserStatusTransition"> | string
    fromStatus?: EnumUserStatusWithAggregatesFilter<"UserStatusTransition"> | $Enums.UserStatus
    toStatus?: EnumUserStatusWithAggregatesFilter<"UserStatusTransition"> | $Enums.UserStatus
    reason?: StringNullableWithAggregatesFilter<"UserStatusTransition"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"UserStatusTransition">
    changedBy?: StringNullableWithAggregatesFilter<"UserStatusTransition"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"UserStatusTransition"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserStatusTransition"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserStatusTransition"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    lastLoginAt?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    lastLoginAt?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    lastLoginAt?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isValid?: boolean
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isValid?: boolean
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isValid?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isValid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isValid?: boolean
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isValid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isValid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
    users?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
    users?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PermissionCreateInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
    roles?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
    roles?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RolePermissionCreateInput = {
    id?: string
    role: RoleCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateInput = {
    id?: string
    roleId: string
    permissionId: string
  }

  export type RolePermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionCreateManyInput = {
    id?: string
    roleId: string
    permissionId: string
  }

  export type RolePermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutUserRolesInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateInput = {
    id?: string
    userId: string
    roleId: string
  }

  export type UserRoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutUserRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateManyInput = {
    id?: string
    userId: string
    roleId: string
  }

  export type UserRoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateInput = {
    id?: string
    fullName: string
    preferredName?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    phone?: string | null
    email?: string | null
    image?: string | null
    address?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    preferredLanguage?: $Enums.Language | null
    preferredContactMethod?: $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProfileInput
    staff?: StaffCreateNestedOneWithoutProfileInput
    beneficiary?: BeneficiaryCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    fullName: string
    preferredName?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    phone?: string | null
    email?: string | null
    image?: string | null
    address?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    preferredLanguage?: $Enums.Language | null
    preferredContactMethod?: $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffUncheckedCreateNestedOneWithoutProfileInput
    beneficiary?: BeneficiaryUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProfileNestedInput
    staff?: StaffUpdateOneWithoutProfileNestedInput
    beneficiary?: BeneficiaryUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUncheckedUpdateOneWithoutProfileNestedInput
    beneficiary?: BeneficiaryUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: string
    fullName: string
    preferredName?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    phone?: string | null
    email?: string | null
    image?: string | null
    address?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    preferredLanguage?: $Enums.Language | null
    preferredContactMethod?: $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientCreateInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    industry?: IndustryCreateNestedOneWithoutClientsInput
    contracts?: ContractCreateNestedManyWithoutClientInput
    documents?: DocumentCreateNestedManyWithoutClientInput
    kpis?: KPICreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutClientInput
    staff?: StaffCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    industryId?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutClientInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClientInput
    kpis?: KPIUncheckedCreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutClientInput
    staff?: StaffUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    industry?: IndustryUpdateOneWithoutClientsNestedInput
    contracts?: ContractUpdateManyWithoutClientNestedInput
    documents?: DocumentUpdateManyWithoutClientNestedInput
    kpis?: KPIUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutClientNestedInput
    staff?: StaffUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    industryId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutClientNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClientNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutClientNestedInput
    staff?: StaffUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientCreateManyInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    industryId?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    industryId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndustryCreateInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: IndustryCreateNestedOneWithoutChildrenInput
    children?: IndustryCreateNestedManyWithoutParentInput
    clients?: ClientCreateNestedManyWithoutIndustryInput
  }

  export type IndustryUncheckedCreateInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    parentId?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: IndustryUncheckedCreateNestedManyWithoutParentInput
    clients?: ClientUncheckedCreateNestedManyWithoutIndustryInput
  }

  export type IndustryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: IndustryUpdateOneWithoutChildrenNestedInput
    children?: IndustryUpdateManyWithoutParentNestedInput
    clients?: ClientUpdateManyWithoutIndustryNestedInput
  }

  export type IndustryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: IndustryUncheckedUpdateManyWithoutParentNestedInput
    clients?: ClientUncheckedUpdateManyWithoutIndustryNestedInput
  }

  export type IndustryCreateManyInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    parentId?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IndustryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndustryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutContractsInput
    documents?: DocumentCreateNestedManyWithoutContractInput
    kpis?: KPICreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateInput = {
    id?: string
    clientId: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
    kpis?: KPIUncheckedCreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutContractsNestedInput
    documents?: DocumentUpdateManyWithoutContractNestedInput
    kpis?: KPIUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractCreateManyInput = {
    id?: string
    clientId: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: ServiceCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: ServiceUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ServiceCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ServiceCategoryCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    assignments?: ServiceAssignmentCreateNestedManyWithoutServiceInput
    ServiceProvider?: ServiceProviderCreateNestedOneWithoutServicesInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    categoryId: string
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceProviderId?: string | null
    assignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutServiceInput
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    assignments?: ServiceAssignmentUpdateManyWithoutServiceNestedInput
    ServiceProvider?: ServiceProviderUpdateOneWithoutServicesNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: ServiceAssignmentUncheckedUpdateManyWithoutServiceNestedInput
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    categoryId: string
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceProviderId?: string | null
  }

  export type ServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceProviderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceAssignmentCreateInput = {
    id?: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutAssignmentsInput
    contract: ContractCreateNestedOneWithoutServiceAssignmentsInput
    client?: ClientCreateNestedOneWithoutServiceAssignmentsInput
  }

  export type ServiceAssignmentUncheckedCreateInput = {
    id?: string
    serviceId: string
    contractId: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type ServiceAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutAssignmentsNestedInput
    contract?: ContractUpdateOneRequiredWithoutServiceAssignmentsNestedInput
    client?: ClientUpdateOneWithoutServiceAssignmentsNestedInput
  }

  export type ServiceAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceAssignmentCreateManyInput = {
    id?: string
    serviceId: string
    contractId: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type ServiceAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceProviderCreateInput = {
    id?: string
    name: string
    type: $Enums.ServiceProviderType
    contactEmail?: string | null
    contactPhone?: string | null
    location?: string | null
    qualifications?: ServiceProviderCreatequalificationsInput | string[]
    specializations?: ServiceProviderCreatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    isVerified?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    status?: $Enums.WorkStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: ServiceCreateNestedManyWithoutServiceProviderInput
    sessions?: ServiceSessionCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.ServiceProviderType
    contactEmail?: string | null
    contactPhone?: string | null
    location?: string | null
    qualifications?: ServiceProviderCreatequalificationsInput | string[]
    specializations?: ServiceProviderCreatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    isVerified?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    status?: $Enums.WorkStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: ServiceUncheckedCreateNestedManyWithoutServiceProviderInput
    sessions?: ServiceSessionUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceProviderTypeFieldUpdateOperationsInput | $Enums.ServiceProviderType
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: ServiceProviderUpdatequalificationsInput | string[]
    specializations?: ServiceProviderUpdatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceUpdateManyWithoutServiceProviderNestedInput
    sessions?: ServiceSessionUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceProviderTypeFieldUpdateOperationsInput | $Enums.ServiceProviderType
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: ServiceProviderUpdatequalificationsInput | string[]
    specializations?: ServiceProviderUpdatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceUncheckedUpdateManyWithoutServiceProviderNestedInput
    sessions?: ServiceSessionUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderCreateManyInput = {
    id?: string
    name: string
    type: $Enums.ServiceProviderType
    contactEmail?: string | null
    contactPhone?: string | null
    location?: string | null
    qualifications?: ServiceProviderCreatequalificationsInput | string[]
    specializations?: ServiceProviderCreatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    isVerified?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    status?: $Enums.WorkStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceProviderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceProviderTypeFieldUpdateOperationsInput | $Enums.ServiceProviderType
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: ServiceProviderUpdatequalificationsInput | string[]
    specializations?: ServiceProviderUpdatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceProviderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceProviderTypeFieldUpdateOperationsInput | $Enums.ServiceProviderType
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: ServiceProviderUpdatequalificationsInput | string[]
    specializations?: ServiceProviderUpdatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceSessionCreateInput = {
    id?: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffCreateNestedOneWithoutServiceSessionInput
    beneficiary?: BeneficiaryCreateNestedOneWithoutServiceSessionInput
    service: ServiceCreateNestedOneWithoutServiceSessionInput
    provider: ServiceProviderCreateNestedOneWithoutSessionsInput
    SessionFeedback?: SessionFeedbackCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionUncheckedCreateInput = {
    id?: string
    serviceId: string
    providerId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    staffId?: string | null
    beneficiaryId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionFeedback?: SessionFeedbackUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneWithoutServiceSessionNestedInput
    beneficiary?: BeneficiaryUpdateOneWithoutServiceSessionNestedInput
    service?: ServiceUpdateOneRequiredWithoutServiceSessionNestedInput
    provider?: ServiceProviderUpdateOneRequiredWithoutSessionsNestedInput
    SessionFeedback?: SessionFeedbackUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionFeedback?: SessionFeedbackUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionCreateManyInput = {
    id?: string
    serviceId: string
    providerId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    staffId?: string | null
    beneficiaryId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFeedbackCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    session: ServiceSessionCreateNestedOneWithoutSessionFeedbackInput
  }

  export type SessionFeedbackUncheckedCreateInput = {
    id?: string
    sessionId: string
    rating: number
    comment?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SessionFeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: ServiceSessionUpdateOneRequiredWithoutSessionFeedbackNestedInput
  }

  export type SessionFeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFeedbackCreateManyInput = {
    id?: string
    sessionId: string
    rating: number
    comment?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SessionFeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffCreateInput = {
    id?: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffProfilesInput
    profile: ProfileCreateNestedOneWithoutStaffInput
    client: ClientCreateNestedOneWithoutStaffInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutStaffInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateInput = {
    id?: string
    profileId: string
    clientId: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutStaffInput
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffProfilesNestedInput
    profile?: ProfileUpdateOneRequiredWithoutStaffNestedInput
    client?: ClientUpdateOneRequiredWithoutStaffNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutStaffNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutStaffNestedInput
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type StaffCreateManyInput = {
    id?: string
    profileId: string
    clientId: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BeneficiaryCreateInput = {
    id?: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutBeneficiaryInput
    staff: StaffCreateNestedOneWithoutBeneficiariesInput
    guardian?: UserCreateNestedOneWithoutGuardianOfInput
    userLink?: UserCreateNestedOneWithoutBeneficiariesInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUncheckedCreateInput = {
    id?: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    staffId: string
    guardianId?: string | null
    userLinkId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutBeneficiaryNestedInput
    staff?: StaffUpdateOneRequiredWithoutBeneficiariesNestedInput
    guardian?: UserUpdateOneWithoutGuardianOfNestedInput
    userLink?: UserUpdateOneWithoutBeneficiariesNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    staffId?: StringFieldUpdateOperationsInput | string
    guardianId?: NullableStringFieldUpdateOperationsInput | string | null
    userLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryCreateManyInput = {
    id?: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    staffId: string
    guardianId?: string | null
    userLinkId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BeneficiaryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BeneficiaryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    staffId?: StringFieldUpdateOperationsInput | string
    guardianId?: NullableStringFieldUpdateOperationsInput | string | null
    userLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPICreateInput = {
    id?: string
    name: string
    description?: string | null
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: KpiTypeCreateNestedOneWithoutKpisInput
    assignments?: KPIAssignmentCreateNestedManyWithoutKpiInput
    client?: ClientCreateNestedOneWithoutKpisInput
    Contract?: ContractCreateNestedOneWithoutKpisInput
  }

  export type KPIUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    typeId: string
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
    contractId?: string | null
    assignments?: KPIAssignmentUncheckedCreateNestedManyWithoutKpiInput
  }

  export type KPIUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: KpiTypeUpdateOneRequiredWithoutKpisNestedInput
    assignments?: KPIAssignmentUpdateManyWithoutKpiNestedInput
    client?: ClientUpdateOneWithoutKpisNestedInput
    Contract?: ContractUpdateOneWithoutKpisNestedInput
  }

  export type KPIUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: KPIAssignmentUncheckedUpdateManyWithoutKpiNestedInput
  }

  export type KPICreateManyInput = {
    id?: string
    name: string
    description?: string | null
    typeId: string
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
    contractId?: string | null
  }

  export type KPIUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KpiTypeCreateInput = {
    id?: string
    name: string
    description?: string | null
    weight?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kpis?: KPICreateNestedManyWithoutTypeInput
  }

  export type KpiTypeUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    weight?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kpis?: KPIUncheckedCreateNestedManyWithoutTypeInput
  }

  export type KpiTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpis?: KPIUpdateManyWithoutTypeNestedInput
  }

  export type KpiTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpis?: KPIUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type KpiTypeCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    weight?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KpiTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KpiTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIAssignmentCreateInput = {
    id?: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kpi: KPICreateNestedOneWithoutAssignmentsInput
    contract: ContractCreateNestedOneWithoutKpiAssignmentsInput
    client?: ClientCreateNestedOneWithoutKpiAssignmentsInput
  }

  export type KPIAssignmentUncheckedCreateInput = {
    id?: string
    kpiId: string
    contractId: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type KPIAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpi?: KPIUpdateOneRequiredWithoutAssignmentsNestedInput
    contract?: ContractUpdateOneRequiredWithoutKpiAssignmentsNestedInput
    client?: ClientUpdateOneWithoutKpiAssignmentsNestedInput
  }

  export type KPIAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    kpiId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KPIAssignmentCreateManyInput = {
    id?: string
    kpiId: string
    contractId: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type KPIAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    kpiId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: DocumentCreateNestedOneWithoutNextVersionsInput
    nextVersions?: DocumentCreateNestedManyWithoutPreviousVersionInput
    uploadedBy?: UserCreateNestedOneWithoutDocumentsInput
    client?: ClientCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    previousVersionId?: string | null
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    uploadedById?: string | null
    clientId?: string | null
    contractId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nextVersions?: DocumentUncheckedCreateNestedManyWithoutPreviousVersionInput
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: DocumentUpdateOneWithoutNextVersionsNestedInput
    nextVersions?: DocumentUpdateManyWithoutPreviousVersionNestedInput
    uploadedBy?: UserUpdateOneWithoutDocumentsNestedInput
    client?: ClientUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    previousVersionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadedById?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextVersions?: DocumentUncheckedUpdateManyWithoutPreviousVersionNestedInput
  }

  export type DocumentCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    previousVersionId?: string | null
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    uploadedById?: string | null
    clientId?: string | null
    contractId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    previousVersionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadedById?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: $Enums.ActionType
    entityType?: string | null
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    User?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: $Enums.ActionType
    entityType?: string | null
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    userId?: string | null
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: $Enums.ActionType
    entityType?: string | null
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    userId?: string | null
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityChangeCreateInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    changedAt?: Date | string
    changedBy?: string | null
    changeReason?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    deletedAt?: Date | string | null
    fieldChanges?: FieldChangeCreateNestedManyWithoutEntityChangeInput
  }

  export type EntityChangeUncheckedCreateInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    changedAt?: Date | string
    changedBy?: string | null
    changeReason?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    deletedAt?: Date | string | null
    fieldChanges?: FieldChangeUncheckedCreateNestedManyWithoutEntityChangeInput
  }

  export type EntityChangeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fieldChanges?: FieldChangeUpdateManyWithoutEntityChangeNestedInput
  }

  export type EntityChangeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fieldChanges?: FieldChangeUncheckedUpdateManyWithoutEntityChangeNestedInput
  }

  export type EntityChangeCreateManyInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    changedAt?: Date | string
    changedBy?: string | null
    changeReason?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    deletedAt?: Date | string | null
  }

  export type EntityChangeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EntityChangeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FieldChangeCreateInput = {
    id?: string
    fieldName: string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType: $Enums.ChangeType
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    entityChange: EntityChangeCreateNestedOneWithoutFieldChangesInput
  }

  export type FieldChangeUncheckedCreateInput = {
    id?: string
    entityChangeId: string
    fieldName: string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType: $Enums.ChangeType
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldChangeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityChange?: EntityChangeUpdateOneRequiredWithoutFieldChangesNestedInput
  }

  export type FieldChangeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityChangeId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldChangeCreateManyInput = {
    id?: string
    entityChangeId: string
    fieldName: string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType: $Enums.ChangeType
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldChangeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldChangeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityChangeId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatusTransitionCreateInput = {
    id?: string
    fromStatus: $Enums.UserStatus
    toStatus: $Enums.UserStatus
    reason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutStatusTransitionsInput
  }

  export type UserStatusTransitionUncheckedCreateInput = {
    id?: string
    userId: string
    fromStatus: $Enums.UserStatus
    toStatus: $Enums.UserStatus
    reason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserStatusTransitionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    toStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStatusTransitionsNestedInput
  }

  export type UserStatusTransitionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fromStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    toStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatusTransitionCreateManyInput = {
    id?: string
    userId: string
    fromStatus: $Enums.UserStatus
    toStatus: $Enums.UserStatus
    reason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserStatusTransitionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    toStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatusTransitionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    fromStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    toStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumLanguageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLanguageNullableFilter<$PrismaModel> | $Enums.Language | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type ProfileNullableScalarRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type StaffListRelationFilter = {
    every?: StaffWhereInput
    some?: StaffWhereInput
    none?: StaffWhereInput
  }

  export type BeneficiaryListRelationFilter = {
    every?: BeneficiaryWhereInput
    some?: BeneficiaryWhereInput
    none?: BeneficiaryWhereInput
  }

  export type UserStatusTransitionListRelationFilter = {
    every?: UserStatusTransitionWhereInput
    some?: UserStatusTransitionWhereInput
    none?: UserStatusTransitionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BeneficiaryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserStatusTransitionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrder
    preferredLanguage?: SortOrder
    timezone?: SortOrder
    isTwoFactorEnabled?: SortOrder
    status?: SortOrder
    statusChangedAt?: SortOrder
    inactiveReason?: SortOrder
    suspensionReason?: SortOrder
    banReason?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrder
    preferredLanguage?: SortOrder
    timezone?: SortOrder
    isTwoFactorEnabled?: SortOrder
    status?: SortOrder
    statusChangedAt?: SortOrder
    inactiveReason?: SortOrder
    suspensionReason?: SortOrder
    banReason?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrder
    preferredLanguage?: SortOrder
    timezone?: SortOrder
    isTwoFactorEnabled?: SortOrder
    status?: SortOrder
    statusChangedAt?: SortOrder
    inactiveReason?: SortOrder
    suspensionReason?: SortOrder
    banReason?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumLanguageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLanguageNullableWithAggregatesFilter<$PrismaModel> | $Enums.Language | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLanguageNullableFilter<$PrismaModel>
    _max?: NestedEnumLanguageNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    lastLoginAt?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    lastLoginAt?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    lastLoginAt?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isValid?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isValid?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isValid?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PermissionScalarRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionRoleIdPermissionIdCompoundUniqueInput = {
    roleId: string
    permissionId: string
  }

  export type RolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
  }

  export type UserRoleUserIdRoleIdCompoundUniqueInput = {
    userId: string
    roleId: string
  }

  export type UserRoleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type EnumContactMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactMethod | EnumContactMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContactMethodNullableFilter<$PrismaModel> | $Enums.ContactMethod | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type StaffNullableScalarRelationFilter = {
    is?: StaffWhereInput | null
    isNot?: StaffWhereInput | null
  }

  export type BeneficiaryNullableScalarRelationFilter = {
    is?: BeneficiaryWhereInput | null
    isNot?: BeneficiaryWhereInput | null
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    preferredName?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    image?: SortOrder
    address?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactEmail?: SortOrder
    preferredLanguage?: SortOrder
    preferredContactMethod?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    preferredName?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    image?: SortOrder
    address?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactEmail?: SortOrder
    preferredLanguage?: SortOrder
    preferredContactMethod?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    preferredName?: SortOrder
    dob?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    image?: SortOrder
    address?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactEmail?: SortOrder
    preferredLanguage?: SortOrder
    preferredContactMethod?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type EnumContactMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactMethod | EnumContactMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContactMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.ContactMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumContactMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumContactMethodNullableFilter<$PrismaModel>
  }

  export type EnumBaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BaseStatus | EnumBaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BaseStatus[] | ListEnumBaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BaseStatus[] | ListEnumBaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBaseStatusFilter<$PrismaModel> | $Enums.BaseStatus
  }

  export type IndustryNullableScalarRelationFilter = {
    is?: IndustryWhereInput | null
    isNot?: IndustryWhereInput | null
  }

  export type ContractListRelationFilter = {
    every?: ContractWhereInput
    some?: ContractWhereInput
    none?: ContractWhereInput
  }

  export type KPIListRelationFilter = {
    every?: KPIWhereInput
    some?: KPIWhereInput
    none?: KPIWhereInput
  }

  export type KPIAssignmentListRelationFilter = {
    every?: KPIAssignmentWhereInput
    some?: KPIAssignmentWhereInput
    none?: KPIAssignmentWhereInput
  }

  export type ServiceAssignmentListRelationFilter = {
    every?: ServiceAssignmentWhereInput
    some?: ServiceAssignmentWhereInput
    none?: ServiceAssignmentWhereInput
  }

  export type ContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KPIOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KPIAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    address?: SortOrder
    billingAddress?: SortOrder
    taxId?: SortOrder
    contactPerson?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    industryId?: SortOrder
    status?: SortOrder
    preferredContactMethod?: SortOrder
    timezone?: SortOrder
    isVerified?: SortOrder
    notes?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    address?: SortOrder
    billingAddress?: SortOrder
    taxId?: SortOrder
    contactPerson?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    industryId?: SortOrder
    status?: SortOrder
    preferredContactMethod?: SortOrder
    timezone?: SortOrder
    isVerified?: SortOrder
    notes?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    website?: SortOrder
    address?: SortOrder
    billingAddress?: SortOrder
    taxId?: SortOrder
    contactPerson?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    industryId?: SortOrder
    status?: SortOrder
    preferredContactMethod?: SortOrder
    timezone?: SortOrder
    isVerified?: SortOrder
    notes?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumBaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BaseStatus | EnumBaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BaseStatus[] | ListEnumBaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BaseStatus[] | ListEnumBaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.BaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBaseStatusFilter<$PrismaModel>
    _max?: NestedEnumBaseStatusFilter<$PrismaModel>
  }

  export type IndustryListRelationFilter = {
    every?: IndustryWhereInput
    some?: IndustryWhereInput
    none?: IndustryWhereInput
  }

  export type ClientListRelationFilter = {
    every?: ClientWhereInput
    some?: ClientWhereInput
    none?: ClientWhereInput
  }

  export type IndustryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IndustryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    externalId?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IndustryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    externalId?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IndustryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    parentId?: SortOrder
    externalId?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type EnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type ClientScalarRelationFilter = {
    is?: ClientWhereInput
    isNot?: ClientWhereInput
  }

  export type ContractCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    renewalDate?: SortOrder
    billingRate?: SortOrder
    isRenewable?: SortOrder
    isAutoRenew?: SortOrder
    paymentStatus?: SortOrder
    paymentFrequency?: SortOrder
    paymentTerms?: SortOrder
    currency?: SortOrder
    lastBillingDate?: SortOrder
    nextBillingDate?: SortOrder
    documentUrl?: SortOrder
    status?: SortOrder
    signedBy?: SortOrder
    signedAt?: SortOrder
    terminationReason?: SortOrder
    notes?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractAvgOrderByAggregateInput = {
    billingRate?: SortOrder
  }

  export type ContractMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    renewalDate?: SortOrder
    billingRate?: SortOrder
    isRenewable?: SortOrder
    isAutoRenew?: SortOrder
    paymentStatus?: SortOrder
    paymentFrequency?: SortOrder
    paymentTerms?: SortOrder
    currency?: SortOrder
    lastBillingDate?: SortOrder
    nextBillingDate?: SortOrder
    documentUrl?: SortOrder
    status?: SortOrder
    signedBy?: SortOrder
    signedAt?: SortOrder
    terminationReason?: SortOrder
    notes?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    renewalDate?: SortOrder
    billingRate?: SortOrder
    isRenewable?: SortOrder
    isAutoRenew?: SortOrder
    paymentStatus?: SortOrder
    paymentFrequency?: SortOrder
    paymentTerms?: SortOrder
    currency?: SortOrder
    lastBillingDate?: SortOrder
    nextBillingDate?: SortOrder
    documentUrl?: SortOrder
    status?: SortOrder
    signedBy?: SortOrder
    signedAt?: SortOrder
    terminationReason?: SortOrder
    notes?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContractSumOrderByAggregateInput = {
    billingRate?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type ServiceListRelationFilter = {
    every?: ServiceWhereInput
    some?: ServiceWhereInput
    none?: ServiceWhereInput
  }

  export type ServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ServiceCategoryScalarRelationFilter = {
    is?: ServiceCategoryWhereInput
    isNot?: ServiceCategoryWhereInput
  }

  export type ServiceProviderNullableScalarRelationFilter = {
    is?: ServiceProviderWhereInput | null
    isNot?: ServiceProviderWhereInput | null
  }

  export type ServiceSessionListRelationFilter = {
    every?: ServiceSessionWhereInput
    some?: ServiceSessionWhereInput
    none?: ServiceSessionWhereInput
  }

  export type ServiceSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    status?: SortOrder
    duration?: SortOrder
    capacity?: SortOrder
    prerequisites?: SortOrder
    isPublic?: SortOrder
    price?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceProviderId?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    duration?: SortOrder
    capacity?: SortOrder
    price?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    status?: SortOrder
    duration?: SortOrder
    capacity?: SortOrder
    prerequisites?: SortOrder
    isPublic?: SortOrder
    price?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceProviderId?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    status?: SortOrder
    duration?: SortOrder
    capacity?: SortOrder
    prerequisites?: SortOrder
    isPublic?: SortOrder
    price?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serviceProviderId?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    duration?: SortOrder
    capacity?: SortOrder
    price?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumAssignmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusFilter<$PrismaModel> | $Enums.AssignmentStatus
  }

  export type EnumFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumFrequencyFilter<$PrismaModel> | $Enums.Frequency
  }

  export type ServiceScalarRelationFilter = {
    is?: ServiceWhereInput
    isNot?: ServiceWhereInput
  }

  export type ContractScalarRelationFilter = {
    is?: ContractWhereInput
    isNot?: ContractWhereInput
  }

  export type ClientNullableScalarRelationFilter = {
    is?: ClientWhereInput | null
    isNot?: ClientWhereInput | null
  }

  export type ServiceAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    contractId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    frequency?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrder
  }

  export type ServiceAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    contractId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    frequency?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrder
  }

  export type ServiceAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    contractId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    frequency?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrder
  }

  export type EnumAssignmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAssignmentStatusFilter<$PrismaModel>
  }

  export type EnumFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.Frequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFrequencyFilter<$PrismaModel>
    _max?: NestedEnumFrequencyFilter<$PrismaModel>
  }

  export type EnumServiceProviderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceProviderType | EnumServiceProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceProviderType[] | ListEnumServiceProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceProviderType[] | ListEnumServiceProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceProviderTypeFilter<$PrismaModel> | $Enums.ServiceProviderType
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumWorkStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkStatus | EnumWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkStatusFilter<$PrismaModel> | $Enums.WorkStatus
  }

  export type ServiceProviderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    location?: SortOrder
    qualifications?: SortOrder
    specializations?: SortOrder
    availability?: SortOrder
    rating?: SortOrder
    isVerified?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceProviderAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type ServiceProviderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    location?: SortOrder
    rating?: SortOrder
    isVerified?: SortOrder
    deletedAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceProviderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    location?: SortOrder
    rating?: SortOrder
    isVerified?: SortOrder
    deletedAt?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceProviderSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EnumServiceProviderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceProviderType | EnumServiceProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceProviderType[] | ListEnumServiceProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceProviderType[] | ListEnumServiceProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceProviderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServiceProviderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceProviderTypeFilter<$PrismaModel>
    _max?: NestedEnumServiceProviderTypeFilter<$PrismaModel>
  }

  export type EnumWorkStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkStatus | EnumWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkStatusFilter<$PrismaModel>
  }

  export type EnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ServiceProviderScalarRelationFilter = {
    is?: ServiceProviderWhereInput
    isNot?: ServiceProviderWhereInput
  }

  export type SessionFeedbackListRelationFilter = {
    every?: SessionFeedbackWhereInput
    some?: SessionFeedbackWhereInput
    none?: SessionFeedbackWhereInput
  }

  export type SessionFeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceSessionCountOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    scheduledAt?: SortOrder
    completedAt?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    feedback?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    cancellationReason?: SortOrder
    rescheduleCount?: SortOrder
    isGroupSession?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    staffId?: SortOrder
    beneficiaryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceSessionAvgOrderByAggregateInput = {
    duration?: SortOrder
    rescheduleCount?: SortOrder
  }

  export type ServiceSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    scheduledAt?: SortOrder
    completedAt?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    feedback?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    cancellationReason?: SortOrder
    rescheduleCount?: SortOrder
    isGroupSession?: SortOrder
    deletedAt?: SortOrder
    staffId?: SortOrder
    beneficiaryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceSessionMinOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    providerId?: SortOrder
    scheduledAt?: SortOrder
    completedAt?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    feedback?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    cancellationReason?: SortOrder
    rescheduleCount?: SortOrder
    isGroupSession?: SortOrder
    deletedAt?: SortOrder
    staffId?: SortOrder
    beneficiaryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceSessionSumOrderByAggregateInput = {
    duration?: SortOrder
    rescheduleCount?: SortOrder
  }

  export type EnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ServiceSessionScalarRelationFilter = {
    is?: ServiceSessionWhereInput
    isNot?: ServiceSessionWhereInput
  }

  export type SessionFeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionFeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type SessionFeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionFeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionFeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EnumStaffRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.StaffRole | EnumStaffRoleFieldRefInput<$PrismaModel>
    in?: $Enums.StaffRole[] | ListEnumStaffRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StaffRole[] | ListEnumStaffRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumStaffRoleFilter<$PrismaModel> | $Enums.StaffRole
  }

  export type ProfileScalarRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type StaffCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    clientId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    qualifications?: SortOrder
    specializations?: SortOrder
    preferredWorkingHours?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactEmail?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    clientId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactEmail?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    clientId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactEmail?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStaffRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StaffRole | EnumStaffRoleFieldRefInput<$PrismaModel>
    in?: $Enums.StaffRole[] | ListEnumStaffRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StaffRole[] | ListEnumStaffRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumStaffRoleWithAggregatesFilter<$PrismaModel> | $Enums.StaffRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStaffRoleFilter<$PrismaModel>
    _max?: NestedEnumStaffRoleFilter<$PrismaModel>
  }

  export type EnumRelationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RelationType | EnumRelationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RelationType[] | ListEnumRelationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelationType[] | ListEnumRelationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationTypeFilter<$PrismaModel> | $Enums.RelationType
  }

  export type StaffScalarRelationFilter = {
    is?: StaffWhereInput
    isNot?: StaffWhereInput
  }

  export type BeneficiaryCountOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    relation?: SortOrder
    isStaffLink?: SortOrder
    staffId?: SortOrder
    guardianId?: SortOrder
    userLinkId?: SortOrder
    status?: SortOrder
    lastServiceDate?: SortOrder
    preferredLanguage?: SortOrder
    notes?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BeneficiaryMaxOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    relation?: SortOrder
    isStaffLink?: SortOrder
    staffId?: SortOrder
    guardianId?: SortOrder
    userLinkId?: SortOrder
    status?: SortOrder
    lastServiceDate?: SortOrder
    preferredLanguage?: SortOrder
    notes?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BeneficiaryMinOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    relation?: SortOrder
    isStaffLink?: SortOrder
    staffId?: SortOrder
    guardianId?: SortOrder
    userLinkId?: SortOrder
    status?: SortOrder
    lastServiceDate?: SortOrder
    preferredLanguage?: SortOrder
    notes?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRelationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RelationType | EnumRelationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RelationType[] | ListEnumRelationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelationType[] | ListEnumRelationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationTypeWithAggregatesFilter<$PrismaModel> | $Enums.RelationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelationTypeFilter<$PrismaModel>
    _max?: NestedEnumRelationTypeFilter<$PrismaModel>
  }

  export type EnumUnitFilter<$PrismaModel = never> = {
    equals?: $Enums.Unit | EnumUnitFieldRefInput<$PrismaModel>
    in?: $Enums.Unit[] | ListEnumUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.Unit[] | ListEnumUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumUnitFilter<$PrismaModel> | $Enums.Unit
  }

  export type EnumFrequencyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFrequencyNullableFilter<$PrismaModel> | $Enums.Frequency | null
  }

  export type KpiTypeScalarRelationFilter = {
    is?: KpiTypeWhereInput
    isNot?: KpiTypeWhereInput
  }

  export type ContractNullableScalarRelationFilter = {
    is?: ContractWhereInput | null
    isNot?: ContractWhereInput | null
  }

  export type KPICountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
    unit?: SortOrder
    unitType?: SortOrder
    targetValue?: SortOrder
    isPublic?: SortOrder
    calculationMethod?: SortOrder
    frequency?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrder
    contractId?: SortOrder
  }

  export type KPIMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
    unit?: SortOrder
    unitType?: SortOrder
    targetValue?: SortOrder
    isPublic?: SortOrder
    calculationMethod?: SortOrder
    frequency?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrder
    contractId?: SortOrder
  }

  export type KPIMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    typeId?: SortOrder
    unit?: SortOrder
    unitType?: SortOrder
    targetValue?: SortOrder
    isPublic?: SortOrder
    calculationMethod?: SortOrder
    frequency?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrder
    contractId?: SortOrder
  }

  export type EnumUnitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Unit | EnumUnitFieldRefInput<$PrismaModel>
    in?: $Enums.Unit[] | ListEnumUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.Unit[] | ListEnumUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumUnitWithAggregatesFilter<$PrismaModel> | $Enums.Unit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUnitFilter<$PrismaModel>
    _max?: NestedEnumUnitFilter<$PrismaModel>
  }

  export type EnumFrequencyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFrequencyNullableWithAggregatesFilter<$PrismaModel> | $Enums.Frequency | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFrequencyNullableFilter<$PrismaModel>
    _max?: NestedEnumFrequencyNullableFilter<$PrismaModel>
  }

  export type KpiTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    weight?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KpiTypeAvgOrderByAggregateInput = {
    weight?: SortOrder
  }

  export type KpiTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    weight?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KpiTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    weight?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KpiTypeSumOrderByAggregateInput = {
    weight?: SortOrder
  }

  export type KPIScalarRelationFilter = {
    is?: KPIWhereInput
    isNot?: KPIWhereInput
  }

  export type KPIAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    kpiId?: SortOrder
    contractId?: SortOrder
    targetValue?: SortOrder
    frequency?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrder
  }

  export type KPIAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    kpiId?: SortOrder
    contractId?: SortOrder
    targetValue?: SortOrder
    frequency?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrder
  }

  export type KPIAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    kpiId?: SortOrder
    contractId?: SortOrder
    targetValue?: SortOrder
    frequency?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    clientId?: SortOrder
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type EnumDocumentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentStatus | EnumDocumentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentStatus[] | ListEnumDocumentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentStatus[] | ListEnumDocumentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentStatusFilter<$PrismaModel> | $Enums.DocumentStatus
  }

  export type DocumentNullableScalarRelationFilter = {
    is?: DocumentWhereInput | null
    isNot?: DocumentWhereInput | null
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    url?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    version?: SortOrder
    isLatest?: SortOrder
    previousVersionId?: SortOrder
    status?: SortOrder
    expiryDate?: SortOrder
    isConfidential?: SortOrder
    tags?: SortOrder
    metadata?: SortOrder
    deletedAt?: SortOrder
    uploadedById?: SortOrder
    clientId?: SortOrder
    contractId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
    version?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    url?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    version?: SortOrder
    isLatest?: SortOrder
    previousVersionId?: SortOrder
    status?: SortOrder
    expiryDate?: SortOrder
    isConfidential?: SortOrder
    deletedAt?: SortOrder
    uploadedById?: SortOrder
    clientId?: SortOrder
    contractId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    url?: SortOrder
    fileSize?: SortOrder
    fileType?: SortOrder
    version?: SortOrder
    isLatest?: SortOrder
    previousVersionId?: SortOrder
    status?: SortOrder
    expiryDate?: SortOrder
    isConfidential?: SortOrder
    deletedAt?: SortOrder
    uploadedById?: SortOrder
    clientId?: SortOrder
    contractId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DocumentSumOrderByAggregateInput = {
    fileSize?: SortOrder
    version?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type EnumDocumentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentStatus | EnumDocumentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentStatus[] | ListEnumDocumentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentStatus[] | ListEnumDocumentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentStatusWithAggregatesFilter<$PrismaModel> | $Enums.DocumentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentStatusFilter<$PrismaModel>
    _max?: NestedEnumDocumentStatusFilter<$PrismaModel>
  }

  export type EnumActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActionTypeFilter<$PrismaModel> | $Enums.ActionType
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    data?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
    userId?: SortOrder
  }

  export type EnumActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionTypeFilter<$PrismaModel>
    _max?: NestedEnumActionTypeFilter<$PrismaModel>
  }

  export type EnumChangeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChangeType | EnumChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChangeTypeFilter<$PrismaModel> | $Enums.ChangeType
  }

  export type FieldChangeListRelationFilter = {
    every?: FieldChangeWhereInput
    some?: FieldChangeWhereInput
    none?: FieldChangeWhereInput
  }

  export type FieldChangeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EntityChangeEntityTypeEntityIdChangedAtCompoundUniqueInput = {
    entityType: string
    entityId: string
    changedAt: Date | string
  }

  export type EntityChangeCountOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    changedAt?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrder
    oldData?: SortOrder
    newData?: SortOrder
    metadata?: SortOrder
    isActive?: SortOrder
    deletedAt?: SortOrder
  }

  export type EntityChangeMaxOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    changedAt?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrder
    isActive?: SortOrder
    deletedAt?: SortOrder
  }

  export type EntityChangeMinOrderByAggregateInput = {
    id?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    changeType?: SortOrder
    changedAt?: SortOrder
    changedBy?: SortOrder
    changeReason?: SortOrder
    isActive?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumChangeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChangeType | EnumChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChangeTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChangeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChangeTypeFilter<$PrismaModel>
    _max?: NestedEnumChangeTypeFilter<$PrismaModel>
  }

  export type EntityChangeScalarRelationFilter = {
    is?: EntityChangeWhereInput
    isNot?: EntityChangeWhereInput
  }

  export type FieldChangeCountOrderByAggregateInput = {
    id?: SortOrder
    entityChangeId?: SortOrder
    fieldName?: SortOrder
    oldValue?: SortOrder
    newValue?: SortOrder
    changeType?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldChangeMaxOrderByAggregateInput = {
    id?: SortOrder
    entityChangeId?: SortOrder
    fieldName?: SortOrder
    changeType?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldChangeMinOrderByAggregateInput = {
    id?: SortOrder
    entityChangeId?: SortOrder
    fieldName?: SortOrder
    changeType?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserStatusTransitionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    reason?: SortOrder
    metadata?: SortOrder
    changedBy?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type UserStatusTransitionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    reason?: SortOrder
    changedBy?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type UserStatusTransitionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    reason?: SortOrder
    changedBy?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type StaffCreateNestedManyWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput> | StaffCreateWithoutUserInput[] | StaffUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput | StaffCreateOrConnectWithoutUserInput[]
    createMany?: StaffCreateManyUserInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type BeneficiaryCreateNestedManyWithoutUserLinkInput = {
    create?: XOR<BeneficiaryCreateWithoutUserLinkInput, BeneficiaryUncheckedCreateWithoutUserLinkInput> | BeneficiaryCreateWithoutUserLinkInput[] | BeneficiaryUncheckedCreateWithoutUserLinkInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutUserLinkInput | BeneficiaryCreateOrConnectWithoutUserLinkInput[]
    createMany?: BeneficiaryCreateManyUserLinkInputEnvelope
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
  }

  export type BeneficiaryCreateNestedManyWithoutGuardianInput = {
    create?: XOR<BeneficiaryCreateWithoutGuardianInput, BeneficiaryUncheckedCreateWithoutGuardianInput> | BeneficiaryCreateWithoutGuardianInput[] | BeneficiaryUncheckedCreateWithoutGuardianInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutGuardianInput | BeneficiaryCreateOrConnectWithoutGuardianInput[]
    createMany?: BeneficiaryCreateManyGuardianInputEnvelope
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
  }

  export type UserStatusTransitionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStatusTransitionCreateWithoutUserInput, UserStatusTransitionUncheckedCreateWithoutUserInput> | UserStatusTransitionCreateWithoutUserInput[] | UserStatusTransitionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStatusTransitionCreateOrConnectWithoutUserInput | UserStatusTransitionCreateOrConnectWithoutUserInput[]
    createMany?: UserStatusTransitionCreateManyUserInputEnvelope
    connect?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type StaffUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput> | StaffCreateWithoutUserInput[] | StaffUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput | StaffCreateOrConnectWithoutUserInput[]
    createMany?: StaffCreateManyUserInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput = {
    create?: XOR<BeneficiaryCreateWithoutUserLinkInput, BeneficiaryUncheckedCreateWithoutUserLinkInput> | BeneficiaryCreateWithoutUserLinkInput[] | BeneficiaryUncheckedCreateWithoutUserLinkInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutUserLinkInput | BeneficiaryCreateOrConnectWithoutUserLinkInput[]
    createMany?: BeneficiaryCreateManyUserLinkInputEnvelope
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
  }

  export type BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput = {
    create?: XOR<BeneficiaryCreateWithoutGuardianInput, BeneficiaryUncheckedCreateWithoutGuardianInput> | BeneficiaryCreateWithoutGuardianInput[] | BeneficiaryUncheckedCreateWithoutGuardianInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutGuardianInput | BeneficiaryCreateOrConnectWithoutGuardianInput[]
    createMany?: BeneficiaryCreateManyGuardianInputEnvelope
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
  }

  export type UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserStatusTransitionCreateWithoutUserInput, UserStatusTransitionUncheckedCreateWithoutUserInput> | UserStatusTransitionCreateWithoutUserInput[] | UserStatusTransitionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStatusTransitionCreateOrConnectWithoutUserInput | UserStatusTransitionCreateOrConnectWithoutUserInput[]
    createMany?: UserStatusTransitionCreateManyUserInputEnvelope
    connect?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumLanguageFieldUpdateOperationsInput = {
    set?: $Enums.Language | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUploadedByInput | DocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUploadedByInput | DocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUploadedByInput | DocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type StaffUpdateManyWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput> | StaffCreateWithoutUserInput[] | StaffUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput | StaffCreateOrConnectWithoutUserInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutUserInput | StaffUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StaffCreateManyUserInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutUserInput | StaffUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutUserInput | StaffUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type BeneficiaryUpdateManyWithoutUserLinkNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutUserLinkInput, BeneficiaryUncheckedCreateWithoutUserLinkInput> | BeneficiaryCreateWithoutUserLinkInput[] | BeneficiaryUncheckedCreateWithoutUserLinkInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutUserLinkInput | BeneficiaryCreateOrConnectWithoutUserLinkInput[]
    upsert?: BeneficiaryUpsertWithWhereUniqueWithoutUserLinkInput | BeneficiaryUpsertWithWhereUniqueWithoutUserLinkInput[]
    createMany?: BeneficiaryCreateManyUserLinkInputEnvelope
    set?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    disconnect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    delete?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    update?: BeneficiaryUpdateWithWhereUniqueWithoutUserLinkInput | BeneficiaryUpdateWithWhereUniqueWithoutUserLinkInput[]
    updateMany?: BeneficiaryUpdateManyWithWhereWithoutUserLinkInput | BeneficiaryUpdateManyWithWhereWithoutUserLinkInput[]
    deleteMany?: BeneficiaryScalarWhereInput | BeneficiaryScalarWhereInput[]
  }

  export type BeneficiaryUpdateManyWithoutGuardianNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutGuardianInput, BeneficiaryUncheckedCreateWithoutGuardianInput> | BeneficiaryCreateWithoutGuardianInput[] | BeneficiaryUncheckedCreateWithoutGuardianInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutGuardianInput | BeneficiaryCreateOrConnectWithoutGuardianInput[]
    upsert?: BeneficiaryUpsertWithWhereUniqueWithoutGuardianInput | BeneficiaryUpsertWithWhereUniqueWithoutGuardianInput[]
    createMany?: BeneficiaryCreateManyGuardianInputEnvelope
    set?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    disconnect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    delete?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    update?: BeneficiaryUpdateWithWhereUniqueWithoutGuardianInput | BeneficiaryUpdateWithWhereUniqueWithoutGuardianInput[]
    updateMany?: BeneficiaryUpdateManyWithWhereWithoutGuardianInput | BeneficiaryUpdateManyWithWhereWithoutGuardianInput[]
    deleteMany?: BeneficiaryScalarWhereInput | BeneficiaryScalarWhereInput[]
  }

  export type UserStatusTransitionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStatusTransitionCreateWithoutUserInput, UserStatusTransitionUncheckedCreateWithoutUserInput> | UserStatusTransitionCreateWithoutUserInput[] | UserStatusTransitionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStatusTransitionCreateOrConnectWithoutUserInput | UserStatusTransitionCreateOrConnectWithoutUserInput[]
    upsert?: UserStatusTransitionUpsertWithWhereUniqueWithoutUserInput | UserStatusTransitionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStatusTransitionCreateManyUserInputEnvelope
    set?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
    disconnect?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
    delete?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
    connect?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
    update?: UserStatusTransitionUpdateWithWhereUniqueWithoutUserInput | UserStatusTransitionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStatusTransitionUpdateManyWithWhereWithoutUserInput | UserStatusTransitionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStatusTransitionScalarWhereInput | UserStatusTransitionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput> | DocumentCreateWithoutUploadedByInput[] | DocumentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUploadedByInput | DocumentCreateOrConnectWithoutUploadedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUploadedByInput | DocumentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: DocumentCreateManyUploadedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUploadedByInput | DocumentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUploadedByInput | DocumentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type StaffUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput> | StaffCreateWithoutUserInput[] | StaffUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutUserInput | StaffCreateOrConnectWithoutUserInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutUserInput | StaffUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StaffCreateManyUserInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutUserInput | StaffUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutUserInput | StaffUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutUserLinkInput, BeneficiaryUncheckedCreateWithoutUserLinkInput> | BeneficiaryCreateWithoutUserLinkInput[] | BeneficiaryUncheckedCreateWithoutUserLinkInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutUserLinkInput | BeneficiaryCreateOrConnectWithoutUserLinkInput[]
    upsert?: BeneficiaryUpsertWithWhereUniqueWithoutUserLinkInput | BeneficiaryUpsertWithWhereUniqueWithoutUserLinkInput[]
    createMany?: BeneficiaryCreateManyUserLinkInputEnvelope
    set?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    disconnect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    delete?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    update?: BeneficiaryUpdateWithWhereUniqueWithoutUserLinkInput | BeneficiaryUpdateWithWhereUniqueWithoutUserLinkInput[]
    updateMany?: BeneficiaryUpdateManyWithWhereWithoutUserLinkInput | BeneficiaryUpdateManyWithWhereWithoutUserLinkInput[]
    deleteMany?: BeneficiaryScalarWhereInput | BeneficiaryScalarWhereInput[]
  }

  export type BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutGuardianInput, BeneficiaryUncheckedCreateWithoutGuardianInput> | BeneficiaryCreateWithoutGuardianInput[] | BeneficiaryUncheckedCreateWithoutGuardianInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutGuardianInput | BeneficiaryCreateOrConnectWithoutGuardianInput[]
    upsert?: BeneficiaryUpsertWithWhereUniqueWithoutGuardianInput | BeneficiaryUpsertWithWhereUniqueWithoutGuardianInput[]
    createMany?: BeneficiaryCreateManyGuardianInputEnvelope
    set?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    disconnect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    delete?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    update?: BeneficiaryUpdateWithWhereUniqueWithoutGuardianInput | BeneficiaryUpdateWithWhereUniqueWithoutGuardianInput[]
    updateMany?: BeneficiaryUpdateManyWithWhereWithoutGuardianInput | BeneficiaryUpdateManyWithWhereWithoutGuardianInput[]
    deleteMany?: BeneficiaryScalarWhereInput | BeneficiaryScalarWhereInput[]
  }

  export type UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserStatusTransitionCreateWithoutUserInput, UserStatusTransitionUncheckedCreateWithoutUserInput> | UserStatusTransitionCreateWithoutUserInput[] | UserStatusTransitionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserStatusTransitionCreateOrConnectWithoutUserInput | UserStatusTransitionCreateOrConnectWithoutUserInput[]
    upsert?: UserStatusTransitionUpsertWithWhereUniqueWithoutUserInput | UserStatusTransitionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserStatusTransitionCreateManyUserInputEnvelope
    set?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
    disconnect?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
    delete?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
    connect?: UserStatusTransitionWhereUniqueInput | UserStatusTransitionWhereUniqueInput[]
    update?: UserStatusTransitionUpdateWithWhereUniqueWithoutUserInput | UserStatusTransitionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserStatusTransitionUpdateManyWithWhereWithoutUserInput | UserStatusTransitionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserStatusTransitionScalarWhereInput | UserStatusTransitionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type RolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutRolesInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    connect?: PermissionWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    upsert?: RoleUpsertWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutPermissionsInput, RoleUpdateWithoutPermissionsInput>, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    upsert?: PermissionUpsertWithoutRolesInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolesInput, PermissionUpdateWithoutRolesInput>, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type UserCreateNestedOneWithoutUserRolesInput = {
    create?: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRolesInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserRolesNestedInput = {
    create?: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRolesInput
    upsert?: UserUpsertWithoutUserRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRolesInput, UserUpdateWithoutUserRolesInput>, UserUncheckedUpdateWithoutUserRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutProfileInput = {
    create?: XOR<StaffCreateWithoutProfileInput, StaffUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StaffCreateOrConnectWithoutProfileInput
    connect?: StaffWhereUniqueInput
  }

  export type BeneficiaryCreateNestedOneWithoutProfileInput = {
    create?: XOR<BeneficiaryCreateWithoutProfileInput, BeneficiaryUncheckedCreateWithoutProfileInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutProfileInput
    connect?: BeneficiaryWhereUniqueInput
  }

  export type StaffUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<StaffCreateWithoutProfileInput, StaffUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StaffCreateOrConnectWithoutProfileInput
    connect?: StaffWhereUniqueInput
  }

  export type BeneficiaryUncheckedCreateNestedOneWithoutProfileInput = {
    create?: XOR<BeneficiaryCreateWithoutProfileInput, BeneficiaryUncheckedCreateWithoutProfileInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutProfileInput
    connect?: BeneficiaryWhereUniqueInput
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type NullableEnumContactMethodFieldUpdateOperationsInput = {
    set?: $Enums.ContactMethod | null
  }

  export type UserUpdateOneWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type StaffUpdateOneWithoutProfileNestedInput = {
    create?: XOR<StaffCreateWithoutProfileInput, StaffUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StaffCreateOrConnectWithoutProfileInput
    upsert?: StaffUpsertWithoutProfileInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutProfileInput, StaffUpdateWithoutProfileInput>, StaffUncheckedUpdateWithoutProfileInput>
  }

  export type BeneficiaryUpdateOneWithoutProfileNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutProfileInput, BeneficiaryUncheckedCreateWithoutProfileInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutProfileInput
    upsert?: BeneficiaryUpsertWithoutProfileInput
    disconnect?: BeneficiaryWhereInput | boolean
    delete?: BeneficiaryWhereInput | boolean
    connect?: BeneficiaryWhereUniqueInput
    update?: XOR<XOR<BeneficiaryUpdateToOneWithWhereWithoutProfileInput, BeneficiaryUpdateWithoutProfileInput>, BeneficiaryUncheckedUpdateWithoutProfileInput>
  }

  export type StaffUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<StaffCreateWithoutProfileInput, StaffUncheckedCreateWithoutProfileInput>
    connectOrCreate?: StaffCreateOrConnectWithoutProfileInput
    upsert?: StaffUpsertWithoutProfileInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutProfileInput, StaffUpdateWithoutProfileInput>, StaffUncheckedUpdateWithoutProfileInput>
  }

  export type BeneficiaryUncheckedUpdateOneWithoutProfileNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutProfileInput, BeneficiaryUncheckedCreateWithoutProfileInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutProfileInput
    upsert?: BeneficiaryUpsertWithoutProfileInput
    disconnect?: BeneficiaryWhereInput | boolean
    delete?: BeneficiaryWhereInput | boolean
    connect?: BeneficiaryWhereUniqueInput
    update?: XOR<XOR<BeneficiaryUpdateToOneWithWhereWithoutProfileInput, BeneficiaryUpdateWithoutProfileInput>, BeneficiaryUncheckedUpdateWithoutProfileInput>
  }

  export type IndustryCreateNestedOneWithoutClientsInput = {
    create?: XOR<IndustryCreateWithoutClientsInput, IndustryUncheckedCreateWithoutClientsInput>
    connectOrCreate?: IndustryCreateOrConnectWithoutClientsInput
    connect?: IndustryWhereUniqueInput
  }

  export type ContractCreateNestedManyWithoutClientInput = {
    create?: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput> | ContractCreateWithoutClientInput[] | ContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutClientInput | ContractCreateOrConnectWithoutClientInput[]
    createMany?: ContractCreateManyClientInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutClientInput = {
    create?: XOR<DocumentCreateWithoutClientInput, DocumentUncheckedCreateWithoutClientInput> | DocumentCreateWithoutClientInput[] | DocumentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutClientInput | DocumentCreateOrConnectWithoutClientInput[]
    createMany?: DocumentCreateManyClientInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type KPICreateNestedManyWithoutClientInput = {
    create?: XOR<KPICreateWithoutClientInput, KPIUncheckedCreateWithoutClientInput> | KPICreateWithoutClientInput[] | KPIUncheckedCreateWithoutClientInput[]
    connectOrCreate?: KPICreateOrConnectWithoutClientInput | KPICreateOrConnectWithoutClientInput[]
    createMany?: KPICreateManyClientInputEnvelope
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
  }

  export type KPIAssignmentCreateNestedManyWithoutClientInput = {
    create?: XOR<KPIAssignmentCreateWithoutClientInput, KPIAssignmentUncheckedCreateWithoutClientInput> | KPIAssignmentCreateWithoutClientInput[] | KPIAssignmentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutClientInput | KPIAssignmentCreateOrConnectWithoutClientInput[]
    createMany?: KPIAssignmentCreateManyClientInputEnvelope
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
  }

  export type ServiceAssignmentCreateNestedManyWithoutClientInput = {
    create?: XOR<ServiceAssignmentCreateWithoutClientInput, ServiceAssignmentUncheckedCreateWithoutClientInput> | ServiceAssignmentCreateWithoutClientInput[] | ServiceAssignmentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutClientInput | ServiceAssignmentCreateOrConnectWithoutClientInput[]
    createMany?: ServiceAssignmentCreateManyClientInputEnvelope
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
  }

  export type StaffCreateNestedManyWithoutClientInput = {
    create?: XOR<StaffCreateWithoutClientInput, StaffUncheckedCreateWithoutClientInput> | StaffCreateWithoutClientInput[] | StaffUncheckedCreateWithoutClientInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutClientInput | StaffCreateOrConnectWithoutClientInput[]
    createMany?: StaffCreateManyClientInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type ContractUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput> | ContractCreateWithoutClientInput[] | ContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutClientInput | ContractCreateOrConnectWithoutClientInput[]
    createMany?: ContractCreateManyClientInputEnvelope
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<DocumentCreateWithoutClientInput, DocumentUncheckedCreateWithoutClientInput> | DocumentCreateWithoutClientInput[] | DocumentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutClientInput | DocumentCreateOrConnectWithoutClientInput[]
    createMany?: DocumentCreateManyClientInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type KPIUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<KPICreateWithoutClientInput, KPIUncheckedCreateWithoutClientInput> | KPICreateWithoutClientInput[] | KPIUncheckedCreateWithoutClientInput[]
    connectOrCreate?: KPICreateOrConnectWithoutClientInput | KPICreateOrConnectWithoutClientInput[]
    createMany?: KPICreateManyClientInputEnvelope
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
  }

  export type KPIAssignmentUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<KPIAssignmentCreateWithoutClientInput, KPIAssignmentUncheckedCreateWithoutClientInput> | KPIAssignmentCreateWithoutClientInput[] | KPIAssignmentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutClientInput | KPIAssignmentCreateOrConnectWithoutClientInput[]
    createMany?: KPIAssignmentCreateManyClientInputEnvelope
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
  }

  export type ServiceAssignmentUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ServiceAssignmentCreateWithoutClientInput, ServiceAssignmentUncheckedCreateWithoutClientInput> | ServiceAssignmentCreateWithoutClientInput[] | ServiceAssignmentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutClientInput | ServiceAssignmentCreateOrConnectWithoutClientInput[]
    createMany?: ServiceAssignmentCreateManyClientInputEnvelope
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
  }

  export type StaffUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<StaffCreateWithoutClientInput, StaffUncheckedCreateWithoutClientInput> | StaffCreateWithoutClientInput[] | StaffUncheckedCreateWithoutClientInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutClientInput | StaffCreateOrConnectWithoutClientInput[]
    createMany?: StaffCreateManyClientInputEnvelope
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
  }

  export type EnumBaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.BaseStatus
  }

  export type IndustryUpdateOneWithoutClientsNestedInput = {
    create?: XOR<IndustryCreateWithoutClientsInput, IndustryUncheckedCreateWithoutClientsInput>
    connectOrCreate?: IndustryCreateOrConnectWithoutClientsInput
    upsert?: IndustryUpsertWithoutClientsInput
    disconnect?: IndustryWhereInput | boolean
    delete?: IndustryWhereInput | boolean
    connect?: IndustryWhereUniqueInput
    update?: XOR<XOR<IndustryUpdateToOneWithWhereWithoutClientsInput, IndustryUpdateWithoutClientsInput>, IndustryUncheckedUpdateWithoutClientsInput>
  }

  export type ContractUpdateManyWithoutClientNestedInput = {
    create?: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput> | ContractCreateWithoutClientInput[] | ContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutClientInput | ContractCreateOrConnectWithoutClientInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutClientInput | ContractUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ContractCreateManyClientInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutClientInput | ContractUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutClientInput | ContractUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutClientNestedInput = {
    create?: XOR<DocumentCreateWithoutClientInput, DocumentUncheckedCreateWithoutClientInput> | DocumentCreateWithoutClientInput[] | DocumentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutClientInput | DocumentCreateOrConnectWithoutClientInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutClientInput | DocumentUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: DocumentCreateManyClientInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutClientInput | DocumentUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutClientInput | DocumentUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type KPIUpdateManyWithoutClientNestedInput = {
    create?: XOR<KPICreateWithoutClientInput, KPIUncheckedCreateWithoutClientInput> | KPICreateWithoutClientInput[] | KPIUncheckedCreateWithoutClientInput[]
    connectOrCreate?: KPICreateOrConnectWithoutClientInput | KPICreateOrConnectWithoutClientInput[]
    upsert?: KPIUpsertWithWhereUniqueWithoutClientInput | KPIUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: KPICreateManyClientInputEnvelope
    set?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    disconnect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    delete?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    update?: KPIUpdateWithWhereUniqueWithoutClientInput | KPIUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: KPIUpdateManyWithWhereWithoutClientInput | KPIUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: KPIScalarWhereInput | KPIScalarWhereInput[]
  }

  export type KPIAssignmentUpdateManyWithoutClientNestedInput = {
    create?: XOR<KPIAssignmentCreateWithoutClientInput, KPIAssignmentUncheckedCreateWithoutClientInput> | KPIAssignmentCreateWithoutClientInput[] | KPIAssignmentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutClientInput | KPIAssignmentCreateOrConnectWithoutClientInput[]
    upsert?: KPIAssignmentUpsertWithWhereUniqueWithoutClientInput | KPIAssignmentUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: KPIAssignmentCreateManyClientInputEnvelope
    set?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    disconnect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    delete?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    update?: KPIAssignmentUpdateWithWhereUniqueWithoutClientInput | KPIAssignmentUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: KPIAssignmentUpdateManyWithWhereWithoutClientInput | KPIAssignmentUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: KPIAssignmentScalarWhereInput | KPIAssignmentScalarWhereInput[]
  }

  export type ServiceAssignmentUpdateManyWithoutClientNestedInput = {
    create?: XOR<ServiceAssignmentCreateWithoutClientInput, ServiceAssignmentUncheckedCreateWithoutClientInput> | ServiceAssignmentCreateWithoutClientInput[] | ServiceAssignmentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutClientInput | ServiceAssignmentCreateOrConnectWithoutClientInput[]
    upsert?: ServiceAssignmentUpsertWithWhereUniqueWithoutClientInput | ServiceAssignmentUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ServiceAssignmentCreateManyClientInputEnvelope
    set?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    disconnect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    delete?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    update?: ServiceAssignmentUpdateWithWhereUniqueWithoutClientInput | ServiceAssignmentUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ServiceAssignmentUpdateManyWithWhereWithoutClientInput | ServiceAssignmentUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ServiceAssignmentScalarWhereInput | ServiceAssignmentScalarWhereInput[]
  }

  export type StaffUpdateManyWithoutClientNestedInput = {
    create?: XOR<StaffCreateWithoutClientInput, StaffUncheckedCreateWithoutClientInput> | StaffCreateWithoutClientInput[] | StaffUncheckedCreateWithoutClientInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutClientInput | StaffCreateOrConnectWithoutClientInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutClientInput | StaffUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: StaffCreateManyClientInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutClientInput | StaffUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutClientInput | StaffUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type ContractUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput> | ContractCreateWithoutClientInput[] | ContractUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ContractCreateOrConnectWithoutClientInput | ContractCreateOrConnectWithoutClientInput[]
    upsert?: ContractUpsertWithWhereUniqueWithoutClientInput | ContractUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ContractCreateManyClientInputEnvelope
    set?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    disconnect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    delete?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    connect?: ContractWhereUniqueInput | ContractWhereUniqueInput[]
    update?: ContractUpdateWithWhereUniqueWithoutClientInput | ContractUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ContractUpdateManyWithWhereWithoutClientInput | ContractUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ContractScalarWhereInput | ContractScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<DocumentCreateWithoutClientInput, DocumentUncheckedCreateWithoutClientInput> | DocumentCreateWithoutClientInput[] | DocumentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutClientInput | DocumentCreateOrConnectWithoutClientInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutClientInput | DocumentUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: DocumentCreateManyClientInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutClientInput | DocumentUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutClientInput | DocumentUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type KPIUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<KPICreateWithoutClientInput, KPIUncheckedCreateWithoutClientInput> | KPICreateWithoutClientInput[] | KPIUncheckedCreateWithoutClientInput[]
    connectOrCreate?: KPICreateOrConnectWithoutClientInput | KPICreateOrConnectWithoutClientInput[]
    upsert?: KPIUpsertWithWhereUniqueWithoutClientInput | KPIUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: KPICreateManyClientInputEnvelope
    set?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    disconnect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    delete?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    update?: KPIUpdateWithWhereUniqueWithoutClientInput | KPIUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: KPIUpdateManyWithWhereWithoutClientInput | KPIUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: KPIScalarWhereInput | KPIScalarWhereInput[]
  }

  export type KPIAssignmentUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<KPIAssignmentCreateWithoutClientInput, KPIAssignmentUncheckedCreateWithoutClientInput> | KPIAssignmentCreateWithoutClientInput[] | KPIAssignmentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutClientInput | KPIAssignmentCreateOrConnectWithoutClientInput[]
    upsert?: KPIAssignmentUpsertWithWhereUniqueWithoutClientInput | KPIAssignmentUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: KPIAssignmentCreateManyClientInputEnvelope
    set?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    disconnect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    delete?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    update?: KPIAssignmentUpdateWithWhereUniqueWithoutClientInput | KPIAssignmentUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: KPIAssignmentUpdateManyWithWhereWithoutClientInput | KPIAssignmentUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: KPIAssignmentScalarWhereInput | KPIAssignmentScalarWhereInput[]
  }

  export type ServiceAssignmentUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ServiceAssignmentCreateWithoutClientInput, ServiceAssignmentUncheckedCreateWithoutClientInput> | ServiceAssignmentCreateWithoutClientInput[] | ServiceAssignmentUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutClientInput | ServiceAssignmentCreateOrConnectWithoutClientInput[]
    upsert?: ServiceAssignmentUpsertWithWhereUniqueWithoutClientInput | ServiceAssignmentUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ServiceAssignmentCreateManyClientInputEnvelope
    set?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    disconnect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    delete?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    update?: ServiceAssignmentUpdateWithWhereUniqueWithoutClientInput | ServiceAssignmentUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ServiceAssignmentUpdateManyWithWhereWithoutClientInput | ServiceAssignmentUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ServiceAssignmentScalarWhereInput | ServiceAssignmentScalarWhereInput[]
  }

  export type StaffUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<StaffCreateWithoutClientInput, StaffUncheckedCreateWithoutClientInput> | StaffCreateWithoutClientInput[] | StaffUncheckedCreateWithoutClientInput[]
    connectOrCreate?: StaffCreateOrConnectWithoutClientInput | StaffCreateOrConnectWithoutClientInput[]
    upsert?: StaffUpsertWithWhereUniqueWithoutClientInput | StaffUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: StaffCreateManyClientInputEnvelope
    set?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    disconnect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    delete?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    connect?: StaffWhereUniqueInput | StaffWhereUniqueInput[]
    update?: StaffUpdateWithWhereUniqueWithoutClientInput | StaffUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: StaffUpdateManyWithWhereWithoutClientInput | StaffUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: StaffScalarWhereInput | StaffScalarWhereInput[]
  }

  export type IndustryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<IndustryCreateWithoutChildrenInput, IndustryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: IndustryCreateOrConnectWithoutChildrenInput
    connect?: IndustryWhereUniqueInput
  }

  export type IndustryCreateNestedManyWithoutParentInput = {
    create?: XOR<IndustryCreateWithoutParentInput, IndustryUncheckedCreateWithoutParentInput> | IndustryCreateWithoutParentInput[] | IndustryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: IndustryCreateOrConnectWithoutParentInput | IndustryCreateOrConnectWithoutParentInput[]
    createMany?: IndustryCreateManyParentInputEnvelope
    connect?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
  }

  export type ClientCreateNestedManyWithoutIndustryInput = {
    create?: XOR<ClientCreateWithoutIndustryInput, ClientUncheckedCreateWithoutIndustryInput> | ClientCreateWithoutIndustryInput[] | ClientUncheckedCreateWithoutIndustryInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutIndustryInput | ClientCreateOrConnectWithoutIndustryInput[]
    createMany?: ClientCreateManyIndustryInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type IndustryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<IndustryCreateWithoutParentInput, IndustryUncheckedCreateWithoutParentInput> | IndustryCreateWithoutParentInput[] | IndustryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: IndustryCreateOrConnectWithoutParentInput | IndustryCreateOrConnectWithoutParentInput[]
    createMany?: IndustryCreateManyParentInputEnvelope
    connect?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
  }

  export type ClientUncheckedCreateNestedManyWithoutIndustryInput = {
    create?: XOR<ClientCreateWithoutIndustryInput, ClientUncheckedCreateWithoutIndustryInput> | ClientCreateWithoutIndustryInput[] | ClientUncheckedCreateWithoutIndustryInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutIndustryInput | ClientCreateOrConnectWithoutIndustryInput[]
    createMany?: ClientCreateManyIndustryInputEnvelope
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
  }

  export type IndustryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<IndustryCreateWithoutChildrenInput, IndustryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: IndustryCreateOrConnectWithoutChildrenInput
    upsert?: IndustryUpsertWithoutChildrenInput
    disconnect?: IndustryWhereInput | boolean
    delete?: IndustryWhereInput | boolean
    connect?: IndustryWhereUniqueInput
    update?: XOR<XOR<IndustryUpdateToOneWithWhereWithoutChildrenInput, IndustryUpdateWithoutChildrenInput>, IndustryUncheckedUpdateWithoutChildrenInput>
  }

  export type IndustryUpdateManyWithoutParentNestedInput = {
    create?: XOR<IndustryCreateWithoutParentInput, IndustryUncheckedCreateWithoutParentInput> | IndustryCreateWithoutParentInput[] | IndustryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: IndustryCreateOrConnectWithoutParentInput | IndustryCreateOrConnectWithoutParentInput[]
    upsert?: IndustryUpsertWithWhereUniqueWithoutParentInput | IndustryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: IndustryCreateManyParentInputEnvelope
    set?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
    disconnect?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
    delete?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
    connect?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
    update?: IndustryUpdateWithWhereUniqueWithoutParentInput | IndustryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: IndustryUpdateManyWithWhereWithoutParentInput | IndustryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: IndustryScalarWhereInput | IndustryScalarWhereInput[]
  }

  export type ClientUpdateManyWithoutIndustryNestedInput = {
    create?: XOR<ClientCreateWithoutIndustryInput, ClientUncheckedCreateWithoutIndustryInput> | ClientCreateWithoutIndustryInput[] | ClientUncheckedCreateWithoutIndustryInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutIndustryInput | ClientCreateOrConnectWithoutIndustryInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutIndustryInput | ClientUpsertWithWhereUniqueWithoutIndustryInput[]
    createMany?: ClientCreateManyIndustryInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutIndustryInput | ClientUpdateWithWhereUniqueWithoutIndustryInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutIndustryInput | ClientUpdateManyWithWhereWithoutIndustryInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type IndustryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<IndustryCreateWithoutParentInput, IndustryUncheckedCreateWithoutParentInput> | IndustryCreateWithoutParentInput[] | IndustryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: IndustryCreateOrConnectWithoutParentInput | IndustryCreateOrConnectWithoutParentInput[]
    upsert?: IndustryUpsertWithWhereUniqueWithoutParentInput | IndustryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: IndustryCreateManyParentInputEnvelope
    set?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
    disconnect?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
    delete?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
    connect?: IndustryWhereUniqueInput | IndustryWhereUniqueInput[]
    update?: IndustryUpdateWithWhereUniqueWithoutParentInput | IndustryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: IndustryUpdateManyWithWhereWithoutParentInput | IndustryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: IndustryScalarWhereInput | IndustryScalarWhereInput[]
  }

  export type ClientUncheckedUpdateManyWithoutIndustryNestedInput = {
    create?: XOR<ClientCreateWithoutIndustryInput, ClientUncheckedCreateWithoutIndustryInput> | ClientCreateWithoutIndustryInput[] | ClientUncheckedCreateWithoutIndustryInput[]
    connectOrCreate?: ClientCreateOrConnectWithoutIndustryInput | ClientCreateOrConnectWithoutIndustryInput[]
    upsert?: ClientUpsertWithWhereUniqueWithoutIndustryInput | ClientUpsertWithWhereUniqueWithoutIndustryInput[]
    createMany?: ClientCreateManyIndustryInputEnvelope
    set?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    disconnect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    delete?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    connect?: ClientWhereUniqueInput | ClientWhereUniqueInput[]
    update?: ClientUpdateWithWhereUniqueWithoutIndustryInput | ClientUpdateWithWhereUniqueWithoutIndustryInput[]
    updateMany?: ClientUpdateManyWithWhereWithoutIndustryInput | ClientUpdateManyWithWhereWithoutIndustryInput[]
    deleteMany?: ClientScalarWhereInput | ClientScalarWhereInput[]
  }

  export type ClientCreateNestedOneWithoutContractsInput = {
    create?: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutContractsInput
    connect?: ClientWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutContractInput = {
    create?: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput> | DocumentCreateWithoutContractInput[] | DocumentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutContractInput | DocumentCreateOrConnectWithoutContractInput[]
    createMany?: DocumentCreateManyContractInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type KPICreateNestedManyWithoutContractInput = {
    create?: XOR<KPICreateWithoutContractInput, KPIUncheckedCreateWithoutContractInput> | KPICreateWithoutContractInput[] | KPIUncheckedCreateWithoutContractInput[]
    connectOrCreate?: KPICreateOrConnectWithoutContractInput | KPICreateOrConnectWithoutContractInput[]
    createMany?: KPICreateManyContractInputEnvelope
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
  }

  export type KPIAssignmentCreateNestedManyWithoutContractInput = {
    create?: XOR<KPIAssignmentCreateWithoutContractInput, KPIAssignmentUncheckedCreateWithoutContractInput> | KPIAssignmentCreateWithoutContractInput[] | KPIAssignmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutContractInput | KPIAssignmentCreateOrConnectWithoutContractInput[]
    createMany?: KPIAssignmentCreateManyContractInputEnvelope
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
  }

  export type ServiceAssignmentCreateNestedManyWithoutContractInput = {
    create?: XOR<ServiceAssignmentCreateWithoutContractInput, ServiceAssignmentUncheckedCreateWithoutContractInput> | ServiceAssignmentCreateWithoutContractInput[] | ServiceAssignmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutContractInput | ServiceAssignmentCreateOrConnectWithoutContractInput[]
    createMany?: ServiceAssignmentCreateManyContractInputEnvelope
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput> | DocumentCreateWithoutContractInput[] | DocumentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutContractInput | DocumentCreateOrConnectWithoutContractInput[]
    createMany?: DocumentCreateManyContractInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type KPIUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<KPICreateWithoutContractInput, KPIUncheckedCreateWithoutContractInput> | KPICreateWithoutContractInput[] | KPIUncheckedCreateWithoutContractInput[]
    connectOrCreate?: KPICreateOrConnectWithoutContractInput | KPICreateOrConnectWithoutContractInput[]
    createMany?: KPICreateManyContractInputEnvelope
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
  }

  export type KPIAssignmentUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<KPIAssignmentCreateWithoutContractInput, KPIAssignmentUncheckedCreateWithoutContractInput> | KPIAssignmentCreateWithoutContractInput[] | KPIAssignmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutContractInput | KPIAssignmentCreateOrConnectWithoutContractInput[]
    createMany?: KPIAssignmentCreateManyContractInputEnvelope
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
  }

  export type ServiceAssignmentUncheckedCreateNestedManyWithoutContractInput = {
    create?: XOR<ServiceAssignmentCreateWithoutContractInput, ServiceAssignmentUncheckedCreateWithoutContractInput> | ServiceAssignmentCreateWithoutContractInput[] | ServiceAssignmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutContractInput | ServiceAssignmentCreateOrConnectWithoutContractInput[]
    createMany?: ServiceAssignmentCreateManyContractInputEnvelope
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type EnumContractStatusFieldUpdateOperationsInput = {
    set?: $Enums.ContractStatus
  }

  export type ClientUpdateOneRequiredWithoutContractsNestedInput = {
    create?: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutContractsInput
    upsert?: ClientUpsertWithoutContractsInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutContractsInput, ClientUpdateWithoutContractsInput>, ClientUncheckedUpdateWithoutContractsInput>
  }

  export type DocumentUpdateManyWithoutContractNestedInput = {
    create?: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput> | DocumentCreateWithoutContractInput[] | DocumentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutContractInput | DocumentCreateOrConnectWithoutContractInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutContractInput | DocumentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: DocumentCreateManyContractInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutContractInput | DocumentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutContractInput | DocumentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type KPIUpdateManyWithoutContractNestedInput = {
    create?: XOR<KPICreateWithoutContractInput, KPIUncheckedCreateWithoutContractInput> | KPICreateWithoutContractInput[] | KPIUncheckedCreateWithoutContractInput[]
    connectOrCreate?: KPICreateOrConnectWithoutContractInput | KPICreateOrConnectWithoutContractInput[]
    upsert?: KPIUpsertWithWhereUniqueWithoutContractInput | KPIUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: KPICreateManyContractInputEnvelope
    set?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    disconnect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    delete?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    update?: KPIUpdateWithWhereUniqueWithoutContractInput | KPIUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: KPIUpdateManyWithWhereWithoutContractInput | KPIUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: KPIScalarWhereInput | KPIScalarWhereInput[]
  }

  export type KPIAssignmentUpdateManyWithoutContractNestedInput = {
    create?: XOR<KPIAssignmentCreateWithoutContractInput, KPIAssignmentUncheckedCreateWithoutContractInput> | KPIAssignmentCreateWithoutContractInput[] | KPIAssignmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutContractInput | KPIAssignmentCreateOrConnectWithoutContractInput[]
    upsert?: KPIAssignmentUpsertWithWhereUniqueWithoutContractInput | KPIAssignmentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: KPIAssignmentCreateManyContractInputEnvelope
    set?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    disconnect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    delete?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    update?: KPIAssignmentUpdateWithWhereUniqueWithoutContractInput | KPIAssignmentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: KPIAssignmentUpdateManyWithWhereWithoutContractInput | KPIAssignmentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: KPIAssignmentScalarWhereInput | KPIAssignmentScalarWhereInput[]
  }

  export type ServiceAssignmentUpdateManyWithoutContractNestedInput = {
    create?: XOR<ServiceAssignmentCreateWithoutContractInput, ServiceAssignmentUncheckedCreateWithoutContractInput> | ServiceAssignmentCreateWithoutContractInput[] | ServiceAssignmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutContractInput | ServiceAssignmentCreateOrConnectWithoutContractInput[]
    upsert?: ServiceAssignmentUpsertWithWhereUniqueWithoutContractInput | ServiceAssignmentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ServiceAssignmentCreateManyContractInputEnvelope
    set?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    disconnect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    delete?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    update?: ServiceAssignmentUpdateWithWhereUniqueWithoutContractInput | ServiceAssignmentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ServiceAssignmentUpdateManyWithWhereWithoutContractInput | ServiceAssignmentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ServiceAssignmentScalarWhereInput | ServiceAssignmentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput> | DocumentCreateWithoutContractInput[] | DocumentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutContractInput | DocumentCreateOrConnectWithoutContractInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutContractInput | DocumentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: DocumentCreateManyContractInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutContractInput | DocumentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutContractInput | DocumentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type KPIUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<KPICreateWithoutContractInput, KPIUncheckedCreateWithoutContractInput> | KPICreateWithoutContractInput[] | KPIUncheckedCreateWithoutContractInput[]
    connectOrCreate?: KPICreateOrConnectWithoutContractInput | KPICreateOrConnectWithoutContractInput[]
    upsert?: KPIUpsertWithWhereUniqueWithoutContractInput | KPIUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: KPICreateManyContractInputEnvelope
    set?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    disconnect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    delete?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    update?: KPIUpdateWithWhereUniqueWithoutContractInput | KPIUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: KPIUpdateManyWithWhereWithoutContractInput | KPIUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: KPIScalarWhereInput | KPIScalarWhereInput[]
  }

  export type KPIAssignmentUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<KPIAssignmentCreateWithoutContractInput, KPIAssignmentUncheckedCreateWithoutContractInput> | KPIAssignmentCreateWithoutContractInput[] | KPIAssignmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutContractInput | KPIAssignmentCreateOrConnectWithoutContractInput[]
    upsert?: KPIAssignmentUpsertWithWhereUniqueWithoutContractInput | KPIAssignmentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: KPIAssignmentCreateManyContractInputEnvelope
    set?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    disconnect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    delete?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    update?: KPIAssignmentUpdateWithWhereUniqueWithoutContractInput | KPIAssignmentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: KPIAssignmentUpdateManyWithWhereWithoutContractInput | KPIAssignmentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: KPIAssignmentScalarWhereInput | KPIAssignmentScalarWhereInput[]
  }

  export type ServiceAssignmentUncheckedUpdateManyWithoutContractNestedInput = {
    create?: XOR<ServiceAssignmentCreateWithoutContractInput, ServiceAssignmentUncheckedCreateWithoutContractInput> | ServiceAssignmentCreateWithoutContractInput[] | ServiceAssignmentUncheckedCreateWithoutContractInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutContractInput | ServiceAssignmentCreateOrConnectWithoutContractInput[]
    upsert?: ServiceAssignmentUpsertWithWhereUniqueWithoutContractInput | ServiceAssignmentUpsertWithWhereUniqueWithoutContractInput[]
    createMany?: ServiceAssignmentCreateManyContractInputEnvelope
    set?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    disconnect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    delete?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    update?: ServiceAssignmentUpdateWithWhereUniqueWithoutContractInput | ServiceAssignmentUpdateWithWhereUniqueWithoutContractInput[]
    updateMany?: ServiceAssignmentUpdateManyWithWhereWithoutContractInput | ServiceAssignmentUpdateManyWithWhereWithoutContractInput[]
    deleteMany?: ServiceAssignmentScalarWhereInput | ServiceAssignmentScalarWhereInput[]
  }

  export type ServiceCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput> | ServiceCreateWithoutCategoryInput[] | ServiceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCategoryInput | ServiceCreateOrConnectWithoutCategoryInput[]
    createMany?: ServiceCreateManyCategoryInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput> | ServiceCreateWithoutCategoryInput[] | ServiceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCategoryInput | ServiceCreateOrConnectWithoutCategoryInput[]
    createMany?: ServiceCreateManyCategoryInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ServiceUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput> | ServiceCreateWithoutCategoryInput[] | ServiceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCategoryInput | ServiceCreateOrConnectWithoutCategoryInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutCategoryInput | ServiceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ServiceCreateManyCategoryInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutCategoryInput | ServiceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutCategoryInput | ServiceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput> | ServiceCreateWithoutCategoryInput[] | ServiceUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCategoryInput | ServiceCreateOrConnectWithoutCategoryInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutCategoryInput | ServiceUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ServiceCreateManyCategoryInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutCategoryInput | ServiceUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutCategoryInput | ServiceUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ServiceCategoryCreateNestedOneWithoutServicesInput = {
    create?: XOR<ServiceCategoryCreateWithoutServicesInput, ServiceCategoryUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutServicesInput
    connect?: ServiceCategoryWhereUniqueInput
  }

  export type ServiceAssignmentCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceAssignmentCreateWithoutServiceInput, ServiceAssignmentUncheckedCreateWithoutServiceInput> | ServiceAssignmentCreateWithoutServiceInput[] | ServiceAssignmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutServiceInput | ServiceAssignmentCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceAssignmentCreateManyServiceInputEnvelope
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
  }

  export type ServiceProviderCreateNestedOneWithoutServicesInput = {
    create?: XOR<ServiceProviderCreateWithoutServicesInput, ServiceProviderUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ServiceProviderCreateOrConnectWithoutServicesInput
    connect?: ServiceProviderWhereUniqueInput
  }

  export type ServiceSessionCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceSessionCreateWithoutServiceInput, ServiceSessionUncheckedCreateWithoutServiceInput> | ServiceSessionCreateWithoutServiceInput[] | ServiceSessionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutServiceInput | ServiceSessionCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceSessionCreateManyServiceInputEnvelope
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
  }

  export type ServiceAssignmentUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceAssignmentCreateWithoutServiceInput, ServiceAssignmentUncheckedCreateWithoutServiceInput> | ServiceAssignmentCreateWithoutServiceInput[] | ServiceAssignmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutServiceInput | ServiceAssignmentCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceAssignmentCreateManyServiceInputEnvelope
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
  }

  export type ServiceSessionUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceSessionCreateWithoutServiceInput, ServiceSessionUncheckedCreateWithoutServiceInput> | ServiceSessionCreateWithoutServiceInput[] | ServiceSessionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutServiceInput | ServiceSessionCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceSessionCreateManyServiceInputEnvelope
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<ServiceCategoryCreateWithoutServicesInput, ServiceCategoryUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ServiceCategoryCreateOrConnectWithoutServicesInput
    upsert?: ServiceCategoryUpsertWithoutServicesInput
    connect?: ServiceCategoryWhereUniqueInput
    update?: XOR<XOR<ServiceCategoryUpdateToOneWithWhereWithoutServicesInput, ServiceCategoryUpdateWithoutServicesInput>, ServiceCategoryUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceAssignmentUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceAssignmentCreateWithoutServiceInput, ServiceAssignmentUncheckedCreateWithoutServiceInput> | ServiceAssignmentCreateWithoutServiceInput[] | ServiceAssignmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutServiceInput | ServiceAssignmentCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceAssignmentUpsertWithWhereUniqueWithoutServiceInput | ServiceAssignmentUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceAssignmentCreateManyServiceInputEnvelope
    set?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    disconnect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    delete?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    update?: ServiceAssignmentUpdateWithWhereUniqueWithoutServiceInput | ServiceAssignmentUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceAssignmentUpdateManyWithWhereWithoutServiceInput | ServiceAssignmentUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceAssignmentScalarWhereInput | ServiceAssignmentScalarWhereInput[]
  }

  export type ServiceProviderUpdateOneWithoutServicesNestedInput = {
    create?: XOR<ServiceProviderCreateWithoutServicesInput, ServiceProviderUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ServiceProviderCreateOrConnectWithoutServicesInput
    upsert?: ServiceProviderUpsertWithoutServicesInput
    disconnect?: ServiceProviderWhereInput | boolean
    delete?: ServiceProviderWhereInput | boolean
    connect?: ServiceProviderWhereUniqueInput
    update?: XOR<XOR<ServiceProviderUpdateToOneWithWhereWithoutServicesInput, ServiceProviderUpdateWithoutServicesInput>, ServiceProviderUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceSessionUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceSessionCreateWithoutServiceInput, ServiceSessionUncheckedCreateWithoutServiceInput> | ServiceSessionCreateWithoutServiceInput[] | ServiceSessionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutServiceInput | ServiceSessionCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceSessionUpsertWithWhereUniqueWithoutServiceInput | ServiceSessionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceSessionCreateManyServiceInputEnvelope
    set?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    disconnect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    delete?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    update?: ServiceSessionUpdateWithWhereUniqueWithoutServiceInput | ServiceSessionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceSessionUpdateManyWithWhereWithoutServiceInput | ServiceSessionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
  }

  export type ServiceAssignmentUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceAssignmentCreateWithoutServiceInput, ServiceAssignmentUncheckedCreateWithoutServiceInput> | ServiceAssignmentCreateWithoutServiceInput[] | ServiceAssignmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceAssignmentCreateOrConnectWithoutServiceInput | ServiceAssignmentCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceAssignmentUpsertWithWhereUniqueWithoutServiceInput | ServiceAssignmentUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceAssignmentCreateManyServiceInputEnvelope
    set?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    disconnect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    delete?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    connect?: ServiceAssignmentWhereUniqueInput | ServiceAssignmentWhereUniqueInput[]
    update?: ServiceAssignmentUpdateWithWhereUniqueWithoutServiceInput | ServiceAssignmentUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceAssignmentUpdateManyWithWhereWithoutServiceInput | ServiceAssignmentUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceAssignmentScalarWhereInput | ServiceAssignmentScalarWhereInput[]
  }

  export type ServiceSessionUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceSessionCreateWithoutServiceInput, ServiceSessionUncheckedCreateWithoutServiceInput> | ServiceSessionCreateWithoutServiceInput[] | ServiceSessionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutServiceInput | ServiceSessionCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceSessionUpsertWithWhereUniqueWithoutServiceInput | ServiceSessionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceSessionCreateManyServiceInputEnvelope
    set?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    disconnect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    delete?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    update?: ServiceSessionUpdateWithWhereUniqueWithoutServiceInput | ServiceSessionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceSessionUpdateManyWithWhereWithoutServiceInput | ServiceSessionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
  }

  export type ServiceCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<ServiceCreateWithoutAssignmentsInput, ServiceUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutAssignmentsInput
    connect?: ServiceWhereUniqueInput
  }

  export type ContractCreateNestedOneWithoutServiceAssignmentsInput = {
    create?: XOR<ContractCreateWithoutServiceAssignmentsInput, ContractUncheckedCreateWithoutServiceAssignmentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutServiceAssignmentsInput
    connect?: ContractWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutServiceAssignmentsInput = {
    create?: XOR<ClientCreateWithoutServiceAssignmentsInput, ClientUncheckedCreateWithoutServiceAssignmentsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutServiceAssignmentsInput
    connect?: ClientWhereUniqueInput
  }

  export type EnumAssignmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AssignmentStatus
  }

  export type EnumFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.Frequency
  }

  export type ServiceUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<ServiceCreateWithoutAssignmentsInput, ServiceUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutAssignmentsInput
    upsert?: ServiceUpsertWithoutAssignmentsInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutAssignmentsInput, ServiceUpdateWithoutAssignmentsInput>, ServiceUncheckedUpdateWithoutAssignmentsInput>
  }

  export type ContractUpdateOneRequiredWithoutServiceAssignmentsNestedInput = {
    create?: XOR<ContractCreateWithoutServiceAssignmentsInput, ContractUncheckedCreateWithoutServiceAssignmentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutServiceAssignmentsInput
    upsert?: ContractUpsertWithoutServiceAssignmentsInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutServiceAssignmentsInput, ContractUpdateWithoutServiceAssignmentsInput>, ContractUncheckedUpdateWithoutServiceAssignmentsInput>
  }

  export type ClientUpdateOneWithoutServiceAssignmentsNestedInput = {
    create?: XOR<ClientCreateWithoutServiceAssignmentsInput, ClientUncheckedCreateWithoutServiceAssignmentsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutServiceAssignmentsInput
    upsert?: ClientUpsertWithoutServiceAssignmentsInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutServiceAssignmentsInput, ClientUpdateWithoutServiceAssignmentsInput>, ClientUncheckedUpdateWithoutServiceAssignmentsInput>
  }

  export type ServiceProviderCreatequalificationsInput = {
    set: string[]
  }

  export type ServiceProviderCreatespecializationsInput = {
    set: string[]
  }

  export type ServiceCreateNestedManyWithoutServiceProviderInput = {
    create?: XOR<ServiceCreateWithoutServiceProviderInput, ServiceUncheckedCreateWithoutServiceProviderInput> | ServiceCreateWithoutServiceProviderInput[] | ServiceUncheckedCreateWithoutServiceProviderInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceProviderInput | ServiceCreateOrConnectWithoutServiceProviderInput[]
    createMany?: ServiceCreateManyServiceProviderInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ServiceSessionCreateNestedManyWithoutProviderInput = {
    create?: XOR<ServiceSessionCreateWithoutProviderInput, ServiceSessionUncheckedCreateWithoutProviderInput> | ServiceSessionCreateWithoutProviderInput[] | ServiceSessionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutProviderInput | ServiceSessionCreateOrConnectWithoutProviderInput[]
    createMany?: ServiceSessionCreateManyProviderInputEnvelope
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutServiceProviderInput = {
    create?: XOR<ServiceCreateWithoutServiceProviderInput, ServiceUncheckedCreateWithoutServiceProviderInput> | ServiceCreateWithoutServiceProviderInput[] | ServiceUncheckedCreateWithoutServiceProviderInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceProviderInput | ServiceCreateOrConnectWithoutServiceProviderInput[]
    createMany?: ServiceCreateManyServiceProviderInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type ServiceSessionUncheckedCreateNestedManyWithoutProviderInput = {
    create?: XOR<ServiceSessionCreateWithoutProviderInput, ServiceSessionUncheckedCreateWithoutProviderInput> | ServiceSessionCreateWithoutProviderInput[] | ServiceSessionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutProviderInput | ServiceSessionCreateOrConnectWithoutProviderInput[]
    createMany?: ServiceSessionCreateManyProviderInputEnvelope
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
  }

  export type EnumServiceProviderTypeFieldUpdateOperationsInput = {
    set?: $Enums.ServiceProviderType
  }

  export type ServiceProviderUpdatequalificationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ServiceProviderUpdatespecializationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumWorkStatusFieldUpdateOperationsInput = {
    set?: $Enums.WorkStatus
  }

  export type ServiceUpdateManyWithoutServiceProviderNestedInput = {
    create?: XOR<ServiceCreateWithoutServiceProviderInput, ServiceUncheckedCreateWithoutServiceProviderInput> | ServiceCreateWithoutServiceProviderInput[] | ServiceUncheckedCreateWithoutServiceProviderInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceProviderInput | ServiceCreateOrConnectWithoutServiceProviderInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutServiceProviderInput | ServiceUpsertWithWhereUniqueWithoutServiceProviderInput[]
    createMany?: ServiceCreateManyServiceProviderInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutServiceProviderInput | ServiceUpdateWithWhereUniqueWithoutServiceProviderInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutServiceProviderInput | ServiceUpdateManyWithWhereWithoutServiceProviderInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ServiceSessionUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ServiceSessionCreateWithoutProviderInput, ServiceSessionUncheckedCreateWithoutProviderInput> | ServiceSessionCreateWithoutProviderInput[] | ServiceSessionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutProviderInput | ServiceSessionCreateOrConnectWithoutProviderInput[]
    upsert?: ServiceSessionUpsertWithWhereUniqueWithoutProviderInput | ServiceSessionUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ServiceSessionCreateManyProviderInputEnvelope
    set?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    disconnect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    delete?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    update?: ServiceSessionUpdateWithWhereUniqueWithoutProviderInput | ServiceSessionUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ServiceSessionUpdateManyWithWhereWithoutProviderInput | ServiceSessionUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutServiceProviderNestedInput = {
    create?: XOR<ServiceCreateWithoutServiceProviderInput, ServiceUncheckedCreateWithoutServiceProviderInput> | ServiceCreateWithoutServiceProviderInput[] | ServiceUncheckedCreateWithoutServiceProviderInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceProviderInput | ServiceCreateOrConnectWithoutServiceProviderInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutServiceProviderInput | ServiceUpsertWithWhereUniqueWithoutServiceProviderInput[]
    createMany?: ServiceCreateManyServiceProviderInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutServiceProviderInput | ServiceUpdateWithWhereUniqueWithoutServiceProviderInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutServiceProviderInput | ServiceUpdateManyWithWhereWithoutServiceProviderInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type ServiceSessionUncheckedUpdateManyWithoutProviderNestedInput = {
    create?: XOR<ServiceSessionCreateWithoutProviderInput, ServiceSessionUncheckedCreateWithoutProviderInput> | ServiceSessionCreateWithoutProviderInput[] | ServiceSessionUncheckedCreateWithoutProviderInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutProviderInput | ServiceSessionCreateOrConnectWithoutProviderInput[]
    upsert?: ServiceSessionUpsertWithWhereUniqueWithoutProviderInput | ServiceSessionUpsertWithWhereUniqueWithoutProviderInput[]
    createMany?: ServiceSessionCreateManyProviderInputEnvelope
    set?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    disconnect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    delete?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    update?: ServiceSessionUpdateWithWhereUniqueWithoutProviderInput | ServiceSessionUpdateWithWhereUniqueWithoutProviderInput[]
    updateMany?: ServiceSessionUpdateManyWithWhereWithoutProviderInput | ServiceSessionUpdateManyWithWhereWithoutProviderInput[]
    deleteMany?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
  }

  export type StaffCreateNestedOneWithoutServiceSessionInput = {
    create?: XOR<StaffCreateWithoutServiceSessionInput, StaffUncheckedCreateWithoutServiceSessionInput>
    connectOrCreate?: StaffCreateOrConnectWithoutServiceSessionInput
    connect?: StaffWhereUniqueInput
  }

  export type BeneficiaryCreateNestedOneWithoutServiceSessionInput = {
    create?: XOR<BeneficiaryCreateWithoutServiceSessionInput, BeneficiaryUncheckedCreateWithoutServiceSessionInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutServiceSessionInput
    connect?: BeneficiaryWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutServiceSessionInput = {
    create?: XOR<ServiceCreateWithoutServiceSessionInput, ServiceUncheckedCreateWithoutServiceSessionInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceSessionInput
    connect?: ServiceWhereUniqueInput
  }

  export type ServiceProviderCreateNestedOneWithoutSessionsInput = {
    create?: XOR<ServiceProviderCreateWithoutSessionsInput, ServiceProviderUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ServiceProviderCreateOrConnectWithoutSessionsInput
    connect?: ServiceProviderWhereUniqueInput
  }

  export type SessionFeedbackCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionFeedbackCreateWithoutSessionInput, SessionFeedbackUncheckedCreateWithoutSessionInput> | SessionFeedbackCreateWithoutSessionInput[] | SessionFeedbackUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionFeedbackCreateOrConnectWithoutSessionInput | SessionFeedbackCreateOrConnectWithoutSessionInput[]
    createMany?: SessionFeedbackCreateManySessionInputEnvelope
    connect?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
  }

  export type SessionFeedbackUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionFeedbackCreateWithoutSessionInput, SessionFeedbackUncheckedCreateWithoutSessionInput> | SessionFeedbackCreateWithoutSessionInput[] | SessionFeedbackUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionFeedbackCreateOrConnectWithoutSessionInput | SessionFeedbackCreateOrConnectWithoutSessionInput[]
    createMany?: SessionFeedbackCreateManySessionInputEnvelope
    connect?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
  }

  export type EnumSessionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SessionStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StaffUpdateOneWithoutServiceSessionNestedInput = {
    create?: XOR<StaffCreateWithoutServiceSessionInput, StaffUncheckedCreateWithoutServiceSessionInput>
    connectOrCreate?: StaffCreateOrConnectWithoutServiceSessionInput
    upsert?: StaffUpsertWithoutServiceSessionInput
    disconnect?: StaffWhereInput | boolean
    delete?: StaffWhereInput | boolean
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutServiceSessionInput, StaffUpdateWithoutServiceSessionInput>, StaffUncheckedUpdateWithoutServiceSessionInput>
  }

  export type BeneficiaryUpdateOneWithoutServiceSessionNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutServiceSessionInput, BeneficiaryUncheckedCreateWithoutServiceSessionInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutServiceSessionInput
    upsert?: BeneficiaryUpsertWithoutServiceSessionInput
    disconnect?: BeneficiaryWhereInput | boolean
    delete?: BeneficiaryWhereInput | boolean
    connect?: BeneficiaryWhereUniqueInput
    update?: XOR<XOR<BeneficiaryUpdateToOneWithWhereWithoutServiceSessionInput, BeneficiaryUpdateWithoutServiceSessionInput>, BeneficiaryUncheckedUpdateWithoutServiceSessionInput>
  }

  export type ServiceUpdateOneRequiredWithoutServiceSessionNestedInput = {
    create?: XOR<ServiceCreateWithoutServiceSessionInput, ServiceUncheckedCreateWithoutServiceSessionInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutServiceSessionInput
    upsert?: ServiceUpsertWithoutServiceSessionInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutServiceSessionInput, ServiceUpdateWithoutServiceSessionInput>, ServiceUncheckedUpdateWithoutServiceSessionInput>
  }

  export type ServiceProviderUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<ServiceProviderCreateWithoutSessionsInput, ServiceProviderUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: ServiceProviderCreateOrConnectWithoutSessionsInput
    upsert?: ServiceProviderUpsertWithoutSessionsInput
    connect?: ServiceProviderWhereUniqueInput
    update?: XOR<XOR<ServiceProviderUpdateToOneWithWhereWithoutSessionsInput, ServiceProviderUpdateWithoutSessionsInput>, ServiceProviderUncheckedUpdateWithoutSessionsInput>
  }

  export type SessionFeedbackUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionFeedbackCreateWithoutSessionInput, SessionFeedbackUncheckedCreateWithoutSessionInput> | SessionFeedbackCreateWithoutSessionInput[] | SessionFeedbackUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionFeedbackCreateOrConnectWithoutSessionInput | SessionFeedbackCreateOrConnectWithoutSessionInput[]
    upsert?: SessionFeedbackUpsertWithWhereUniqueWithoutSessionInput | SessionFeedbackUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionFeedbackCreateManySessionInputEnvelope
    set?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
    disconnect?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
    delete?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
    connect?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
    update?: SessionFeedbackUpdateWithWhereUniqueWithoutSessionInput | SessionFeedbackUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionFeedbackUpdateManyWithWhereWithoutSessionInput | SessionFeedbackUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionFeedbackScalarWhereInput | SessionFeedbackScalarWhereInput[]
  }

  export type SessionFeedbackUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionFeedbackCreateWithoutSessionInput, SessionFeedbackUncheckedCreateWithoutSessionInput> | SessionFeedbackCreateWithoutSessionInput[] | SessionFeedbackUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionFeedbackCreateOrConnectWithoutSessionInput | SessionFeedbackCreateOrConnectWithoutSessionInput[]
    upsert?: SessionFeedbackUpsertWithWhereUniqueWithoutSessionInput | SessionFeedbackUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionFeedbackCreateManySessionInputEnvelope
    set?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
    disconnect?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
    delete?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
    connect?: SessionFeedbackWhereUniqueInput | SessionFeedbackWhereUniqueInput[]
    update?: SessionFeedbackUpdateWithWhereUniqueWithoutSessionInput | SessionFeedbackUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionFeedbackUpdateManyWithWhereWithoutSessionInput | SessionFeedbackUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionFeedbackScalarWhereInput | SessionFeedbackScalarWhereInput[]
  }

  export type ServiceSessionCreateNestedOneWithoutSessionFeedbackInput = {
    create?: XOR<ServiceSessionCreateWithoutSessionFeedbackInput, ServiceSessionUncheckedCreateWithoutSessionFeedbackInput>
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutSessionFeedbackInput
    connect?: ServiceSessionWhereUniqueInput
  }

  export type ServiceSessionUpdateOneRequiredWithoutSessionFeedbackNestedInput = {
    create?: XOR<ServiceSessionCreateWithoutSessionFeedbackInput, ServiceSessionUncheckedCreateWithoutSessionFeedbackInput>
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutSessionFeedbackInput
    upsert?: ServiceSessionUpsertWithoutSessionFeedbackInput
    connect?: ServiceSessionWhereUniqueInput
    update?: XOR<XOR<ServiceSessionUpdateToOneWithWhereWithoutSessionFeedbackInput, ServiceSessionUpdateWithoutSessionFeedbackInput>, ServiceSessionUncheckedUpdateWithoutSessionFeedbackInput>
  }

  export type StaffCreatequalificationsInput = {
    set: string[]
  }

  export type StaffCreatespecializationsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutStaffProfilesInput = {
    create?: XOR<UserCreateWithoutStaffProfilesInput, UserUncheckedCreateWithoutStaffProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffProfilesInput
    connect?: UserWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutStaffInput = {
    create?: XOR<ProfileCreateWithoutStaffInput, ProfileUncheckedCreateWithoutStaffInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutStaffInput
    connect?: ProfileWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutStaffInput = {
    create?: XOR<ClientCreateWithoutStaffInput, ClientUncheckedCreateWithoutStaffInput>
    connectOrCreate?: ClientCreateOrConnectWithoutStaffInput
    connect?: ClientWhereUniqueInput
  }

  export type BeneficiaryCreateNestedManyWithoutStaffInput = {
    create?: XOR<BeneficiaryCreateWithoutStaffInput, BeneficiaryUncheckedCreateWithoutStaffInput> | BeneficiaryCreateWithoutStaffInput[] | BeneficiaryUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutStaffInput | BeneficiaryCreateOrConnectWithoutStaffInput[]
    createMany?: BeneficiaryCreateManyStaffInputEnvelope
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
  }

  export type ServiceSessionCreateNestedManyWithoutStaffInput = {
    create?: XOR<ServiceSessionCreateWithoutStaffInput, ServiceSessionUncheckedCreateWithoutStaffInput> | ServiceSessionCreateWithoutStaffInput[] | ServiceSessionUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutStaffInput | ServiceSessionCreateOrConnectWithoutStaffInput[]
    createMany?: ServiceSessionCreateManyStaffInputEnvelope
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
  }

  export type BeneficiaryUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<BeneficiaryCreateWithoutStaffInput, BeneficiaryUncheckedCreateWithoutStaffInput> | BeneficiaryCreateWithoutStaffInput[] | BeneficiaryUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutStaffInput | BeneficiaryCreateOrConnectWithoutStaffInput[]
    createMany?: BeneficiaryCreateManyStaffInputEnvelope
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
  }

  export type ServiceSessionUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<ServiceSessionCreateWithoutStaffInput, ServiceSessionUncheckedCreateWithoutStaffInput> | ServiceSessionCreateWithoutStaffInput[] | ServiceSessionUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutStaffInput | ServiceSessionCreateOrConnectWithoutStaffInput[]
    createMany?: ServiceSessionCreateManyStaffInputEnvelope
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
  }

  export type EnumStaffRoleFieldUpdateOperationsInput = {
    set?: $Enums.StaffRole
  }

  export type StaffUpdatequalificationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type StaffUpdatespecializationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutStaffProfilesNestedInput = {
    create?: XOR<UserCreateWithoutStaffProfilesInput, UserUncheckedCreateWithoutStaffProfilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffProfilesInput
    upsert?: UserUpsertWithoutStaffProfilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStaffProfilesInput, UserUpdateWithoutStaffProfilesInput>, UserUncheckedUpdateWithoutStaffProfilesInput>
  }

  export type ProfileUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<ProfileCreateWithoutStaffInput, ProfileUncheckedCreateWithoutStaffInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutStaffInput
    upsert?: ProfileUpsertWithoutStaffInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutStaffInput, ProfileUpdateWithoutStaffInput>, ProfileUncheckedUpdateWithoutStaffInput>
  }

  export type ClientUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<ClientCreateWithoutStaffInput, ClientUncheckedCreateWithoutStaffInput>
    connectOrCreate?: ClientCreateOrConnectWithoutStaffInput
    upsert?: ClientUpsertWithoutStaffInput
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutStaffInput, ClientUpdateWithoutStaffInput>, ClientUncheckedUpdateWithoutStaffInput>
  }

  export type BeneficiaryUpdateManyWithoutStaffNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutStaffInput, BeneficiaryUncheckedCreateWithoutStaffInput> | BeneficiaryCreateWithoutStaffInput[] | BeneficiaryUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutStaffInput | BeneficiaryCreateOrConnectWithoutStaffInput[]
    upsert?: BeneficiaryUpsertWithWhereUniqueWithoutStaffInput | BeneficiaryUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: BeneficiaryCreateManyStaffInputEnvelope
    set?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    disconnect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    delete?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    update?: BeneficiaryUpdateWithWhereUniqueWithoutStaffInput | BeneficiaryUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: BeneficiaryUpdateManyWithWhereWithoutStaffInput | BeneficiaryUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: BeneficiaryScalarWhereInput | BeneficiaryScalarWhereInput[]
  }

  export type ServiceSessionUpdateManyWithoutStaffNestedInput = {
    create?: XOR<ServiceSessionCreateWithoutStaffInput, ServiceSessionUncheckedCreateWithoutStaffInput> | ServiceSessionCreateWithoutStaffInput[] | ServiceSessionUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutStaffInput | ServiceSessionCreateOrConnectWithoutStaffInput[]
    upsert?: ServiceSessionUpsertWithWhereUniqueWithoutStaffInput | ServiceSessionUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: ServiceSessionCreateManyStaffInputEnvelope
    set?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    disconnect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    delete?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    update?: ServiceSessionUpdateWithWhereUniqueWithoutStaffInput | ServiceSessionUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: ServiceSessionUpdateManyWithWhereWithoutStaffInput | ServiceSessionUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
  }

  export type BeneficiaryUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutStaffInput, BeneficiaryUncheckedCreateWithoutStaffInput> | BeneficiaryCreateWithoutStaffInput[] | BeneficiaryUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutStaffInput | BeneficiaryCreateOrConnectWithoutStaffInput[]
    upsert?: BeneficiaryUpsertWithWhereUniqueWithoutStaffInput | BeneficiaryUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: BeneficiaryCreateManyStaffInputEnvelope
    set?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    disconnect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    delete?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    connect?: BeneficiaryWhereUniqueInput | BeneficiaryWhereUniqueInput[]
    update?: BeneficiaryUpdateWithWhereUniqueWithoutStaffInput | BeneficiaryUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: BeneficiaryUpdateManyWithWhereWithoutStaffInput | BeneficiaryUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: BeneficiaryScalarWhereInput | BeneficiaryScalarWhereInput[]
  }

  export type ServiceSessionUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<ServiceSessionCreateWithoutStaffInput, ServiceSessionUncheckedCreateWithoutStaffInput> | ServiceSessionCreateWithoutStaffInput[] | ServiceSessionUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutStaffInput | ServiceSessionCreateOrConnectWithoutStaffInput[]
    upsert?: ServiceSessionUpsertWithWhereUniqueWithoutStaffInput | ServiceSessionUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: ServiceSessionCreateManyStaffInputEnvelope
    set?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    disconnect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    delete?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    update?: ServiceSessionUpdateWithWhereUniqueWithoutStaffInput | ServiceSessionUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: ServiceSessionUpdateManyWithWhereWithoutStaffInput | ServiceSessionUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutBeneficiaryInput = {
    create?: XOR<ProfileCreateWithoutBeneficiaryInput, ProfileUncheckedCreateWithoutBeneficiaryInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutBeneficiaryInput
    connect?: ProfileWhereUniqueInput
  }

  export type StaffCreateNestedOneWithoutBeneficiariesInput = {
    create?: XOR<StaffCreateWithoutBeneficiariesInput, StaffUncheckedCreateWithoutBeneficiariesInput>
    connectOrCreate?: StaffCreateOrConnectWithoutBeneficiariesInput
    connect?: StaffWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGuardianOfInput = {
    create?: XOR<UserCreateWithoutGuardianOfInput, UserUncheckedCreateWithoutGuardianOfInput>
    connectOrCreate?: UserCreateOrConnectWithoutGuardianOfInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBeneficiariesInput = {
    create?: XOR<UserCreateWithoutBeneficiariesInput, UserUncheckedCreateWithoutBeneficiariesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBeneficiariesInput
    connect?: UserWhereUniqueInput
  }

  export type ServiceSessionCreateNestedManyWithoutBeneficiaryInput = {
    create?: XOR<ServiceSessionCreateWithoutBeneficiaryInput, ServiceSessionUncheckedCreateWithoutBeneficiaryInput> | ServiceSessionCreateWithoutBeneficiaryInput[] | ServiceSessionUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutBeneficiaryInput | ServiceSessionCreateOrConnectWithoutBeneficiaryInput[]
    createMany?: ServiceSessionCreateManyBeneficiaryInputEnvelope
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
  }

  export type ServiceSessionUncheckedCreateNestedManyWithoutBeneficiaryInput = {
    create?: XOR<ServiceSessionCreateWithoutBeneficiaryInput, ServiceSessionUncheckedCreateWithoutBeneficiaryInput> | ServiceSessionCreateWithoutBeneficiaryInput[] | ServiceSessionUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutBeneficiaryInput | ServiceSessionCreateOrConnectWithoutBeneficiaryInput[]
    createMany?: ServiceSessionCreateManyBeneficiaryInputEnvelope
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
  }

  export type EnumRelationTypeFieldUpdateOperationsInput = {
    set?: $Enums.RelationType
  }

  export type ProfileUpdateOneRequiredWithoutBeneficiaryNestedInput = {
    create?: XOR<ProfileCreateWithoutBeneficiaryInput, ProfileUncheckedCreateWithoutBeneficiaryInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutBeneficiaryInput
    upsert?: ProfileUpsertWithoutBeneficiaryInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutBeneficiaryInput, ProfileUpdateWithoutBeneficiaryInput>, ProfileUncheckedUpdateWithoutBeneficiaryInput>
  }

  export type StaffUpdateOneRequiredWithoutBeneficiariesNestedInput = {
    create?: XOR<StaffCreateWithoutBeneficiariesInput, StaffUncheckedCreateWithoutBeneficiariesInput>
    connectOrCreate?: StaffCreateOrConnectWithoutBeneficiariesInput
    upsert?: StaffUpsertWithoutBeneficiariesInput
    connect?: StaffWhereUniqueInput
    update?: XOR<XOR<StaffUpdateToOneWithWhereWithoutBeneficiariesInput, StaffUpdateWithoutBeneficiariesInput>, StaffUncheckedUpdateWithoutBeneficiariesInput>
  }

  export type UserUpdateOneWithoutGuardianOfNestedInput = {
    create?: XOR<UserCreateWithoutGuardianOfInput, UserUncheckedCreateWithoutGuardianOfInput>
    connectOrCreate?: UserCreateOrConnectWithoutGuardianOfInput
    upsert?: UserUpsertWithoutGuardianOfInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGuardianOfInput, UserUpdateWithoutGuardianOfInput>, UserUncheckedUpdateWithoutGuardianOfInput>
  }

  export type UserUpdateOneWithoutBeneficiariesNestedInput = {
    create?: XOR<UserCreateWithoutBeneficiariesInput, UserUncheckedCreateWithoutBeneficiariesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBeneficiariesInput
    upsert?: UserUpsertWithoutBeneficiariesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBeneficiariesInput, UserUpdateWithoutBeneficiariesInput>, UserUncheckedUpdateWithoutBeneficiariesInput>
  }

  export type ServiceSessionUpdateManyWithoutBeneficiaryNestedInput = {
    create?: XOR<ServiceSessionCreateWithoutBeneficiaryInput, ServiceSessionUncheckedCreateWithoutBeneficiaryInput> | ServiceSessionCreateWithoutBeneficiaryInput[] | ServiceSessionUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutBeneficiaryInput | ServiceSessionCreateOrConnectWithoutBeneficiaryInput[]
    upsert?: ServiceSessionUpsertWithWhereUniqueWithoutBeneficiaryInput | ServiceSessionUpsertWithWhereUniqueWithoutBeneficiaryInput[]
    createMany?: ServiceSessionCreateManyBeneficiaryInputEnvelope
    set?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    disconnect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    delete?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    update?: ServiceSessionUpdateWithWhereUniqueWithoutBeneficiaryInput | ServiceSessionUpdateWithWhereUniqueWithoutBeneficiaryInput[]
    updateMany?: ServiceSessionUpdateManyWithWhereWithoutBeneficiaryInput | ServiceSessionUpdateManyWithWhereWithoutBeneficiaryInput[]
    deleteMany?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
  }

  export type ServiceSessionUncheckedUpdateManyWithoutBeneficiaryNestedInput = {
    create?: XOR<ServiceSessionCreateWithoutBeneficiaryInput, ServiceSessionUncheckedCreateWithoutBeneficiaryInput> | ServiceSessionCreateWithoutBeneficiaryInput[] | ServiceSessionUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: ServiceSessionCreateOrConnectWithoutBeneficiaryInput | ServiceSessionCreateOrConnectWithoutBeneficiaryInput[]
    upsert?: ServiceSessionUpsertWithWhereUniqueWithoutBeneficiaryInput | ServiceSessionUpsertWithWhereUniqueWithoutBeneficiaryInput[]
    createMany?: ServiceSessionCreateManyBeneficiaryInputEnvelope
    set?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    disconnect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    delete?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    connect?: ServiceSessionWhereUniqueInput | ServiceSessionWhereUniqueInput[]
    update?: ServiceSessionUpdateWithWhereUniqueWithoutBeneficiaryInput | ServiceSessionUpdateWithWhereUniqueWithoutBeneficiaryInput[]
    updateMany?: ServiceSessionUpdateManyWithWhereWithoutBeneficiaryInput | ServiceSessionUpdateManyWithWhereWithoutBeneficiaryInput[]
    deleteMany?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
  }

  export type KpiTypeCreateNestedOneWithoutKpisInput = {
    create?: XOR<KpiTypeCreateWithoutKpisInput, KpiTypeUncheckedCreateWithoutKpisInput>
    connectOrCreate?: KpiTypeCreateOrConnectWithoutKpisInput
    connect?: KpiTypeWhereUniqueInput
  }

  export type KPIAssignmentCreateNestedManyWithoutKpiInput = {
    create?: XOR<KPIAssignmentCreateWithoutKpiInput, KPIAssignmentUncheckedCreateWithoutKpiInput> | KPIAssignmentCreateWithoutKpiInput[] | KPIAssignmentUncheckedCreateWithoutKpiInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutKpiInput | KPIAssignmentCreateOrConnectWithoutKpiInput[]
    createMany?: KPIAssignmentCreateManyKpiInputEnvelope
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
  }

  export type ClientCreateNestedOneWithoutKpisInput = {
    create?: XOR<ClientCreateWithoutKpisInput, ClientUncheckedCreateWithoutKpisInput>
    connectOrCreate?: ClientCreateOrConnectWithoutKpisInput
    connect?: ClientWhereUniqueInput
  }

  export type ContractCreateNestedOneWithoutKpisInput = {
    create?: XOR<ContractCreateWithoutKpisInput, ContractUncheckedCreateWithoutKpisInput>
    connectOrCreate?: ContractCreateOrConnectWithoutKpisInput
    connect?: ContractWhereUniqueInput
  }

  export type KPIAssignmentUncheckedCreateNestedManyWithoutKpiInput = {
    create?: XOR<KPIAssignmentCreateWithoutKpiInput, KPIAssignmentUncheckedCreateWithoutKpiInput> | KPIAssignmentCreateWithoutKpiInput[] | KPIAssignmentUncheckedCreateWithoutKpiInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutKpiInput | KPIAssignmentCreateOrConnectWithoutKpiInput[]
    createMany?: KPIAssignmentCreateManyKpiInputEnvelope
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
  }

  export type EnumUnitFieldUpdateOperationsInput = {
    set?: $Enums.Unit
  }

  export type NullableEnumFrequencyFieldUpdateOperationsInput = {
    set?: $Enums.Frequency | null
  }

  export type KpiTypeUpdateOneRequiredWithoutKpisNestedInput = {
    create?: XOR<KpiTypeCreateWithoutKpisInput, KpiTypeUncheckedCreateWithoutKpisInput>
    connectOrCreate?: KpiTypeCreateOrConnectWithoutKpisInput
    upsert?: KpiTypeUpsertWithoutKpisInput
    connect?: KpiTypeWhereUniqueInput
    update?: XOR<XOR<KpiTypeUpdateToOneWithWhereWithoutKpisInput, KpiTypeUpdateWithoutKpisInput>, KpiTypeUncheckedUpdateWithoutKpisInput>
  }

  export type KPIAssignmentUpdateManyWithoutKpiNestedInput = {
    create?: XOR<KPIAssignmentCreateWithoutKpiInput, KPIAssignmentUncheckedCreateWithoutKpiInput> | KPIAssignmentCreateWithoutKpiInput[] | KPIAssignmentUncheckedCreateWithoutKpiInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutKpiInput | KPIAssignmentCreateOrConnectWithoutKpiInput[]
    upsert?: KPIAssignmentUpsertWithWhereUniqueWithoutKpiInput | KPIAssignmentUpsertWithWhereUniqueWithoutKpiInput[]
    createMany?: KPIAssignmentCreateManyKpiInputEnvelope
    set?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    disconnect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    delete?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    update?: KPIAssignmentUpdateWithWhereUniqueWithoutKpiInput | KPIAssignmentUpdateWithWhereUniqueWithoutKpiInput[]
    updateMany?: KPIAssignmentUpdateManyWithWhereWithoutKpiInput | KPIAssignmentUpdateManyWithWhereWithoutKpiInput[]
    deleteMany?: KPIAssignmentScalarWhereInput | KPIAssignmentScalarWhereInput[]
  }

  export type ClientUpdateOneWithoutKpisNestedInput = {
    create?: XOR<ClientCreateWithoutKpisInput, ClientUncheckedCreateWithoutKpisInput>
    connectOrCreate?: ClientCreateOrConnectWithoutKpisInput
    upsert?: ClientUpsertWithoutKpisInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutKpisInput, ClientUpdateWithoutKpisInput>, ClientUncheckedUpdateWithoutKpisInput>
  }

  export type ContractUpdateOneWithoutKpisNestedInput = {
    create?: XOR<ContractCreateWithoutKpisInput, ContractUncheckedCreateWithoutKpisInput>
    connectOrCreate?: ContractCreateOrConnectWithoutKpisInput
    upsert?: ContractUpsertWithoutKpisInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutKpisInput, ContractUpdateWithoutKpisInput>, ContractUncheckedUpdateWithoutKpisInput>
  }

  export type KPIAssignmentUncheckedUpdateManyWithoutKpiNestedInput = {
    create?: XOR<KPIAssignmentCreateWithoutKpiInput, KPIAssignmentUncheckedCreateWithoutKpiInput> | KPIAssignmentCreateWithoutKpiInput[] | KPIAssignmentUncheckedCreateWithoutKpiInput[]
    connectOrCreate?: KPIAssignmentCreateOrConnectWithoutKpiInput | KPIAssignmentCreateOrConnectWithoutKpiInput[]
    upsert?: KPIAssignmentUpsertWithWhereUniqueWithoutKpiInput | KPIAssignmentUpsertWithWhereUniqueWithoutKpiInput[]
    createMany?: KPIAssignmentCreateManyKpiInputEnvelope
    set?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    disconnect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    delete?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    connect?: KPIAssignmentWhereUniqueInput | KPIAssignmentWhereUniqueInput[]
    update?: KPIAssignmentUpdateWithWhereUniqueWithoutKpiInput | KPIAssignmentUpdateWithWhereUniqueWithoutKpiInput[]
    updateMany?: KPIAssignmentUpdateManyWithWhereWithoutKpiInput | KPIAssignmentUpdateManyWithWhereWithoutKpiInput[]
    deleteMany?: KPIAssignmentScalarWhereInput | KPIAssignmentScalarWhereInput[]
  }

  export type KPICreateNestedManyWithoutTypeInput = {
    create?: XOR<KPICreateWithoutTypeInput, KPIUncheckedCreateWithoutTypeInput> | KPICreateWithoutTypeInput[] | KPIUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: KPICreateOrConnectWithoutTypeInput | KPICreateOrConnectWithoutTypeInput[]
    createMany?: KPICreateManyTypeInputEnvelope
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
  }

  export type KPIUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<KPICreateWithoutTypeInput, KPIUncheckedCreateWithoutTypeInput> | KPICreateWithoutTypeInput[] | KPIUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: KPICreateOrConnectWithoutTypeInput | KPICreateOrConnectWithoutTypeInput[]
    createMany?: KPICreateManyTypeInputEnvelope
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
  }

  export type KPIUpdateManyWithoutTypeNestedInput = {
    create?: XOR<KPICreateWithoutTypeInput, KPIUncheckedCreateWithoutTypeInput> | KPICreateWithoutTypeInput[] | KPIUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: KPICreateOrConnectWithoutTypeInput | KPICreateOrConnectWithoutTypeInput[]
    upsert?: KPIUpsertWithWhereUniqueWithoutTypeInput | KPIUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: KPICreateManyTypeInputEnvelope
    set?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    disconnect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    delete?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    update?: KPIUpdateWithWhereUniqueWithoutTypeInput | KPIUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: KPIUpdateManyWithWhereWithoutTypeInput | KPIUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: KPIScalarWhereInput | KPIScalarWhereInput[]
  }

  export type KPIUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<KPICreateWithoutTypeInput, KPIUncheckedCreateWithoutTypeInput> | KPICreateWithoutTypeInput[] | KPIUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: KPICreateOrConnectWithoutTypeInput | KPICreateOrConnectWithoutTypeInput[]
    upsert?: KPIUpsertWithWhereUniqueWithoutTypeInput | KPIUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: KPICreateManyTypeInputEnvelope
    set?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    disconnect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    delete?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    connect?: KPIWhereUniqueInput | KPIWhereUniqueInput[]
    update?: KPIUpdateWithWhereUniqueWithoutTypeInput | KPIUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: KPIUpdateManyWithWhereWithoutTypeInput | KPIUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: KPIScalarWhereInput | KPIScalarWhereInput[]
  }

  export type KPICreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<KPICreateWithoutAssignmentsInput, KPIUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: KPICreateOrConnectWithoutAssignmentsInput
    connect?: KPIWhereUniqueInput
  }

  export type ContractCreateNestedOneWithoutKpiAssignmentsInput = {
    create?: XOR<ContractCreateWithoutKpiAssignmentsInput, ContractUncheckedCreateWithoutKpiAssignmentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutKpiAssignmentsInput
    connect?: ContractWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutKpiAssignmentsInput = {
    create?: XOR<ClientCreateWithoutKpiAssignmentsInput, ClientUncheckedCreateWithoutKpiAssignmentsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutKpiAssignmentsInput
    connect?: ClientWhereUniqueInput
  }

  export type KPIUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<KPICreateWithoutAssignmentsInput, KPIUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: KPICreateOrConnectWithoutAssignmentsInput
    upsert?: KPIUpsertWithoutAssignmentsInput
    connect?: KPIWhereUniqueInput
    update?: XOR<XOR<KPIUpdateToOneWithWhereWithoutAssignmentsInput, KPIUpdateWithoutAssignmentsInput>, KPIUncheckedUpdateWithoutAssignmentsInput>
  }

  export type ContractUpdateOneRequiredWithoutKpiAssignmentsNestedInput = {
    create?: XOR<ContractCreateWithoutKpiAssignmentsInput, ContractUncheckedCreateWithoutKpiAssignmentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutKpiAssignmentsInput
    upsert?: ContractUpsertWithoutKpiAssignmentsInput
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutKpiAssignmentsInput, ContractUpdateWithoutKpiAssignmentsInput>, ContractUncheckedUpdateWithoutKpiAssignmentsInput>
  }

  export type ClientUpdateOneWithoutKpiAssignmentsNestedInput = {
    create?: XOR<ClientCreateWithoutKpiAssignmentsInput, ClientUncheckedCreateWithoutKpiAssignmentsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutKpiAssignmentsInput
    upsert?: ClientUpsertWithoutKpiAssignmentsInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutKpiAssignmentsInput, ClientUpdateWithoutKpiAssignmentsInput>, ClientUncheckedUpdateWithoutKpiAssignmentsInput>
  }

  export type DocumentCreatetagsInput = {
    set: string[]
  }

  export type DocumentCreateNestedOneWithoutNextVersionsInput = {
    create?: XOR<DocumentCreateWithoutNextVersionsInput, DocumentUncheckedCreateWithoutNextVersionsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutNextVersionsInput
    connect?: DocumentWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutPreviousVersionInput = {
    create?: XOR<DocumentCreateWithoutPreviousVersionInput, DocumentUncheckedCreateWithoutPreviousVersionInput> | DocumentCreateWithoutPreviousVersionInput[] | DocumentUncheckedCreateWithoutPreviousVersionInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPreviousVersionInput | DocumentCreateOrConnectWithoutPreviousVersionInput[]
    createMany?: DocumentCreateManyPreviousVersionInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    connect?: UserWhereUniqueInput
  }

  export type ClientCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ClientCreateWithoutDocumentsInput, ClientUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutDocumentsInput
    connect?: ClientWhereUniqueInput
  }

  export type ContractCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ContractCreateWithoutDocumentsInput, ContractUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutDocumentsInput
    connect?: ContractWhereUniqueInput
  }

  export type DocumentUncheckedCreateNestedManyWithoutPreviousVersionInput = {
    create?: XOR<DocumentCreateWithoutPreviousVersionInput, DocumentUncheckedCreateWithoutPreviousVersionInput> | DocumentCreateWithoutPreviousVersionInput[] | DocumentUncheckedCreateWithoutPreviousVersionInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPreviousVersionInput | DocumentCreateOrConnectWithoutPreviousVersionInput[]
    createMany?: DocumentCreateManyPreviousVersionInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type EnumDocumentStatusFieldUpdateOperationsInput = {
    set?: $Enums.DocumentStatus
  }

  export type DocumentUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type DocumentUpdateOneWithoutNextVersionsNestedInput = {
    create?: XOR<DocumentCreateWithoutNextVersionsInput, DocumentUncheckedCreateWithoutNextVersionsInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutNextVersionsInput
    upsert?: DocumentUpsertWithoutNextVersionsInput
    disconnect?: DocumentWhereInput | boolean
    delete?: DocumentWhereInput | boolean
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutNextVersionsInput, DocumentUpdateWithoutNextVersionsInput>, DocumentUncheckedUpdateWithoutNextVersionsInput>
  }

  export type DocumentUpdateManyWithoutPreviousVersionNestedInput = {
    create?: XOR<DocumentCreateWithoutPreviousVersionInput, DocumentUncheckedCreateWithoutPreviousVersionInput> | DocumentCreateWithoutPreviousVersionInput[] | DocumentUncheckedCreateWithoutPreviousVersionInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPreviousVersionInput | DocumentCreateOrConnectWithoutPreviousVersionInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutPreviousVersionInput | DocumentUpsertWithWhereUniqueWithoutPreviousVersionInput[]
    createMany?: DocumentCreateManyPreviousVersionInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutPreviousVersionInput | DocumentUpdateWithWhereUniqueWithoutPreviousVersionInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutPreviousVersionInput | DocumentUpdateManyWithWhereWithoutPreviousVersionInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UserUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentsInput
    upsert?: UserUpsertWithoutDocumentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentsInput, UserUpdateWithoutDocumentsInput>, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type ClientUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<ClientCreateWithoutDocumentsInput, ClientUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ClientCreateOrConnectWithoutDocumentsInput
    upsert?: ClientUpsertWithoutDocumentsInput
    disconnect?: ClientWhereInput | boolean
    delete?: ClientWhereInput | boolean
    connect?: ClientWhereUniqueInput
    update?: XOR<XOR<ClientUpdateToOneWithWhereWithoutDocumentsInput, ClientUpdateWithoutDocumentsInput>, ClientUncheckedUpdateWithoutDocumentsInput>
  }

  export type ContractUpdateOneWithoutDocumentsNestedInput = {
    create?: XOR<ContractCreateWithoutDocumentsInput, ContractUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ContractCreateOrConnectWithoutDocumentsInput
    upsert?: ContractUpsertWithoutDocumentsInput
    disconnect?: ContractWhereInput | boolean
    delete?: ContractWhereInput | boolean
    connect?: ContractWhereUniqueInput
    update?: XOR<XOR<ContractUpdateToOneWithWhereWithoutDocumentsInput, ContractUpdateWithoutDocumentsInput>, ContractUncheckedUpdateWithoutDocumentsInput>
  }

  export type DocumentUncheckedUpdateManyWithoutPreviousVersionNestedInput = {
    create?: XOR<DocumentCreateWithoutPreviousVersionInput, DocumentUncheckedCreateWithoutPreviousVersionInput> | DocumentCreateWithoutPreviousVersionInput[] | DocumentUncheckedCreateWithoutPreviousVersionInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutPreviousVersionInput | DocumentCreateOrConnectWithoutPreviousVersionInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutPreviousVersionInput | DocumentUpsertWithWhereUniqueWithoutPreviousVersionInput[]
    createMany?: DocumentCreateManyPreviousVersionInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutPreviousVersionInput | DocumentUpdateWithWhereUniqueWithoutPreviousVersionInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutPreviousVersionInput | DocumentUpdateManyWithWhereWithoutPreviousVersionInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumActionTypeFieldUpdateOperationsInput = {
    set?: $Enums.ActionType
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type FieldChangeCreateNestedManyWithoutEntityChangeInput = {
    create?: XOR<FieldChangeCreateWithoutEntityChangeInput, FieldChangeUncheckedCreateWithoutEntityChangeInput> | FieldChangeCreateWithoutEntityChangeInput[] | FieldChangeUncheckedCreateWithoutEntityChangeInput[]
    connectOrCreate?: FieldChangeCreateOrConnectWithoutEntityChangeInput | FieldChangeCreateOrConnectWithoutEntityChangeInput[]
    createMany?: FieldChangeCreateManyEntityChangeInputEnvelope
    connect?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
  }

  export type FieldChangeUncheckedCreateNestedManyWithoutEntityChangeInput = {
    create?: XOR<FieldChangeCreateWithoutEntityChangeInput, FieldChangeUncheckedCreateWithoutEntityChangeInput> | FieldChangeCreateWithoutEntityChangeInput[] | FieldChangeUncheckedCreateWithoutEntityChangeInput[]
    connectOrCreate?: FieldChangeCreateOrConnectWithoutEntityChangeInput | FieldChangeCreateOrConnectWithoutEntityChangeInput[]
    createMany?: FieldChangeCreateManyEntityChangeInputEnvelope
    connect?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
  }

  export type EnumChangeTypeFieldUpdateOperationsInput = {
    set?: $Enums.ChangeType
  }

  export type FieldChangeUpdateManyWithoutEntityChangeNestedInput = {
    create?: XOR<FieldChangeCreateWithoutEntityChangeInput, FieldChangeUncheckedCreateWithoutEntityChangeInput> | FieldChangeCreateWithoutEntityChangeInput[] | FieldChangeUncheckedCreateWithoutEntityChangeInput[]
    connectOrCreate?: FieldChangeCreateOrConnectWithoutEntityChangeInput | FieldChangeCreateOrConnectWithoutEntityChangeInput[]
    upsert?: FieldChangeUpsertWithWhereUniqueWithoutEntityChangeInput | FieldChangeUpsertWithWhereUniqueWithoutEntityChangeInput[]
    createMany?: FieldChangeCreateManyEntityChangeInputEnvelope
    set?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
    disconnect?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
    delete?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
    connect?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
    update?: FieldChangeUpdateWithWhereUniqueWithoutEntityChangeInput | FieldChangeUpdateWithWhereUniqueWithoutEntityChangeInput[]
    updateMany?: FieldChangeUpdateManyWithWhereWithoutEntityChangeInput | FieldChangeUpdateManyWithWhereWithoutEntityChangeInput[]
    deleteMany?: FieldChangeScalarWhereInput | FieldChangeScalarWhereInput[]
  }

  export type FieldChangeUncheckedUpdateManyWithoutEntityChangeNestedInput = {
    create?: XOR<FieldChangeCreateWithoutEntityChangeInput, FieldChangeUncheckedCreateWithoutEntityChangeInput> | FieldChangeCreateWithoutEntityChangeInput[] | FieldChangeUncheckedCreateWithoutEntityChangeInput[]
    connectOrCreate?: FieldChangeCreateOrConnectWithoutEntityChangeInput | FieldChangeCreateOrConnectWithoutEntityChangeInput[]
    upsert?: FieldChangeUpsertWithWhereUniqueWithoutEntityChangeInput | FieldChangeUpsertWithWhereUniqueWithoutEntityChangeInput[]
    createMany?: FieldChangeCreateManyEntityChangeInputEnvelope
    set?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
    disconnect?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
    delete?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
    connect?: FieldChangeWhereUniqueInput | FieldChangeWhereUniqueInput[]
    update?: FieldChangeUpdateWithWhereUniqueWithoutEntityChangeInput | FieldChangeUpdateWithWhereUniqueWithoutEntityChangeInput[]
    updateMany?: FieldChangeUpdateManyWithWhereWithoutEntityChangeInput | FieldChangeUpdateManyWithWhereWithoutEntityChangeInput[]
    deleteMany?: FieldChangeScalarWhereInput | FieldChangeScalarWhereInput[]
  }

  export type EntityChangeCreateNestedOneWithoutFieldChangesInput = {
    create?: XOR<EntityChangeCreateWithoutFieldChangesInput, EntityChangeUncheckedCreateWithoutFieldChangesInput>
    connectOrCreate?: EntityChangeCreateOrConnectWithoutFieldChangesInput
    connect?: EntityChangeWhereUniqueInput
  }

  export type EntityChangeUpdateOneRequiredWithoutFieldChangesNestedInput = {
    create?: XOR<EntityChangeCreateWithoutFieldChangesInput, EntityChangeUncheckedCreateWithoutFieldChangesInput>
    connectOrCreate?: EntityChangeCreateOrConnectWithoutFieldChangesInput
    upsert?: EntityChangeUpsertWithoutFieldChangesInput
    connect?: EntityChangeWhereUniqueInput
    update?: XOR<XOR<EntityChangeUpdateToOneWithWhereWithoutFieldChangesInput, EntityChangeUpdateWithoutFieldChangesInput>, EntityChangeUncheckedUpdateWithoutFieldChangesInput>
  }

  export type UserCreateNestedOneWithoutStatusTransitionsInput = {
    create?: XOR<UserCreateWithoutStatusTransitionsInput, UserUncheckedCreateWithoutStatusTransitionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusTransitionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStatusTransitionsNestedInput = {
    create?: XOR<UserCreateWithoutStatusTransitionsInput, UserUncheckedCreateWithoutStatusTransitionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStatusTransitionsInput
    upsert?: UserUpsertWithoutStatusTransitionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStatusTransitionsInput, UserUpdateWithoutStatusTransitionsInput>, UserUncheckedUpdateWithoutStatusTransitionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumLanguageNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLanguageNullableFilter<$PrismaModel> | $Enums.Language | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumLanguageNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel> | null
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLanguageNullableWithAggregatesFilter<$PrismaModel> | $Enums.Language | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLanguageNullableFilter<$PrismaModel>
    _max?: NestedEnumLanguageNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedEnumContactMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactMethod | EnumContactMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContactMethodNullableFilter<$PrismaModel> | $Enums.ContactMethod | null
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedEnumContactMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactMethod | EnumContactMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumContactMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.ContactMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumContactMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumContactMethodNullableFilter<$PrismaModel>
  }

  export type NestedEnumBaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BaseStatus | EnumBaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BaseStatus[] | ListEnumBaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BaseStatus[] | ListEnumBaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBaseStatusFilter<$PrismaModel> | $Enums.BaseStatus
  }

  export type NestedEnumBaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BaseStatus | EnumBaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BaseStatus[] | ListEnumBaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BaseStatus[] | ListEnumBaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.BaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBaseStatusFilter<$PrismaModel>
    _max?: NestedEnumBaseStatusFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumContractStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusFilter<$PrismaModel> | $Enums.ContractStatus
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumContractStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractStatus | EnumContractStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractStatus[] | ListEnumContractStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumContractStatusWithAggregatesFilter<$PrismaModel> | $Enums.ContractStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractStatusFilter<$PrismaModel>
    _max?: NestedEnumContractStatusFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumAssignmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusFilter<$PrismaModel> | $Enums.AssignmentStatus
  }

  export type NestedEnumFrequencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumFrequencyFilter<$PrismaModel> | $Enums.Frequency
  }

  export type NestedEnumAssignmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAssignmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumFrequencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel>
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel>
    not?: NestedEnumFrequencyWithAggregatesFilter<$PrismaModel> | $Enums.Frequency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFrequencyFilter<$PrismaModel>
    _max?: NestedEnumFrequencyFilter<$PrismaModel>
  }

  export type NestedEnumServiceProviderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceProviderType | EnumServiceProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceProviderType[] | ListEnumServiceProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceProviderType[] | ListEnumServiceProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceProviderTypeFilter<$PrismaModel> | $Enums.ServiceProviderType
  }

  export type NestedEnumWorkStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkStatus | EnumWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkStatusFilter<$PrismaModel> | $Enums.WorkStatus
  }

  export type NestedEnumServiceProviderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceProviderType | EnumServiceProviderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceProviderType[] | ListEnumServiceProviderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceProviderType[] | ListEnumServiceProviderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceProviderTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServiceProviderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceProviderTypeFilter<$PrismaModel>
    _max?: NestedEnumServiceProviderTypeFilter<$PrismaModel>
  }

  export type NestedEnumWorkStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkStatus | EnumWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkStatus[] | ListEnumWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkStatusWithAggregatesFilter<$PrismaModel> | $Enums.WorkStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkStatusFilter<$PrismaModel>
    _max?: NestedEnumWorkStatusFilter<$PrismaModel>
  }

  export type NestedEnumSessionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusFilter<$PrismaModel> | $Enums.SessionStatus
  }

  export type NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SessionStatus | EnumSessionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SessionStatus[] | ListEnumSessionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSessionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SessionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSessionStatusFilter<$PrismaModel>
    _max?: NestedEnumSessionStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumStaffRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.StaffRole | EnumStaffRoleFieldRefInput<$PrismaModel>
    in?: $Enums.StaffRole[] | ListEnumStaffRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StaffRole[] | ListEnumStaffRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumStaffRoleFilter<$PrismaModel> | $Enums.StaffRole
  }

  export type NestedEnumStaffRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StaffRole | EnumStaffRoleFieldRefInput<$PrismaModel>
    in?: $Enums.StaffRole[] | ListEnumStaffRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.StaffRole[] | ListEnumStaffRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumStaffRoleWithAggregatesFilter<$PrismaModel> | $Enums.StaffRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStaffRoleFilter<$PrismaModel>
    _max?: NestedEnumStaffRoleFilter<$PrismaModel>
  }

  export type NestedEnumRelationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RelationType | EnumRelationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RelationType[] | ListEnumRelationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelationType[] | ListEnumRelationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationTypeFilter<$PrismaModel> | $Enums.RelationType
  }

  export type NestedEnumRelationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RelationType | EnumRelationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RelationType[] | ListEnumRelationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RelationType[] | ListEnumRelationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRelationTypeWithAggregatesFilter<$PrismaModel> | $Enums.RelationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRelationTypeFilter<$PrismaModel>
    _max?: NestedEnumRelationTypeFilter<$PrismaModel>
  }

  export type NestedEnumUnitFilter<$PrismaModel = never> = {
    equals?: $Enums.Unit | EnumUnitFieldRefInput<$PrismaModel>
    in?: $Enums.Unit[] | ListEnumUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.Unit[] | ListEnumUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumUnitFilter<$PrismaModel> | $Enums.Unit
  }

  export type NestedEnumFrequencyNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFrequencyNullableFilter<$PrismaModel> | $Enums.Frequency | null
  }

  export type NestedEnumUnitWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Unit | EnumUnitFieldRefInput<$PrismaModel>
    in?: $Enums.Unit[] | ListEnumUnitFieldRefInput<$PrismaModel>
    notIn?: $Enums.Unit[] | ListEnumUnitFieldRefInput<$PrismaModel>
    not?: NestedEnumUnitWithAggregatesFilter<$PrismaModel> | $Enums.Unit
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUnitFilter<$PrismaModel>
    _max?: NestedEnumUnitFilter<$PrismaModel>
  }

  export type NestedEnumFrequencyNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Frequency | EnumFrequencyFieldRefInput<$PrismaModel> | null
    in?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Frequency[] | ListEnumFrequencyFieldRefInput<$PrismaModel> | null
    not?: NestedEnumFrequencyNullableWithAggregatesFilter<$PrismaModel> | $Enums.Frequency | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumFrequencyNullableFilter<$PrismaModel>
    _max?: NestedEnumFrequencyNullableFilter<$PrismaModel>
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumDocumentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentStatus | EnumDocumentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentStatus[] | ListEnumDocumentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentStatus[] | ListEnumDocumentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentStatusFilter<$PrismaModel> | $Enums.DocumentStatus
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type NestedEnumDocumentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentStatus | EnumDocumentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentStatus[] | ListEnumDocumentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentStatus[] | ListEnumDocumentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentStatusWithAggregatesFilter<$PrismaModel> | $Enums.DocumentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentStatusFilter<$PrismaModel>
    _max?: NestedEnumDocumentStatusFilter<$PrismaModel>
  }

  export type NestedEnumActionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActionTypeFilter<$PrismaModel> | $Enums.ActionType
  }

  export type NestedEnumActionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActionType | EnumActionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActionType[] | ListEnumActionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumActionTypeWithAggregatesFilter<$PrismaModel> | $Enums.ActionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActionTypeFilter<$PrismaModel>
    _max?: NestedEnumActionTypeFilter<$PrismaModel>
  }

  export type NestedEnumChangeTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChangeType | EnumChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChangeTypeFilter<$PrismaModel> | $Enums.ChangeType
  }

  export type NestedEnumChangeTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChangeType | EnumChangeTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChangeType[] | ListEnumChangeTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChangeTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChangeType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChangeTypeFilter<$PrismaModel>
    _max?: NestedEnumChangeTypeFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    lastLoginAt?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    lastLoginAt?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isValid?: boolean
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isValid?: boolean
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutUserInput = {
    id?: string
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    id?: string
    roleId: string
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: $Enums.ActionType
    entityType?: string | null
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: $Enums.ActionType
    entityType?: string | null
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutUploadedByInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: DocumentCreateNestedOneWithoutNextVersionsInput
    nextVersions?: DocumentCreateNestedManyWithoutPreviousVersionInput
    client?: ClientCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    previousVersionId?: string | null
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    clientId?: string | null
    contractId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nextVersions?: DocumentUncheckedCreateNestedManyWithoutPreviousVersionInput
  }

  export type DocumentCreateOrConnectWithoutUploadedByInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type DocumentCreateManyUploadedByInputEnvelope = {
    data: DocumentCreateManyUploadedByInput | DocumentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    fullName: string
    preferredName?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    phone?: string | null
    email?: string | null
    image?: string | null
    address?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    preferredLanguage?: $Enums.Language | null
    preferredContactMethod?: $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffCreateNestedOneWithoutProfileInput
    beneficiary?: BeneficiaryCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    fullName: string
    preferredName?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    phone?: string | null
    email?: string | null
    image?: string | null
    address?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    preferredLanguage?: $Enums.Language | null
    preferredContactMethod?: $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffUncheckedCreateNestedOneWithoutProfileInput
    beneficiary?: BeneficiaryUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type StaffCreateWithoutUserInput = {
    id?: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutStaffInput
    client: ClientCreateNestedOneWithoutStaffInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutStaffInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutUserInput = {
    id?: string
    profileId: string
    clientId: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutStaffInput
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffCreateOrConnectWithoutUserInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
  }

  export type StaffCreateManyUserInputEnvelope = {
    data: StaffCreateManyUserInput | StaffCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BeneficiaryCreateWithoutUserLinkInput = {
    id?: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutBeneficiaryInput
    staff: StaffCreateNestedOneWithoutBeneficiariesInput
    guardian?: UserCreateNestedOneWithoutGuardianOfInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUncheckedCreateWithoutUserLinkInput = {
    id?: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    staffId: string
    guardianId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryCreateOrConnectWithoutUserLinkInput = {
    where: BeneficiaryWhereUniqueInput
    create: XOR<BeneficiaryCreateWithoutUserLinkInput, BeneficiaryUncheckedCreateWithoutUserLinkInput>
  }

  export type BeneficiaryCreateManyUserLinkInputEnvelope = {
    data: BeneficiaryCreateManyUserLinkInput | BeneficiaryCreateManyUserLinkInput[]
    skipDuplicates?: boolean
  }

  export type BeneficiaryCreateWithoutGuardianInput = {
    id?: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutBeneficiaryInput
    staff: StaffCreateNestedOneWithoutBeneficiariesInput
    userLink?: UserCreateNestedOneWithoutBeneficiariesInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUncheckedCreateWithoutGuardianInput = {
    id?: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    staffId: string
    userLinkId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryCreateOrConnectWithoutGuardianInput = {
    where: BeneficiaryWhereUniqueInput
    create: XOR<BeneficiaryCreateWithoutGuardianInput, BeneficiaryUncheckedCreateWithoutGuardianInput>
  }

  export type BeneficiaryCreateManyGuardianInputEnvelope = {
    data: BeneficiaryCreateManyGuardianInput | BeneficiaryCreateManyGuardianInput[]
    skipDuplicates?: boolean
  }

  export type UserStatusTransitionCreateWithoutUserInput = {
    id?: string
    fromStatus: $Enums.UserStatus
    toStatus: $Enums.UserStatus
    reason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserStatusTransitionUncheckedCreateWithoutUserInput = {
    id?: string
    fromStatus: $Enums.UserStatus
    toStatus: $Enums.UserStatus
    reason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserStatusTransitionCreateOrConnectWithoutUserInput = {
    where: UserStatusTransitionWhereUniqueInput
    create: XOR<UserStatusTransitionCreateWithoutUserInput, UserStatusTransitionUncheckedCreateWithoutUserInput>
  }

  export type UserStatusTransitionCreateManyUserInputEnvelope = {
    data: UserStatusTransitionCreateManyUserInput | UserStatusTransitionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    lastLoginAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    isValid?: BoolFilter<"Session"> | boolean
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    id?: StringFilter<"UserRole"> | string
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    action?: EnumActionTypeFilter<"AuditLog"> | $Enums.ActionType
    entityType?: StringNullableFilter<"AuditLog"> | string | null
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    data?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
  }

  export type DocumentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUploadedByInput, DocumentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<DocumentCreateWithoutUploadedByInput, DocumentUncheckedCreateWithoutUploadedByInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUploadedByInput, DocumentUncheckedUpdateWithoutUploadedByInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUploadedByInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    title?: StringFilter<"Document"> | string
    description?: StringNullableFilter<"Document"> | string | null
    type?: EnumDocumentTypeFilter<"Document"> | $Enums.DocumentType
    url?: StringFilter<"Document"> | string
    fileSize?: IntNullableFilter<"Document"> | number | null
    fileType?: StringNullableFilter<"Document"> | string | null
    version?: IntFilter<"Document"> | number
    isLatest?: BoolFilter<"Document"> | boolean
    previousVersionId?: StringNullableFilter<"Document"> | string | null
    status?: EnumDocumentStatusFilter<"Document"> | $Enums.DocumentStatus
    expiryDate?: DateTimeNullableFilter<"Document"> | Date | string | null
    isConfidential?: BoolFilter<"Document"> | boolean
    tags?: StringNullableListFilter<"Document">
    metadata?: JsonNullableFilter<"Document">
    deletedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    uploadedById?: StringNullableFilter<"Document"> | string | null
    clientId?: StringNullableFilter<"Document"> | string | null
    contractId?: StringNullableFilter<"Document"> | string | null
    createdAt?: DateTimeFilter<"Document"> | Date | string
    updatedAt?: DateTimeFilter<"Document"> | Date | string
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneWithoutProfileNestedInput
    beneficiary?: BeneficiaryUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUncheckedUpdateOneWithoutProfileNestedInput
    beneficiary?: BeneficiaryUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type StaffUpsertWithWhereUniqueWithoutUserInput = {
    where: StaffWhereUniqueInput
    update: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
    create: XOR<StaffCreateWithoutUserInput, StaffUncheckedCreateWithoutUserInput>
  }

  export type StaffUpdateWithWhereUniqueWithoutUserInput = {
    where: StaffWhereUniqueInput
    data: XOR<StaffUpdateWithoutUserInput, StaffUncheckedUpdateWithoutUserInput>
  }

  export type StaffUpdateManyWithWhereWithoutUserInput = {
    where: StaffScalarWhereInput
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyWithoutUserInput>
  }

  export type StaffScalarWhereInput = {
    AND?: StaffScalarWhereInput | StaffScalarWhereInput[]
    OR?: StaffScalarWhereInput[]
    NOT?: StaffScalarWhereInput | StaffScalarWhereInput[]
    id?: StringFilter<"Staff"> | string
    profileId?: StringFilter<"Staff"> | string
    clientId?: StringFilter<"Staff"> | string
    role?: EnumStaffRoleFilter<"Staff"> | $Enums.StaffRole
    startDate?: DateTimeFilter<"Staff"> | Date | string
    endDate?: DateTimeNullableFilter<"Staff"> | Date | string | null
    status?: EnumWorkStatusFilter<"Staff"> | $Enums.WorkStatus
    qualifications?: StringNullableListFilter<"Staff">
    specializations?: StringNullableListFilter<"Staff">
    preferredWorkingHours?: JsonNullableFilter<"Staff">
    emergencyContactName?: StringNullableFilter<"Staff"> | string | null
    emergencyContactPhone?: StringNullableFilter<"Staff"> | string | null
    emergencyContactEmail?: StringNullableFilter<"Staff"> | string | null
    metadata?: JsonNullableFilter<"Staff">
    deletedAt?: DateTimeNullableFilter<"Staff"> | Date | string | null
    userId?: StringFilter<"Staff"> | string
    createdAt?: DateTimeFilter<"Staff"> | Date | string
    updatedAt?: DateTimeFilter<"Staff"> | Date | string
  }

  export type BeneficiaryUpsertWithWhereUniqueWithoutUserLinkInput = {
    where: BeneficiaryWhereUniqueInput
    update: XOR<BeneficiaryUpdateWithoutUserLinkInput, BeneficiaryUncheckedUpdateWithoutUserLinkInput>
    create: XOR<BeneficiaryCreateWithoutUserLinkInput, BeneficiaryUncheckedCreateWithoutUserLinkInput>
  }

  export type BeneficiaryUpdateWithWhereUniqueWithoutUserLinkInput = {
    where: BeneficiaryWhereUniqueInput
    data: XOR<BeneficiaryUpdateWithoutUserLinkInput, BeneficiaryUncheckedUpdateWithoutUserLinkInput>
  }

  export type BeneficiaryUpdateManyWithWhereWithoutUserLinkInput = {
    where: BeneficiaryScalarWhereInput
    data: XOR<BeneficiaryUpdateManyMutationInput, BeneficiaryUncheckedUpdateManyWithoutUserLinkInput>
  }

  export type BeneficiaryScalarWhereInput = {
    AND?: BeneficiaryScalarWhereInput | BeneficiaryScalarWhereInput[]
    OR?: BeneficiaryScalarWhereInput[]
    NOT?: BeneficiaryScalarWhereInput | BeneficiaryScalarWhereInput[]
    id?: StringFilter<"Beneficiary"> | string
    profileId?: StringFilter<"Beneficiary"> | string
    relation?: EnumRelationTypeFilter<"Beneficiary"> | $Enums.RelationType
    isStaffLink?: BoolFilter<"Beneficiary"> | boolean
    staffId?: StringFilter<"Beneficiary"> | string
    guardianId?: StringNullableFilter<"Beneficiary"> | string | null
    userLinkId?: StringNullableFilter<"Beneficiary"> | string | null
    status?: EnumBaseStatusFilter<"Beneficiary"> | $Enums.BaseStatus
    lastServiceDate?: DateTimeNullableFilter<"Beneficiary"> | Date | string | null
    preferredLanguage?: EnumLanguageNullableFilter<"Beneficiary"> | $Enums.Language | null
    notes?: StringNullableFilter<"Beneficiary"> | string | null
    deletedAt?: DateTimeNullableFilter<"Beneficiary"> | Date | string | null
    createdAt?: DateTimeFilter<"Beneficiary"> | Date | string
    updatedAt?: DateTimeFilter<"Beneficiary"> | Date | string
  }

  export type BeneficiaryUpsertWithWhereUniqueWithoutGuardianInput = {
    where: BeneficiaryWhereUniqueInput
    update: XOR<BeneficiaryUpdateWithoutGuardianInput, BeneficiaryUncheckedUpdateWithoutGuardianInput>
    create: XOR<BeneficiaryCreateWithoutGuardianInput, BeneficiaryUncheckedCreateWithoutGuardianInput>
  }

  export type BeneficiaryUpdateWithWhereUniqueWithoutGuardianInput = {
    where: BeneficiaryWhereUniqueInput
    data: XOR<BeneficiaryUpdateWithoutGuardianInput, BeneficiaryUncheckedUpdateWithoutGuardianInput>
  }

  export type BeneficiaryUpdateManyWithWhereWithoutGuardianInput = {
    where: BeneficiaryScalarWhereInput
    data: XOR<BeneficiaryUpdateManyMutationInput, BeneficiaryUncheckedUpdateManyWithoutGuardianInput>
  }

  export type UserStatusTransitionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserStatusTransitionWhereUniqueInput
    update: XOR<UserStatusTransitionUpdateWithoutUserInput, UserStatusTransitionUncheckedUpdateWithoutUserInput>
    create: XOR<UserStatusTransitionCreateWithoutUserInput, UserStatusTransitionUncheckedCreateWithoutUserInput>
  }

  export type UserStatusTransitionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserStatusTransitionWhereUniqueInput
    data: XOR<UserStatusTransitionUpdateWithoutUserInput, UserStatusTransitionUncheckedUpdateWithoutUserInput>
  }

  export type UserStatusTransitionUpdateManyWithWhereWithoutUserInput = {
    where: UserStatusTransitionScalarWhereInput
    data: XOR<UserStatusTransitionUpdateManyMutationInput, UserStatusTransitionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserStatusTransitionScalarWhereInput = {
    AND?: UserStatusTransitionScalarWhereInput | UserStatusTransitionScalarWhereInput[]
    OR?: UserStatusTransitionScalarWhereInput[]
    NOT?: UserStatusTransitionScalarWhereInput | UserStatusTransitionScalarWhereInput[]
    id?: StringFilter<"UserStatusTransition"> | string
    userId?: StringFilter<"UserStatusTransition"> | string
    fromStatus?: EnumUserStatusFilter<"UserStatusTransition"> | $Enums.UserStatus
    toStatus?: EnumUserStatusFilter<"UserStatusTransition"> | $Enums.UserStatus
    reason?: StringNullableFilter<"UserStatusTransition"> | string | null
    metadata?: JsonNullableFilter<"UserStatusTransition">
    changedBy?: StringNullableFilter<"UserStatusTransition"> | string | null
    ipAddress?: StringNullableFilter<"UserStatusTransition"> | string | null
    userAgent?: StringNullableFilter<"UserStatusTransition"> | string | null
    createdAt?: DateTimeFilter<"UserStatusTransition"> | Date | string
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RolePermissionCreateWithoutRoleInput = {
    id?: string
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateWithoutRoleInput = {
    id?: string
    permissionId: string
  }

  export type RolePermissionCreateOrConnectWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionCreateManyRoleInputEnvelope = {
    data: RolePermissionCreateManyRoleInput | RolePermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutRoleInput = {
    id?: string
    user: UserCreateNestedOneWithoutUserRolesInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    id?: string
    userId: string
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    id?: string
    role: RoleCreateNestedOneWithoutPermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    id?: string
    roleId: string
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type RoleCreateWithoutPermissionsInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
    users?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutPermissionsInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutRolesInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
  }

  export type PermissionUncheckedCreateWithoutRolesInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
  }

  export type PermissionCreateOrConnectWithoutRolesInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
  }

  export type RoleUpsertWithoutPermissionsInput = {
    update: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type RoleUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PermissionUpsertWithoutRolesInput = {
    update: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolesInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type PermissionUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PermissionUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutUserRolesInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRolesInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
  }

  export type RoleCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    description?: string | null
    deletedAt?: Date | string | null
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutUserRolesInput = {
    update: XOR<UserUpdateWithoutUserRolesInput, UserUncheckedUpdateWithoutUserRolesInput>
    create: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRolesInput, UserUncheckedUpdateWithoutUserRolesInput>
  }

  export type UserUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type StaffCreateWithoutProfileInput = {
    id?: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffProfilesInput
    client: ClientCreateNestedOneWithoutStaffInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutStaffInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutProfileInput = {
    id?: string
    clientId: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutStaffInput
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffCreateOrConnectWithoutProfileInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutProfileInput, StaffUncheckedCreateWithoutProfileInput>
  }

  export type BeneficiaryCreateWithoutProfileInput = {
    id?: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: StaffCreateNestedOneWithoutBeneficiariesInput
    guardian?: UserCreateNestedOneWithoutGuardianOfInput
    userLink?: UserCreateNestedOneWithoutBeneficiariesInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUncheckedCreateWithoutProfileInput = {
    id?: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    staffId: string
    guardianId?: string | null
    userLinkId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryCreateOrConnectWithoutProfileInput = {
    where: BeneficiaryWhereUniqueInput
    create: XOR<BeneficiaryCreateWithoutProfileInput, BeneficiaryUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StaffUpsertWithoutProfileInput = {
    update: XOR<StaffUpdateWithoutProfileInput, StaffUncheckedUpdateWithoutProfileInput>
    create: XOR<StaffCreateWithoutProfileInput, StaffUncheckedCreateWithoutProfileInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutProfileInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutProfileInput, StaffUncheckedUpdateWithoutProfileInput>
  }

  export type StaffUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffProfilesNestedInput
    client?: ClientUpdateOneRequiredWithoutStaffNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutStaffNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutStaffNestedInput
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type BeneficiaryUpsertWithoutProfileInput = {
    update: XOR<BeneficiaryUpdateWithoutProfileInput, BeneficiaryUncheckedUpdateWithoutProfileInput>
    create: XOR<BeneficiaryCreateWithoutProfileInput, BeneficiaryUncheckedCreateWithoutProfileInput>
    where?: BeneficiaryWhereInput
  }

  export type BeneficiaryUpdateToOneWithWhereWithoutProfileInput = {
    where?: BeneficiaryWhereInput
    data: XOR<BeneficiaryUpdateWithoutProfileInput, BeneficiaryUncheckedUpdateWithoutProfileInput>
  }

  export type BeneficiaryUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneRequiredWithoutBeneficiariesNestedInput
    guardian?: UserUpdateOneWithoutGuardianOfNestedInput
    userLink?: UserUpdateOneWithoutBeneficiariesNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    staffId?: StringFieldUpdateOperationsInput | string
    guardianId?: NullableStringFieldUpdateOperationsInput | string | null
    userLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutBeneficiaryNestedInput
  }

  export type IndustryCreateWithoutClientsInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: IndustryCreateNestedOneWithoutChildrenInput
    children?: IndustryCreateNestedManyWithoutParentInput
  }

  export type IndustryUncheckedCreateWithoutClientsInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    parentId?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: IndustryUncheckedCreateNestedManyWithoutParentInput
  }

  export type IndustryCreateOrConnectWithoutClientsInput = {
    where: IndustryWhereUniqueInput
    create: XOR<IndustryCreateWithoutClientsInput, IndustryUncheckedCreateWithoutClientsInput>
  }

  export type ContractCreateWithoutClientInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentCreateNestedManyWithoutContractInput
    kpis?: KPICreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutClientInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
    kpis?: KPIUncheckedCreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutClientInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput>
  }

  export type ContractCreateManyClientInputEnvelope = {
    data: ContractCreateManyClientInput | ContractCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutClientInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: DocumentCreateNestedOneWithoutNextVersionsInput
    nextVersions?: DocumentCreateNestedManyWithoutPreviousVersionInput
    uploadedBy?: UserCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutClientInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    previousVersionId?: string | null
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    uploadedById?: string | null
    contractId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nextVersions?: DocumentUncheckedCreateNestedManyWithoutPreviousVersionInput
  }

  export type DocumentCreateOrConnectWithoutClientInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutClientInput, DocumentUncheckedCreateWithoutClientInput>
  }

  export type DocumentCreateManyClientInputEnvelope = {
    data: DocumentCreateManyClientInput | DocumentCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type KPICreateWithoutClientInput = {
    id?: string
    name: string
    description?: string | null
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: KpiTypeCreateNestedOneWithoutKpisInput
    assignments?: KPIAssignmentCreateNestedManyWithoutKpiInput
    Contract?: ContractCreateNestedOneWithoutKpisInput
  }

  export type KPIUncheckedCreateWithoutClientInput = {
    id?: string
    name: string
    description?: string | null
    typeId: string
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contractId?: string | null
    assignments?: KPIAssignmentUncheckedCreateNestedManyWithoutKpiInput
  }

  export type KPICreateOrConnectWithoutClientInput = {
    where: KPIWhereUniqueInput
    create: XOR<KPICreateWithoutClientInput, KPIUncheckedCreateWithoutClientInput>
  }

  export type KPICreateManyClientInputEnvelope = {
    data: KPICreateManyClientInput | KPICreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type KPIAssignmentCreateWithoutClientInput = {
    id?: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kpi: KPICreateNestedOneWithoutAssignmentsInput
    contract: ContractCreateNestedOneWithoutKpiAssignmentsInput
  }

  export type KPIAssignmentUncheckedCreateWithoutClientInput = {
    id?: string
    kpiId: string
    contractId: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPIAssignmentCreateOrConnectWithoutClientInput = {
    where: KPIAssignmentWhereUniqueInput
    create: XOR<KPIAssignmentCreateWithoutClientInput, KPIAssignmentUncheckedCreateWithoutClientInput>
  }

  export type KPIAssignmentCreateManyClientInputEnvelope = {
    data: KPIAssignmentCreateManyClientInput | KPIAssignmentCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ServiceAssignmentCreateWithoutClientInput = {
    id?: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutAssignmentsInput
    contract: ContractCreateNestedOneWithoutServiceAssignmentsInput
  }

  export type ServiceAssignmentUncheckedCreateWithoutClientInput = {
    id?: string
    serviceId: string
    contractId: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceAssignmentCreateOrConnectWithoutClientInput = {
    where: ServiceAssignmentWhereUniqueInput
    create: XOR<ServiceAssignmentCreateWithoutClientInput, ServiceAssignmentUncheckedCreateWithoutClientInput>
  }

  export type ServiceAssignmentCreateManyClientInputEnvelope = {
    data: ServiceAssignmentCreateManyClientInput | ServiceAssignmentCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type StaffCreateWithoutClientInput = {
    id?: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffProfilesInput
    profile: ProfileCreateNestedOneWithoutStaffInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutStaffInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutClientInput = {
    id?: string
    profileId: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutStaffInput
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffCreateOrConnectWithoutClientInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutClientInput, StaffUncheckedCreateWithoutClientInput>
  }

  export type StaffCreateManyClientInputEnvelope = {
    data: StaffCreateManyClientInput | StaffCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type IndustryUpsertWithoutClientsInput = {
    update: XOR<IndustryUpdateWithoutClientsInput, IndustryUncheckedUpdateWithoutClientsInput>
    create: XOR<IndustryCreateWithoutClientsInput, IndustryUncheckedCreateWithoutClientsInput>
    where?: IndustryWhereInput
  }

  export type IndustryUpdateToOneWithWhereWithoutClientsInput = {
    where?: IndustryWhereInput
    data: XOR<IndustryUpdateWithoutClientsInput, IndustryUncheckedUpdateWithoutClientsInput>
  }

  export type IndustryUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: IndustryUpdateOneWithoutChildrenNestedInput
    children?: IndustryUpdateManyWithoutParentNestedInput
  }

  export type IndustryUncheckedUpdateWithoutClientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: IndustryUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ContractUpsertWithWhereUniqueWithoutClientInput = {
    where: ContractWhereUniqueInput
    update: XOR<ContractUpdateWithoutClientInput, ContractUncheckedUpdateWithoutClientInput>
    create: XOR<ContractCreateWithoutClientInput, ContractUncheckedCreateWithoutClientInput>
  }

  export type ContractUpdateWithWhereUniqueWithoutClientInput = {
    where: ContractWhereUniqueInput
    data: XOR<ContractUpdateWithoutClientInput, ContractUncheckedUpdateWithoutClientInput>
  }

  export type ContractUpdateManyWithWhereWithoutClientInput = {
    where: ContractScalarWhereInput
    data: XOR<ContractUpdateManyMutationInput, ContractUncheckedUpdateManyWithoutClientInput>
  }

  export type ContractScalarWhereInput = {
    AND?: ContractScalarWhereInput | ContractScalarWhereInput[]
    OR?: ContractScalarWhereInput[]
    NOT?: ContractScalarWhereInput | ContractScalarWhereInput[]
    id?: StringFilter<"Contract"> | string
    clientId?: StringFilter<"Contract"> | string
    startDate?: DateTimeFilter<"Contract"> | Date | string
    endDate?: DateTimeFilter<"Contract"> | Date | string
    renewalDate?: DateTimeNullableFilter<"Contract"> | Date | string | null
    billingRate?: FloatFilter<"Contract"> | number
    isRenewable?: BoolFilter<"Contract"> | boolean
    isAutoRenew?: BoolFilter<"Contract"> | boolean
    paymentStatus?: EnumPaymentStatusFilter<"Contract"> | $Enums.PaymentStatus
    paymentFrequency?: StringNullableFilter<"Contract"> | string | null
    paymentTerms?: StringNullableFilter<"Contract"> | string | null
    currency?: StringNullableFilter<"Contract"> | string | null
    lastBillingDate?: DateTimeNullableFilter<"Contract"> | Date | string | null
    nextBillingDate?: DateTimeNullableFilter<"Contract"> | Date | string | null
    documentUrl?: StringNullableFilter<"Contract"> | string | null
    status?: EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
    signedBy?: StringNullableFilter<"Contract"> | string | null
    signedAt?: DateTimeNullableFilter<"Contract"> | Date | string | null
    terminationReason?: StringNullableFilter<"Contract"> | string | null
    notes?: StringNullableFilter<"Contract"> | string | null
    deletedAt?: DateTimeNullableFilter<"Contract"> | Date | string | null
    createdAt?: DateTimeFilter<"Contract"> | Date | string
    updatedAt?: DateTimeFilter<"Contract"> | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutClientInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutClientInput, DocumentUncheckedUpdateWithoutClientInput>
    create: XOR<DocumentCreateWithoutClientInput, DocumentUncheckedCreateWithoutClientInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutClientInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutClientInput, DocumentUncheckedUpdateWithoutClientInput>
  }

  export type DocumentUpdateManyWithWhereWithoutClientInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutClientInput>
  }

  export type KPIUpsertWithWhereUniqueWithoutClientInput = {
    where: KPIWhereUniqueInput
    update: XOR<KPIUpdateWithoutClientInput, KPIUncheckedUpdateWithoutClientInput>
    create: XOR<KPICreateWithoutClientInput, KPIUncheckedCreateWithoutClientInput>
  }

  export type KPIUpdateWithWhereUniqueWithoutClientInput = {
    where: KPIWhereUniqueInput
    data: XOR<KPIUpdateWithoutClientInput, KPIUncheckedUpdateWithoutClientInput>
  }

  export type KPIUpdateManyWithWhereWithoutClientInput = {
    where: KPIScalarWhereInput
    data: XOR<KPIUpdateManyMutationInput, KPIUncheckedUpdateManyWithoutClientInput>
  }

  export type KPIScalarWhereInput = {
    AND?: KPIScalarWhereInput | KPIScalarWhereInput[]
    OR?: KPIScalarWhereInput[]
    NOT?: KPIScalarWhereInput | KPIScalarWhereInput[]
    id?: StringFilter<"KPI"> | string
    name?: StringFilter<"KPI"> | string
    description?: StringNullableFilter<"KPI"> | string | null
    typeId?: StringFilter<"KPI"> | string
    unit?: StringFilter<"KPI"> | string
    unitType?: EnumUnitFilter<"KPI"> | $Enums.Unit
    targetValue?: StringNullableFilter<"KPI"> | string | null
    isPublic?: BoolFilter<"KPI"> | boolean
    calculationMethod?: StringNullableFilter<"KPI"> | string | null
    frequency?: EnumFrequencyNullableFilter<"KPI"> | $Enums.Frequency | null
    metadata?: JsonNullableFilter<"KPI">
    deletedAt?: DateTimeNullableFilter<"KPI"> | Date | string | null
    createdAt?: DateTimeFilter<"KPI"> | Date | string
    updatedAt?: DateTimeFilter<"KPI"> | Date | string
    clientId?: StringNullableFilter<"KPI"> | string | null
    contractId?: StringNullableFilter<"KPI"> | string | null
  }

  export type KPIAssignmentUpsertWithWhereUniqueWithoutClientInput = {
    where: KPIAssignmentWhereUniqueInput
    update: XOR<KPIAssignmentUpdateWithoutClientInput, KPIAssignmentUncheckedUpdateWithoutClientInput>
    create: XOR<KPIAssignmentCreateWithoutClientInput, KPIAssignmentUncheckedCreateWithoutClientInput>
  }

  export type KPIAssignmentUpdateWithWhereUniqueWithoutClientInput = {
    where: KPIAssignmentWhereUniqueInput
    data: XOR<KPIAssignmentUpdateWithoutClientInput, KPIAssignmentUncheckedUpdateWithoutClientInput>
  }

  export type KPIAssignmentUpdateManyWithWhereWithoutClientInput = {
    where: KPIAssignmentScalarWhereInput
    data: XOR<KPIAssignmentUpdateManyMutationInput, KPIAssignmentUncheckedUpdateManyWithoutClientInput>
  }

  export type KPIAssignmentScalarWhereInput = {
    AND?: KPIAssignmentScalarWhereInput | KPIAssignmentScalarWhereInput[]
    OR?: KPIAssignmentScalarWhereInput[]
    NOT?: KPIAssignmentScalarWhereInput | KPIAssignmentScalarWhereInput[]
    id?: StringFilter<"KPIAssignment"> | string
    kpiId?: StringFilter<"KPIAssignment"> | string
    contractId?: StringFilter<"KPIAssignment"> | string
    targetValue?: StringNullableFilter<"KPIAssignment"> | string | null
    frequency?: EnumFrequencyFilter<"KPIAssignment"> | $Enums.Frequency
    status?: EnumAssignmentStatusFilter<"KPIAssignment"> | $Enums.AssignmentStatus
    notes?: StringNullableFilter<"KPIAssignment"> | string | null
    startDate?: DateTimeFilter<"KPIAssignment"> | Date | string
    endDate?: DateTimeNullableFilter<"KPIAssignment"> | Date | string | null
    metadata?: JsonNullableFilter<"KPIAssignment">
    deletedAt?: DateTimeNullableFilter<"KPIAssignment"> | Date | string | null
    createdAt?: DateTimeFilter<"KPIAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"KPIAssignment"> | Date | string
    clientId?: StringNullableFilter<"KPIAssignment"> | string | null
  }

  export type ServiceAssignmentUpsertWithWhereUniqueWithoutClientInput = {
    where: ServiceAssignmentWhereUniqueInput
    update: XOR<ServiceAssignmentUpdateWithoutClientInput, ServiceAssignmentUncheckedUpdateWithoutClientInput>
    create: XOR<ServiceAssignmentCreateWithoutClientInput, ServiceAssignmentUncheckedCreateWithoutClientInput>
  }

  export type ServiceAssignmentUpdateWithWhereUniqueWithoutClientInput = {
    where: ServiceAssignmentWhereUniqueInput
    data: XOR<ServiceAssignmentUpdateWithoutClientInput, ServiceAssignmentUncheckedUpdateWithoutClientInput>
  }

  export type ServiceAssignmentUpdateManyWithWhereWithoutClientInput = {
    where: ServiceAssignmentScalarWhereInput
    data: XOR<ServiceAssignmentUpdateManyMutationInput, ServiceAssignmentUncheckedUpdateManyWithoutClientInput>
  }

  export type ServiceAssignmentScalarWhereInput = {
    AND?: ServiceAssignmentScalarWhereInput | ServiceAssignmentScalarWhereInput[]
    OR?: ServiceAssignmentScalarWhereInput[]
    NOT?: ServiceAssignmentScalarWhereInput | ServiceAssignmentScalarWhereInput[]
    id?: StringFilter<"ServiceAssignment"> | string
    serviceId?: StringFilter<"ServiceAssignment"> | string
    contractId?: StringFilter<"ServiceAssignment"> | string
    status?: EnumAssignmentStatusFilter<"ServiceAssignment"> | $Enums.AssignmentStatus
    startDate?: DateTimeFilter<"ServiceAssignment"> | Date | string
    endDate?: DateTimeNullableFilter<"ServiceAssignment"> | Date | string | null
    frequency?: EnumFrequencyFilter<"ServiceAssignment"> | $Enums.Frequency
    metadata?: JsonNullableFilter<"ServiceAssignment">
    deletedAt?: DateTimeNullableFilter<"ServiceAssignment"> | Date | string | null
    createdAt?: DateTimeFilter<"ServiceAssignment"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceAssignment"> | Date | string
    clientId?: StringNullableFilter<"ServiceAssignment"> | string | null
  }

  export type StaffUpsertWithWhereUniqueWithoutClientInput = {
    where: StaffWhereUniqueInput
    update: XOR<StaffUpdateWithoutClientInput, StaffUncheckedUpdateWithoutClientInput>
    create: XOR<StaffCreateWithoutClientInput, StaffUncheckedCreateWithoutClientInput>
  }

  export type StaffUpdateWithWhereUniqueWithoutClientInput = {
    where: StaffWhereUniqueInput
    data: XOR<StaffUpdateWithoutClientInput, StaffUncheckedUpdateWithoutClientInput>
  }

  export type StaffUpdateManyWithWhereWithoutClientInput = {
    where: StaffScalarWhereInput
    data: XOR<StaffUpdateManyMutationInput, StaffUncheckedUpdateManyWithoutClientInput>
  }

  export type IndustryCreateWithoutChildrenInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: IndustryCreateNestedOneWithoutChildrenInput
    clients?: ClientCreateNestedManyWithoutIndustryInput
  }

  export type IndustryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    parentId?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clients?: ClientUncheckedCreateNestedManyWithoutIndustryInput
  }

  export type IndustryCreateOrConnectWithoutChildrenInput = {
    where: IndustryWhereUniqueInput
    create: XOR<IndustryCreateWithoutChildrenInput, IndustryUncheckedCreateWithoutChildrenInput>
  }

  export type IndustryCreateWithoutParentInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: IndustryCreateNestedManyWithoutParentInput
    clients?: ClientCreateNestedManyWithoutIndustryInput
  }

  export type IndustryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: IndustryUncheckedCreateNestedManyWithoutParentInput
    clients?: ClientUncheckedCreateNestedManyWithoutIndustryInput
  }

  export type IndustryCreateOrConnectWithoutParentInput = {
    where: IndustryWhereUniqueInput
    create: XOR<IndustryCreateWithoutParentInput, IndustryUncheckedCreateWithoutParentInput>
  }

  export type IndustryCreateManyParentInputEnvelope = {
    data: IndustryCreateManyParentInput | IndustryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type ClientCreateWithoutIndustryInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractCreateNestedManyWithoutClientInput
    documents?: DocumentCreateNestedManyWithoutClientInput
    kpis?: KPICreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutClientInput
    staff?: StaffCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutIndustryInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutClientInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClientInput
    kpis?: KPIUncheckedCreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutClientInput
    staff?: StaffUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutIndustryInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutIndustryInput, ClientUncheckedCreateWithoutIndustryInput>
  }

  export type ClientCreateManyIndustryInputEnvelope = {
    data: ClientCreateManyIndustryInput | ClientCreateManyIndustryInput[]
    skipDuplicates?: boolean
  }

  export type IndustryUpsertWithoutChildrenInput = {
    update: XOR<IndustryUpdateWithoutChildrenInput, IndustryUncheckedUpdateWithoutChildrenInput>
    create: XOR<IndustryCreateWithoutChildrenInput, IndustryUncheckedCreateWithoutChildrenInput>
    where?: IndustryWhereInput
  }

  export type IndustryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: IndustryWhereInput
    data: XOR<IndustryUpdateWithoutChildrenInput, IndustryUncheckedUpdateWithoutChildrenInput>
  }

  export type IndustryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: IndustryUpdateOneWithoutChildrenNestedInput
    clients?: ClientUpdateManyWithoutIndustryNestedInput
  }

  export type IndustryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clients?: ClientUncheckedUpdateManyWithoutIndustryNestedInput
  }

  export type IndustryUpsertWithWhereUniqueWithoutParentInput = {
    where: IndustryWhereUniqueInput
    update: XOR<IndustryUpdateWithoutParentInput, IndustryUncheckedUpdateWithoutParentInput>
    create: XOR<IndustryCreateWithoutParentInput, IndustryUncheckedCreateWithoutParentInput>
  }

  export type IndustryUpdateWithWhereUniqueWithoutParentInput = {
    where: IndustryWhereUniqueInput
    data: XOR<IndustryUpdateWithoutParentInput, IndustryUncheckedUpdateWithoutParentInput>
  }

  export type IndustryUpdateManyWithWhereWithoutParentInput = {
    where: IndustryScalarWhereInput
    data: XOR<IndustryUpdateManyMutationInput, IndustryUncheckedUpdateManyWithoutParentInput>
  }

  export type IndustryScalarWhereInput = {
    AND?: IndustryScalarWhereInput | IndustryScalarWhereInput[]
    OR?: IndustryScalarWhereInput[]
    NOT?: IndustryScalarWhereInput | IndustryScalarWhereInput[]
    id?: StringFilter<"Industry"> | string
    name?: StringFilter<"Industry"> | string
    code?: StringNullableFilter<"Industry"> | string | null
    description?: StringNullableFilter<"Industry"> | string | null
    parentId?: StringNullableFilter<"Industry"> | string | null
    externalId?: StringNullableFilter<"Industry"> | string | null
    metadata?: JsonNullableFilter<"Industry">
    deletedAt?: DateTimeNullableFilter<"Industry"> | Date | string | null
    createdAt?: DateTimeFilter<"Industry"> | Date | string
    updatedAt?: DateTimeFilter<"Industry"> | Date | string
  }

  export type ClientUpsertWithWhereUniqueWithoutIndustryInput = {
    where: ClientWhereUniqueInput
    update: XOR<ClientUpdateWithoutIndustryInput, ClientUncheckedUpdateWithoutIndustryInput>
    create: XOR<ClientCreateWithoutIndustryInput, ClientUncheckedCreateWithoutIndustryInput>
  }

  export type ClientUpdateWithWhereUniqueWithoutIndustryInput = {
    where: ClientWhereUniqueInput
    data: XOR<ClientUpdateWithoutIndustryInput, ClientUncheckedUpdateWithoutIndustryInput>
  }

  export type ClientUpdateManyWithWhereWithoutIndustryInput = {
    where: ClientScalarWhereInput
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyWithoutIndustryInput>
  }

  export type ClientScalarWhereInput = {
    AND?: ClientScalarWhereInput | ClientScalarWhereInput[]
    OR?: ClientScalarWhereInput[]
    NOT?: ClientScalarWhereInput | ClientScalarWhereInput[]
    id?: StringFilter<"Client"> | string
    name?: StringFilter<"Client"> | string
    email?: StringNullableFilter<"Client"> | string | null
    phone?: StringNullableFilter<"Client"> | string | null
    website?: StringNullableFilter<"Client"> | string | null
    address?: StringNullableFilter<"Client"> | string | null
    billingAddress?: StringNullableFilter<"Client"> | string | null
    taxId?: StringNullableFilter<"Client"> | string | null
    contactPerson?: StringNullableFilter<"Client"> | string | null
    contactEmail?: StringNullableFilter<"Client"> | string | null
    contactPhone?: StringNullableFilter<"Client"> | string | null
    industryId?: StringNullableFilter<"Client"> | string | null
    status?: EnumBaseStatusFilter<"Client"> | $Enums.BaseStatus
    preferredContactMethod?: EnumContactMethodNullableFilter<"Client"> | $Enums.ContactMethod | null
    timezone?: StringNullableFilter<"Client"> | string | null
    isVerified?: BoolFilter<"Client"> | boolean
    notes?: StringNullableFilter<"Client"> | string | null
    metadata?: JsonNullableFilter<"Client">
    deletedAt?: DateTimeNullableFilter<"Client"> | Date | string | null
    createdAt?: DateTimeFilter<"Client"> | Date | string
    updatedAt?: DateTimeFilter<"Client"> | Date | string
  }

  export type ClientCreateWithoutContractsInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    industry?: IndustryCreateNestedOneWithoutClientsInput
    documents?: DocumentCreateNestedManyWithoutClientInput
    kpis?: KPICreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutClientInput
    staff?: StaffCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutContractsInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    industryId?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutClientInput
    kpis?: KPIUncheckedCreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutClientInput
    staff?: StaffUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutContractsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
  }

  export type DocumentCreateWithoutContractInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: DocumentCreateNestedOneWithoutNextVersionsInput
    nextVersions?: DocumentCreateNestedManyWithoutPreviousVersionInput
    uploadedBy?: UserCreateNestedOneWithoutDocumentsInput
    client?: ClientCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutContractInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    previousVersionId?: string | null
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    uploadedById?: string | null
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nextVersions?: DocumentUncheckedCreateNestedManyWithoutPreviousVersionInput
  }

  export type DocumentCreateOrConnectWithoutContractInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput>
  }

  export type DocumentCreateManyContractInputEnvelope = {
    data: DocumentCreateManyContractInput | DocumentCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type KPICreateWithoutContractInput = {
    id?: string
    name: string
    description?: string | null
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: KpiTypeCreateNestedOneWithoutKpisInput
    assignments?: KPIAssignmentCreateNestedManyWithoutKpiInput
    client?: ClientCreateNestedOneWithoutKpisInput
  }

  export type KPIUncheckedCreateWithoutContractInput = {
    id?: string
    name: string
    description?: string | null
    typeId: string
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
    assignments?: KPIAssignmentUncheckedCreateNestedManyWithoutKpiInput
  }

  export type KPICreateOrConnectWithoutContractInput = {
    where: KPIWhereUniqueInput
    create: XOR<KPICreateWithoutContractInput, KPIUncheckedCreateWithoutContractInput>
  }

  export type KPICreateManyContractInputEnvelope = {
    data: KPICreateManyContractInput | KPICreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type KPIAssignmentCreateWithoutContractInput = {
    id?: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kpi: KPICreateNestedOneWithoutAssignmentsInput
    client?: ClientCreateNestedOneWithoutKpiAssignmentsInput
  }

  export type KPIAssignmentUncheckedCreateWithoutContractInput = {
    id?: string
    kpiId: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type KPIAssignmentCreateOrConnectWithoutContractInput = {
    where: KPIAssignmentWhereUniqueInput
    create: XOR<KPIAssignmentCreateWithoutContractInput, KPIAssignmentUncheckedCreateWithoutContractInput>
  }

  export type KPIAssignmentCreateManyContractInputEnvelope = {
    data: KPIAssignmentCreateManyContractInput | KPIAssignmentCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type ServiceAssignmentCreateWithoutContractInput = {
    id?: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    service: ServiceCreateNestedOneWithoutAssignmentsInput
    client?: ClientCreateNestedOneWithoutServiceAssignmentsInput
  }

  export type ServiceAssignmentUncheckedCreateWithoutContractInput = {
    id?: string
    serviceId: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type ServiceAssignmentCreateOrConnectWithoutContractInput = {
    where: ServiceAssignmentWhereUniqueInput
    create: XOR<ServiceAssignmentCreateWithoutContractInput, ServiceAssignmentUncheckedCreateWithoutContractInput>
  }

  export type ServiceAssignmentCreateManyContractInputEnvelope = {
    data: ServiceAssignmentCreateManyContractInput | ServiceAssignmentCreateManyContractInput[]
    skipDuplicates?: boolean
  }

  export type ClientUpsertWithoutContractsInput = {
    update: XOR<ClientUpdateWithoutContractsInput, ClientUncheckedUpdateWithoutContractsInput>
    create: XOR<ClientCreateWithoutContractsInput, ClientUncheckedCreateWithoutContractsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutContractsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutContractsInput, ClientUncheckedUpdateWithoutContractsInput>
  }

  export type ClientUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    industry?: IndustryUpdateOneWithoutClientsNestedInput
    documents?: DocumentUpdateManyWithoutClientNestedInput
    kpis?: KPIUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutClientNestedInput
    staff?: StaffUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    industryId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutClientNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutClientNestedInput
    staff?: StaffUncheckedUpdateManyWithoutClientNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutContractInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutContractInput, DocumentUncheckedUpdateWithoutContractInput>
    create: XOR<DocumentCreateWithoutContractInput, DocumentUncheckedCreateWithoutContractInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutContractInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutContractInput, DocumentUncheckedUpdateWithoutContractInput>
  }

  export type DocumentUpdateManyWithWhereWithoutContractInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutContractInput>
  }

  export type KPIUpsertWithWhereUniqueWithoutContractInput = {
    where: KPIWhereUniqueInput
    update: XOR<KPIUpdateWithoutContractInput, KPIUncheckedUpdateWithoutContractInput>
    create: XOR<KPICreateWithoutContractInput, KPIUncheckedCreateWithoutContractInput>
  }

  export type KPIUpdateWithWhereUniqueWithoutContractInput = {
    where: KPIWhereUniqueInput
    data: XOR<KPIUpdateWithoutContractInput, KPIUncheckedUpdateWithoutContractInput>
  }

  export type KPIUpdateManyWithWhereWithoutContractInput = {
    where: KPIScalarWhereInput
    data: XOR<KPIUpdateManyMutationInput, KPIUncheckedUpdateManyWithoutContractInput>
  }

  export type KPIAssignmentUpsertWithWhereUniqueWithoutContractInput = {
    where: KPIAssignmentWhereUniqueInput
    update: XOR<KPIAssignmentUpdateWithoutContractInput, KPIAssignmentUncheckedUpdateWithoutContractInput>
    create: XOR<KPIAssignmentCreateWithoutContractInput, KPIAssignmentUncheckedCreateWithoutContractInput>
  }

  export type KPIAssignmentUpdateWithWhereUniqueWithoutContractInput = {
    where: KPIAssignmentWhereUniqueInput
    data: XOR<KPIAssignmentUpdateWithoutContractInput, KPIAssignmentUncheckedUpdateWithoutContractInput>
  }

  export type KPIAssignmentUpdateManyWithWhereWithoutContractInput = {
    where: KPIAssignmentScalarWhereInput
    data: XOR<KPIAssignmentUpdateManyMutationInput, KPIAssignmentUncheckedUpdateManyWithoutContractInput>
  }

  export type ServiceAssignmentUpsertWithWhereUniqueWithoutContractInput = {
    where: ServiceAssignmentWhereUniqueInput
    update: XOR<ServiceAssignmentUpdateWithoutContractInput, ServiceAssignmentUncheckedUpdateWithoutContractInput>
    create: XOR<ServiceAssignmentCreateWithoutContractInput, ServiceAssignmentUncheckedCreateWithoutContractInput>
  }

  export type ServiceAssignmentUpdateWithWhereUniqueWithoutContractInput = {
    where: ServiceAssignmentWhereUniqueInput
    data: XOR<ServiceAssignmentUpdateWithoutContractInput, ServiceAssignmentUncheckedUpdateWithoutContractInput>
  }

  export type ServiceAssignmentUpdateManyWithWhereWithoutContractInput = {
    where: ServiceAssignmentScalarWhereInput
    data: XOR<ServiceAssignmentUpdateManyMutationInput, ServiceAssignmentUncheckedUpdateManyWithoutContractInput>
  }

  export type ServiceCreateWithoutCategoryInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: ServiceAssignmentCreateNestedManyWithoutServiceInput
    ServiceProvider?: ServiceProviderCreateNestedOneWithoutServicesInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceProviderId?: string | null
    assignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutServiceInput
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutCategoryInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput>
  }

  export type ServiceCreateManyCategoryInputEnvelope = {
    data: ServiceCreateManyCategoryInput | ServiceCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ServiceUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutCategoryInput, ServiceUncheckedUpdateWithoutCategoryInput>
    create: XOR<ServiceCreateWithoutCategoryInput, ServiceUncheckedCreateWithoutCategoryInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutCategoryInput, ServiceUncheckedUpdateWithoutCategoryInput>
  }

  export type ServiceUpdateManyWithWhereWithoutCategoryInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ServiceScalarWhereInput = {
    AND?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    OR?: ServiceScalarWhereInput[]
    NOT?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    id?: StringFilter<"Service"> | string
    name?: StringFilter<"Service"> | string
    description?: StringNullableFilter<"Service"> | string | null
    categoryId?: StringFilter<"Service"> | string
    status?: EnumBaseStatusFilter<"Service"> | $Enums.BaseStatus
    duration?: IntNullableFilter<"Service"> | number | null
    capacity?: IntNullableFilter<"Service"> | number | null
    prerequisites?: StringNullableFilter<"Service"> | string | null
    isPublic?: BoolFilter<"Service"> | boolean
    price?: FloatNullableFilter<"Service"> | number | null
    metadata?: JsonNullableFilter<"Service">
    deletedAt?: DateTimeNullableFilter<"Service"> | Date | string | null
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    serviceProviderId?: StringNullableFilter<"Service"> | string | null
  }

  export type ServiceCategoryCreateWithoutServicesInput = {
    id?: string
    name: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryUncheckedCreateWithoutServicesInput = {
    id?: string
    name: string
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCategoryCreateOrConnectWithoutServicesInput = {
    where: ServiceCategoryWhereUniqueInput
    create: XOR<ServiceCategoryCreateWithoutServicesInput, ServiceCategoryUncheckedCreateWithoutServicesInput>
  }

  export type ServiceAssignmentCreateWithoutServiceInput = {
    id?: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutServiceAssignmentsInput
    client?: ClientCreateNestedOneWithoutServiceAssignmentsInput
  }

  export type ServiceAssignmentUncheckedCreateWithoutServiceInput = {
    id?: string
    contractId: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type ServiceAssignmentCreateOrConnectWithoutServiceInput = {
    where: ServiceAssignmentWhereUniqueInput
    create: XOR<ServiceAssignmentCreateWithoutServiceInput, ServiceAssignmentUncheckedCreateWithoutServiceInput>
  }

  export type ServiceAssignmentCreateManyServiceInputEnvelope = {
    data: ServiceAssignmentCreateManyServiceInput | ServiceAssignmentCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ServiceProviderCreateWithoutServicesInput = {
    id?: string
    name: string
    type: $Enums.ServiceProviderType
    contactEmail?: string | null
    contactPhone?: string | null
    location?: string | null
    qualifications?: ServiceProviderCreatequalificationsInput | string[]
    specializations?: ServiceProviderCreatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    isVerified?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    status?: $Enums.WorkStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: ServiceSessionCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderUncheckedCreateWithoutServicesInput = {
    id?: string
    name: string
    type: $Enums.ServiceProviderType
    contactEmail?: string | null
    contactPhone?: string | null
    location?: string | null
    qualifications?: ServiceProviderCreatequalificationsInput | string[]
    specializations?: ServiceProviderCreatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    isVerified?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    status?: $Enums.WorkStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: ServiceSessionUncheckedCreateNestedManyWithoutProviderInput
  }

  export type ServiceProviderCreateOrConnectWithoutServicesInput = {
    where: ServiceProviderWhereUniqueInput
    create: XOR<ServiceProviderCreateWithoutServicesInput, ServiceProviderUncheckedCreateWithoutServicesInput>
  }

  export type ServiceSessionCreateWithoutServiceInput = {
    id?: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffCreateNestedOneWithoutServiceSessionInput
    beneficiary?: BeneficiaryCreateNestedOneWithoutServiceSessionInput
    provider: ServiceProviderCreateNestedOneWithoutSessionsInput
    SessionFeedback?: SessionFeedbackCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionUncheckedCreateWithoutServiceInput = {
    id?: string
    providerId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    staffId?: string | null
    beneficiaryId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionFeedback?: SessionFeedbackUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionCreateOrConnectWithoutServiceInput = {
    where: ServiceSessionWhereUniqueInput
    create: XOR<ServiceSessionCreateWithoutServiceInput, ServiceSessionUncheckedCreateWithoutServiceInput>
  }

  export type ServiceSessionCreateManyServiceInputEnvelope = {
    data: ServiceSessionCreateManyServiceInput | ServiceSessionCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCategoryUpsertWithoutServicesInput = {
    update: XOR<ServiceCategoryUpdateWithoutServicesInput, ServiceCategoryUncheckedUpdateWithoutServicesInput>
    create: XOR<ServiceCategoryCreateWithoutServicesInput, ServiceCategoryUncheckedCreateWithoutServicesInput>
    where?: ServiceCategoryWhereInput
  }

  export type ServiceCategoryUpdateToOneWithWhereWithoutServicesInput = {
    where?: ServiceCategoryWhereInput
    data: XOR<ServiceCategoryUpdateWithoutServicesInput, ServiceCategoryUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceCategoryUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCategoryUncheckedUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceAssignmentUpsertWithWhereUniqueWithoutServiceInput = {
    where: ServiceAssignmentWhereUniqueInput
    update: XOR<ServiceAssignmentUpdateWithoutServiceInput, ServiceAssignmentUncheckedUpdateWithoutServiceInput>
    create: XOR<ServiceAssignmentCreateWithoutServiceInput, ServiceAssignmentUncheckedCreateWithoutServiceInput>
  }

  export type ServiceAssignmentUpdateWithWhereUniqueWithoutServiceInput = {
    where: ServiceAssignmentWhereUniqueInput
    data: XOR<ServiceAssignmentUpdateWithoutServiceInput, ServiceAssignmentUncheckedUpdateWithoutServiceInput>
  }

  export type ServiceAssignmentUpdateManyWithWhereWithoutServiceInput = {
    where: ServiceAssignmentScalarWhereInput
    data: XOR<ServiceAssignmentUpdateManyMutationInput, ServiceAssignmentUncheckedUpdateManyWithoutServiceInput>
  }

  export type ServiceProviderUpsertWithoutServicesInput = {
    update: XOR<ServiceProviderUpdateWithoutServicesInput, ServiceProviderUncheckedUpdateWithoutServicesInput>
    create: XOR<ServiceProviderCreateWithoutServicesInput, ServiceProviderUncheckedCreateWithoutServicesInput>
    where?: ServiceProviderWhereInput
  }

  export type ServiceProviderUpdateToOneWithWhereWithoutServicesInput = {
    where?: ServiceProviderWhereInput
    data: XOR<ServiceProviderUpdateWithoutServicesInput, ServiceProviderUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceProviderUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceProviderTypeFieldUpdateOperationsInput | $Enums.ServiceProviderType
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: ServiceProviderUpdatequalificationsInput | string[]
    specializations?: ServiceProviderUpdatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: ServiceSessionUpdateManyWithoutProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateWithoutServicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceProviderTypeFieldUpdateOperationsInput | $Enums.ServiceProviderType
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: ServiceProviderUpdatequalificationsInput | string[]
    specializations?: ServiceProviderUpdatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: ServiceSessionUncheckedUpdateManyWithoutProviderNestedInput
  }

  export type ServiceSessionUpsertWithWhereUniqueWithoutServiceInput = {
    where: ServiceSessionWhereUniqueInput
    update: XOR<ServiceSessionUpdateWithoutServiceInput, ServiceSessionUncheckedUpdateWithoutServiceInput>
    create: XOR<ServiceSessionCreateWithoutServiceInput, ServiceSessionUncheckedCreateWithoutServiceInput>
  }

  export type ServiceSessionUpdateWithWhereUniqueWithoutServiceInput = {
    where: ServiceSessionWhereUniqueInput
    data: XOR<ServiceSessionUpdateWithoutServiceInput, ServiceSessionUncheckedUpdateWithoutServiceInput>
  }

  export type ServiceSessionUpdateManyWithWhereWithoutServiceInput = {
    where: ServiceSessionScalarWhereInput
    data: XOR<ServiceSessionUpdateManyMutationInput, ServiceSessionUncheckedUpdateManyWithoutServiceInput>
  }

  export type ServiceSessionScalarWhereInput = {
    AND?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
    OR?: ServiceSessionScalarWhereInput[]
    NOT?: ServiceSessionScalarWhereInput | ServiceSessionScalarWhereInput[]
    id?: StringFilter<"ServiceSession"> | string
    serviceId?: StringFilter<"ServiceSession"> | string
    providerId?: StringFilter<"ServiceSession"> | string
    scheduledAt?: DateTimeFilter<"ServiceSession"> | Date | string
    completedAt?: DateTimeNullableFilter<"ServiceSession"> | Date | string | null
    status?: EnumSessionStatusFilter<"ServiceSession"> | $Enums.SessionStatus
    notes?: StringNullableFilter<"ServiceSession"> | string | null
    feedback?: StringNullableFilter<"ServiceSession"> | string | null
    duration?: IntNullableFilter<"ServiceSession"> | number | null
    location?: StringNullableFilter<"ServiceSession"> | string | null
    cancellationReason?: StringNullableFilter<"ServiceSession"> | string | null
    rescheduleCount?: IntFilter<"ServiceSession"> | number
    isGroupSession?: BoolFilter<"ServiceSession"> | boolean
    metadata?: JsonNullableFilter<"ServiceSession">
    deletedAt?: DateTimeNullableFilter<"ServiceSession"> | Date | string | null
    staffId?: StringNullableFilter<"ServiceSession"> | string | null
    beneficiaryId?: StringNullableFilter<"ServiceSession"> | string | null
    createdAt?: DateTimeFilter<"ServiceSession"> | Date | string
    updatedAt?: DateTimeFilter<"ServiceSession"> | Date | string
  }

  export type ServiceCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    ServiceProvider?: ServiceProviderCreateNestedOneWithoutServicesInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    description?: string | null
    categoryId: string
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceProviderId?: string | null
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutAssignmentsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutAssignmentsInput, ServiceUncheckedCreateWithoutAssignmentsInput>
  }

  export type ContractCreateWithoutServiceAssignmentsInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutContractsInput
    documents?: DocumentCreateNestedManyWithoutContractInput
    kpis?: KPICreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutServiceAssignmentsInput = {
    id?: string
    clientId: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
    kpis?: KPIUncheckedCreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutServiceAssignmentsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutServiceAssignmentsInput, ContractUncheckedCreateWithoutServiceAssignmentsInput>
  }

  export type ClientCreateWithoutServiceAssignmentsInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    industry?: IndustryCreateNestedOneWithoutClientsInput
    contracts?: ContractCreateNestedManyWithoutClientInput
    documents?: DocumentCreateNestedManyWithoutClientInput
    kpis?: KPICreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutClientInput
    staff?: StaffCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutServiceAssignmentsInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    industryId?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutClientInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClientInput
    kpis?: KPIUncheckedCreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutClientInput
    staff?: StaffUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutServiceAssignmentsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutServiceAssignmentsInput, ClientUncheckedCreateWithoutServiceAssignmentsInput>
  }

  export type ServiceUpsertWithoutAssignmentsInput = {
    update: XOR<ServiceUpdateWithoutAssignmentsInput, ServiceUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<ServiceCreateWithoutAssignmentsInput, ServiceUncheckedCreateWithoutAssignmentsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutAssignmentsInput, ServiceUncheckedUpdateWithoutAssignmentsInput>
  }

  export type ServiceUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    ServiceProvider?: ServiceProviderUpdateOneWithoutServicesNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ContractUpsertWithoutServiceAssignmentsInput = {
    update: XOR<ContractUpdateWithoutServiceAssignmentsInput, ContractUncheckedUpdateWithoutServiceAssignmentsInput>
    create: XOR<ContractCreateWithoutServiceAssignmentsInput, ContractUncheckedCreateWithoutServiceAssignmentsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutServiceAssignmentsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutServiceAssignmentsInput, ContractUncheckedUpdateWithoutServiceAssignmentsInput>
  }

  export type ContractUpdateWithoutServiceAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutContractsNestedInput
    documents?: DocumentUpdateManyWithoutContractNestedInput
    kpis?: KPIUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutServiceAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ClientUpsertWithoutServiceAssignmentsInput = {
    update: XOR<ClientUpdateWithoutServiceAssignmentsInput, ClientUncheckedUpdateWithoutServiceAssignmentsInput>
    create: XOR<ClientCreateWithoutServiceAssignmentsInput, ClientUncheckedCreateWithoutServiceAssignmentsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutServiceAssignmentsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutServiceAssignmentsInput, ClientUncheckedUpdateWithoutServiceAssignmentsInput>
  }

  export type ClientUpdateWithoutServiceAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    industry?: IndustryUpdateOneWithoutClientsNestedInput
    contracts?: ContractUpdateManyWithoutClientNestedInput
    documents?: DocumentUpdateManyWithoutClientNestedInput
    kpis?: KPIUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutClientNestedInput
    staff?: StaffUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutServiceAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    industryId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutClientNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClientNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutClientNestedInput
    staff?: StaffUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ServiceCreateWithoutServiceProviderInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    assignments?: ServiceAssignmentCreateNestedManyWithoutServiceInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutServiceProviderInput = {
    id?: string
    name: string
    description?: string | null
    categoryId: string
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutServiceInput
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutServiceProviderInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutServiceProviderInput, ServiceUncheckedCreateWithoutServiceProviderInput>
  }

  export type ServiceCreateManyServiceProviderInputEnvelope = {
    data: ServiceCreateManyServiceProviderInput | ServiceCreateManyServiceProviderInput[]
    skipDuplicates?: boolean
  }

  export type ServiceSessionCreateWithoutProviderInput = {
    id?: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffCreateNestedOneWithoutServiceSessionInput
    beneficiary?: BeneficiaryCreateNestedOneWithoutServiceSessionInput
    service: ServiceCreateNestedOneWithoutServiceSessionInput
    SessionFeedback?: SessionFeedbackCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionUncheckedCreateWithoutProviderInput = {
    id?: string
    serviceId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    staffId?: string | null
    beneficiaryId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionFeedback?: SessionFeedbackUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionCreateOrConnectWithoutProviderInput = {
    where: ServiceSessionWhereUniqueInput
    create: XOR<ServiceSessionCreateWithoutProviderInput, ServiceSessionUncheckedCreateWithoutProviderInput>
  }

  export type ServiceSessionCreateManyProviderInputEnvelope = {
    data: ServiceSessionCreateManyProviderInput | ServiceSessionCreateManyProviderInput[]
    skipDuplicates?: boolean
  }

  export type ServiceUpsertWithWhereUniqueWithoutServiceProviderInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutServiceProviderInput, ServiceUncheckedUpdateWithoutServiceProviderInput>
    create: XOR<ServiceCreateWithoutServiceProviderInput, ServiceUncheckedCreateWithoutServiceProviderInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutServiceProviderInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutServiceProviderInput, ServiceUncheckedUpdateWithoutServiceProviderInput>
  }

  export type ServiceUpdateManyWithWhereWithoutServiceProviderInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutServiceProviderInput>
  }

  export type ServiceSessionUpsertWithWhereUniqueWithoutProviderInput = {
    where: ServiceSessionWhereUniqueInput
    update: XOR<ServiceSessionUpdateWithoutProviderInput, ServiceSessionUncheckedUpdateWithoutProviderInput>
    create: XOR<ServiceSessionCreateWithoutProviderInput, ServiceSessionUncheckedCreateWithoutProviderInput>
  }

  export type ServiceSessionUpdateWithWhereUniqueWithoutProviderInput = {
    where: ServiceSessionWhereUniqueInput
    data: XOR<ServiceSessionUpdateWithoutProviderInput, ServiceSessionUncheckedUpdateWithoutProviderInput>
  }

  export type ServiceSessionUpdateManyWithWhereWithoutProviderInput = {
    where: ServiceSessionScalarWhereInput
    data: XOR<ServiceSessionUpdateManyMutationInput, ServiceSessionUncheckedUpdateManyWithoutProviderInput>
  }

  export type StaffCreateWithoutServiceSessionInput = {
    id?: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffProfilesInput
    profile: ProfileCreateNestedOneWithoutStaffInput
    client: ClientCreateNestedOneWithoutStaffInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutServiceSessionInput = {
    id?: string
    profileId: string
    clientId: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffCreateOrConnectWithoutServiceSessionInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutServiceSessionInput, StaffUncheckedCreateWithoutServiceSessionInput>
  }

  export type BeneficiaryCreateWithoutServiceSessionInput = {
    id?: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutBeneficiaryInput
    staff: StaffCreateNestedOneWithoutBeneficiariesInput
    guardian?: UserCreateNestedOneWithoutGuardianOfInput
    userLink?: UserCreateNestedOneWithoutBeneficiariesInput
  }

  export type BeneficiaryUncheckedCreateWithoutServiceSessionInput = {
    id?: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    staffId: string
    guardianId?: string | null
    userLinkId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BeneficiaryCreateOrConnectWithoutServiceSessionInput = {
    where: BeneficiaryWhereUniqueInput
    create: XOR<BeneficiaryCreateWithoutServiceSessionInput, BeneficiaryUncheckedCreateWithoutServiceSessionInput>
  }

  export type ServiceCreateWithoutServiceSessionInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ServiceCategoryCreateNestedOneWithoutServicesInput
    assignments?: ServiceAssignmentCreateNestedManyWithoutServiceInput
    ServiceProvider?: ServiceProviderCreateNestedOneWithoutServicesInput
  }

  export type ServiceUncheckedCreateWithoutServiceSessionInput = {
    id?: string
    name: string
    description?: string | null
    categoryId: string
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceProviderId?: string | null
    assignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutServiceSessionInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutServiceSessionInput, ServiceUncheckedCreateWithoutServiceSessionInput>
  }

  export type ServiceProviderCreateWithoutSessionsInput = {
    id?: string
    name: string
    type: $Enums.ServiceProviderType
    contactEmail?: string | null
    contactPhone?: string | null
    location?: string | null
    qualifications?: ServiceProviderCreatequalificationsInput | string[]
    specializations?: ServiceProviderCreatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    isVerified?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    status?: $Enums.WorkStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: ServiceCreateNestedManyWithoutServiceProviderInput
  }

  export type ServiceProviderUncheckedCreateWithoutSessionsInput = {
    id?: string
    name: string
    type: $Enums.ServiceProviderType
    contactEmail?: string | null
    contactPhone?: string | null
    location?: string | null
    qualifications?: ServiceProviderCreatequalificationsInput | string[]
    specializations?: ServiceProviderCreatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    isVerified?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    status?: $Enums.WorkStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    services?: ServiceUncheckedCreateNestedManyWithoutServiceProviderInput
  }

  export type ServiceProviderCreateOrConnectWithoutSessionsInput = {
    where: ServiceProviderWhereUniqueInput
    create: XOR<ServiceProviderCreateWithoutSessionsInput, ServiceProviderUncheckedCreateWithoutSessionsInput>
  }

  export type SessionFeedbackCreateWithoutSessionInput = {
    id?: string
    rating: number
    comment?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SessionFeedbackUncheckedCreateWithoutSessionInput = {
    id?: string
    rating: number
    comment?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SessionFeedbackCreateOrConnectWithoutSessionInput = {
    where: SessionFeedbackWhereUniqueInput
    create: XOR<SessionFeedbackCreateWithoutSessionInput, SessionFeedbackUncheckedCreateWithoutSessionInput>
  }

  export type SessionFeedbackCreateManySessionInputEnvelope = {
    data: SessionFeedbackCreateManySessionInput | SessionFeedbackCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type StaffUpsertWithoutServiceSessionInput = {
    update: XOR<StaffUpdateWithoutServiceSessionInput, StaffUncheckedUpdateWithoutServiceSessionInput>
    create: XOR<StaffCreateWithoutServiceSessionInput, StaffUncheckedCreateWithoutServiceSessionInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutServiceSessionInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutServiceSessionInput, StaffUncheckedUpdateWithoutServiceSessionInput>
  }

  export type StaffUpdateWithoutServiceSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffProfilesNestedInput
    profile?: ProfileUpdateOneRequiredWithoutStaffNestedInput
    client?: ClientUpdateOneRequiredWithoutStaffNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutServiceSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type BeneficiaryUpsertWithoutServiceSessionInput = {
    update: XOR<BeneficiaryUpdateWithoutServiceSessionInput, BeneficiaryUncheckedUpdateWithoutServiceSessionInput>
    create: XOR<BeneficiaryCreateWithoutServiceSessionInput, BeneficiaryUncheckedCreateWithoutServiceSessionInput>
    where?: BeneficiaryWhereInput
  }

  export type BeneficiaryUpdateToOneWithWhereWithoutServiceSessionInput = {
    where?: BeneficiaryWhereInput
    data: XOR<BeneficiaryUpdateWithoutServiceSessionInput, BeneficiaryUncheckedUpdateWithoutServiceSessionInput>
  }

  export type BeneficiaryUpdateWithoutServiceSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutBeneficiaryNestedInput
    staff?: StaffUpdateOneRequiredWithoutBeneficiariesNestedInput
    guardian?: UserUpdateOneWithoutGuardianOfNestedInput
    userLink?: UserUpdateOneWithoutBeneficiariesNestedInput
  }

  export type BeneficiaryUncheckedUpdateWithoutServiceSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    staffId?: StringFieldUpdateOperationsInput | string
    guardianId?: NullableStringFieldUpdateOperationsInput | string | null
    userLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUpsertWithoutServiceSessionInput = {
    update: XOR<ServiceUpdateWithoutServiceSessionInput, ServiceUncheckedUpdateWithoutServiceSessionInput>
    create: XOR<ServiceCreateWithoutServiceSessionInput, ServiceUncheckedCreateWithoutServiceSessionInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutServiceSessionInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutServiceSessionInput, ServiceUncheckedUpdateWithoutServiceSessionInput>
  }

  export type ServiceUpdateWithoutServiceSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    assignments?: ServiceAssignmentUpdateManyWithoutServiceNestedInput
    ServiceProvider?: ServiceProviderUpdateOneWithoutServicesNestedInput
  }

  export type ServiceUncheckedUpdateWithoutServiceSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: ServiceAssignmentUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceProviderUpsertWithoutSessionsInput = {
    update: XOR<ServiceProviderUpdateWithoutSessionsInput, ServiceProviderUncheckedUpdateWithoutSessionsInput>
    create: XOR<ServiceProviderCreateWithoutSessionsInput, ServiceProviderUncheckedCreateWithoutSessionsInput>
    where?: ServiceProviderWhereInput
  }

  export type ServiceProviderUpdateToOneWithWhereWithoutSessionsInput = {
    where?: ServiceProviderWhereInput
    data: XOR<ServiceProviderUpdateWithoutSessionsInput, ServiceProviderUncheckedUpdateWithoutSessionsInput>
  }

  export type ServiceProviderUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceProviderTypeFieldUpdateOperationsInput | $Enums.ServiceProviderType
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: ServiceProviderUpdatequalificationsInput | string[]
    specializations?: ServiceProviderUpdatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceUpdateManyWithoutServiceProviderNestedInput
  }

  export type ServiceProviderUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumServiceProviderTypeFieldUpdateOperationsInput | $Enums.ServiceProviderType
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    qualifications?: ServiceProviderUpdatequalificationsInput | string[]
    specializations?: ServiceProviderUpdatespecializationsInput | string[]
    availability?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableFloatFieldUpdateOperationsInput | number | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceUncheckedUpdateManyWithoutServiceProviderNestedInput
  }

  export type SessionFeedbackUpsertWithWhereUniqueWithoutSessionInput = {
    where: SessionFeedbackWhereUniqueInput
    update: XOR<SessionFeedbackUpdateWithoutSessionInput, SessionFeedbackUncheckedUpdateWithoutSessionInput>
    create: XOR<SessionFeedbackCreateWithoutSessionInput, SessionFeedbackUncheckedCreateWithoutSessionInput>
  }

  export type SessionFeedbackUpdateWithWhereUniqueWithoutSessionInput = {
    where: SessionFeedbackWhereUniqueInput
    data: XOR<SessionFeedbackUpdateWithoutSessionInput, SessionFeedbackUncheckedUpdateWithoutSessionInput>
  }

  export type SessionFeedbackUpdateManyWithWhereWithoutSessionInput = {
    where: SessionFeedbackScalarWhereInput
    data: XOR<SessionFeedbackUpdateManyMutationInput, SessionFeedbackUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionFeedbackScalarWhereInput = {
    AND?: SessionFeedbackScalarWhereInput | SessionFeedbackScalarWhereInput[]
    OR?: SessionFeedbackScalarWhereInput[]
    NOT?: SessionFeedbackScalarWhereInput | SessionFeedbackScalarWhereInput[]
    id?: StringFilter<"SessionFeedback"> | string
    sessionId?: StringFilter<"SessionFeedback"> | string
    rating?: IntFilter<"SessionFeedback"> | number
    comment?: StringNullableFilter<"SessionFeedback"> | string | null
    metadata?: JsonNullableFilter<"SessionFeedback">
    deletedAt?: DateTimeNullableFilter<"SessionFeedback"> | Date | string | null
    createdAt?: DateTimeFilter<"SessionFeedback"> | Date | string
  }

  export type ServiceSessionCreateWithoutSessionFeedbackInput = {
    id?: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffCreateNestedOneWithoutServiceSessionInput
    beneficiary?: BeneficiaryCreateNestedOneWithoutServiceSessionInput
    service: ServiceCreateNestedOneWithoutServiceSessionInput
    provider: ServiceProviderCreateNestedOneWithoutSessionsInput
  }

  export type ServiceSessionUncheckedCreateWithoutSessionFeedbackInput = {
    id?: string
    serviceId: string
    providerId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    staffId?: string | null
    beneficiaryId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceSessionCreateOrConnectWithoutSessionFeedbackInput = {
    where: ServiceSessionWhereUniqueInput
    create: XOR<ServiceSessionCreateWithoutSessionFeedbackInput, ServiceSessionUncheckedCreateWithoutSessionFeedbackInput>
  }

  export type ServiceSessionUpsertWithoutSessionFeedbackInput = {
    update: XOR<ServiceSessionUpdateWithoutSessionFeedbackInput, ServiceSessionUncheckedUpdateWithoutSessionFeedbackInput>
    create: XOR<ServiceSessionCreateWithoutSessionFeedbackInput, ServiceSessionUncheckedCreateWithoutSessionFeedbackInput>
    where?: ServiceSessionWhereInput
  }

  export type ServiceSessionUpdateToOneWithWhereWithoutSessionFeedbackInput = {
    where?: ServiceSessionWhereInput
    data: XOR<ServiceSessionUpdateWithoutSessionFeedbackInput, ServiceSessionUncheckedUpdateWithoutSessionFeedbackInput>
  }

  export type ServiceSessionUpdateWithoutSessionFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneWithoutServiceSessionNestedInput
    beneficiary?: BeneficiaryUpdateOneWithoutServiceSessionNestedInput
    service?: ServiceUpdateOneRequiredWithoutServiceSessionNestedInput
    provider?: ServiceProviderUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type ServiceSessionUncheckedUpdateWithoutSessionFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutStaffProfilesInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStaffProfilesInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStaffProfilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStaffProfilesInput, UserUncheckedCreateWithoutStaffProfilesInput>
  }

  export type ProfileCreateWithoutStaffInput = {
    id?: string
    fullName: string
    preferredName?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    phone?: string | null
    email?: string | null
    image?: string | null
    address?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    preferredLanguage?: $Enums.Language | null
    preferredContactMethod?: $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProfileInput
    beneficiary?: BeneficiaryCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutStaffInput = {
    id?: string
    fullName: string
    preferredName?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    phone?: string | null
    email?: string | null
    image?: string | null
    address?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    preferredLanguage?: $Enums.Language | null
    preferredContactMethod?: $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    beneficiary?: BeneficiaryUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutStaffInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutStaffInput, ProfileUncheckedCreateWithoutStaffInput>
  }

  export type ClientCreateWithoutStaffInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    industry?: IndustryCreateNestedOneWithoutClientsInput
    contracts?: ContractCreateNestedManyWithoutClientInput
    documents?: DocumentCreateNestedManyWithoutClientInput
    kpis?: KPICreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutStaffInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    industryId?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutClientInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClientInput
    kpis?: KPIUncheckedCreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutStaffInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutStaffInput, ClientUncheckedCreateWithoutStaffInput>
  }

  export type BeneficiaryCreateWithoutStaffInput = {
    id?: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile: ProfileCreateNestedOneWithoutBeneficiaryInput
    guardian?: UserCreateNestedOneWithoutGuardianOfInput
    userLink?: UserCreateNestedOneWithoutBeneficiariesInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUncheckedCreateWithoutStaffInput = {
    id?: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    guardianId?: string | null
    userLinkId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryCreateOrConnectWithoutStaffInput = {
    where: BeneficiaryWhereUniqueInput
    create: XOR<BeneficiaryCreateWithoutStaffInput, BeneficiaryUncheckedCreateWithoutStaffInput>
  }

  export type BeneficiaryCreateManyStaffInputEnvelope = {
    data: BeneficiaryCreateManyStaffInput | BeneficiaryCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type ServiceSessionCreateWithoutStaffInput = {
    id?: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    beneficiary?: BeneficiaryCreateNestedOneWithoutServiceSessionInput
    service: ServiceCreateNestedOneWithoutServiceSessionInput
    provider: ServiceProviderCreateNestedOneWithoutSessionsInput
    SessionFeedback?: SessionFeedbackCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionUncheckedCreateWithoutStaffInput = {
    id?: string
    serviceId: string
    providerId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    beneficiaryId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionFeedback?: SessionFeedbackUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionCreateOrConnectWithoutStaffInput = {
    where: ServiceSessionWhereUniqueInput
    create: XOR<ServiceSessionCreateWithoutStaffInput, ServiceSessionUncheckedCreateWithoutStaffInput>
  }

  export type ServiceSessionCreateManyStaffInputEnvelope = {
    data: ServiceSessionCreateManyStaffInput | ServiceSessionCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStaffProfilesInput = {
    update: XOR<UserUpdateWithoutStaffProfilesInput, UserUncheckedUpdateWithoutStaffProfilesInput>
    create: XOR<UserCreateWithoutStaffProfilesInput, UserUncheckedCreateWithoutStaffProfilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStaffProfilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStaffProfilesInput, UserUncheckedUpdateWithoutStaffProfilesInput>
  }

  export type UserUpdateWithoutStaffProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStaffProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProfileUpsertWithoutStaffInput = {
    update: XOR<ProfileUpdateWithoutStaffInput, ProfileUncheckedUpdateWithoutStaffInput>
    create: XOR<ProfileCreateWithoutStaffInput, ProfileUncheckedCreateWithoutStaffInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutStaffInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutStaffInput, ProfileUncheckedUpdateWithoutStaffInput>
  }

  export type ProfileUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProfileNestedInput
    beneficiary?: BeneficiaryUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiary?: BeneficiaryUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type ClientUpsertWithoutStaffInput = {
    update: XOR<ClientUpdateWithoutStaffInput, ClientUncheckedUpdateWithoutStaffInput>
    create: XOR<ClientCreateWithoutStaffInput, ClientUncheckedCreateWithoutStaffInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutStaffInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutStaffInput, ClientUncheckedUpdateWithoutStaffInput>
  }

  export type ClientUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    industry?: IndustryUpdateOneWithoutClientsNestedInput
    contracts?: ContractUpdateManyWithoutClientNestedInput
    documents?: DocumentUpdateManyWithoutClientNestedInput
    kpis?: KPIUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    industryId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutClientNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClientNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutClientNestedInput
  }

  export type BeneficiaryUpsertWithWhereUniqueWithoutStaffInput = {
    where: BeneficiaryWhereUniqueInput
    update: XOR<BeneficiaryUpdateWithoutStaffInput, BeneficiaryUncheckedUpdateWithoutStaffInput>
    create: XOR<BeneficiaryCreateWithoutStaffInput, BeneficiaryUncheckedCreateWithoutStaffInput>
  }

  export type BeneficiaryUpdateWithWhereUniqueWithoutStaffInput = {
    where: BeneficiaryWhereUniqueInput
    data: XOR<BeneficiaryUpdateWithoutStaffInput, BeneficiaryUncheckedUpdateWithoutStaffInput>
  }

  export type BeneficiaryUpdateManyWithWhereWithoutStaffInput = {
    where: BeneficiaryScalarWhereInput
    data: XOR<BeneficiaryUpdateManyMutationInput, BeneficiaryUncheckedUpdateManyWithoutStaffInput>
  }

  export type ServiceSessionUpsertWithWhereUniqueWithoutStaffInput = {
    where: ServiceSessionWhereUniqueInput
    update: XOR<ServiceSessionUpdateWithoutStaffInput, ServiceSessionUncheckedUpdateWithoutStaffInput>
    create: XOR<ServiceSessionCreateWithoutStaffInput, ServiceSessionUncheckedCreateWithoutStaffInput>
  }

  export type ServiceSessionUpdateWithWhereUniqueWithoutStaffInput = {
    where: ServiceSessionWhereUniqueInput
    data: XOR<ServiceSessionUpdateWithoutStaffInput, ServiceSessionUncheckedUpdateWithoutStaffInput>
  }

  export type ServiceSessionUpdateManyWithWhereWithoutStaffInput = {
    where: ServiceSessionScalarWhereInput
    data: XOR<ServiceSessionUpdateManyMutationInput, ServiceSessionUncheckedUpdateManyWithoutStaffInput>
  }

  export type ProfileCreateWithoutBeneficiaryInput = {
    id?: string
    fullName: string
    preferredName?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    phone?: string | null
    email?: string | null
    image?: string | null
    address?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    preferredLanguage?: $Enums.Language | null
    preferredContactMethod?: $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutProfileInput
    staff?: StaffCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutBeneficiaryInput = {
    id?: string
    fullName: string
    preferredName?: string | null
    dob?: Date | string | null
    gender?: $Enums.Gender | null
    phone?: string | null
    email?: string | null
    image?: string | null
    address?: string | null
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    preferredLanguage?: $Enums.Language | null
    preferredContactMethod?: $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffUncheckedCreateNestedOneWithoutProfileInput
  }

  export type ProfileCreateOrConnectWithoutBeneficiaryInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutBeneficiaryInput, ProfileUncheckedCreateWithoutBeneficiaryInput>
  }

  export type StaffCreateWithoutBeneficiariesInput = {
    id?: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutStaffProfilesInput
    profile: ProfileCreateNestedOneWithoutStaffInput
    client: ClientCreateNestedOneWithoutStaffInput
    ServiceSession?: ServiceSessionCreateNestedManyWithoutStaffInput
  }

  export type StaffUncheckedCreateWithoutBeneficiariesInput = {
    id?: string
    profileId: string
    clientId: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ServiceSession?: ServiceSessionUncheckedCreateNestedManyWithoutStaffInput
  }

  export type StaffCreateOrConnectWithoutBeneficiariesInput = {
    where: StaffWhereUniqueInput
    create: XOR<StaffCreateWithoutBeneficiariesInput, StaffUncheckedCreateWithoutBeneficiariesInput>
  }

  export type UserCreateWithoutGuardianOfInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGuardianOfInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGuardianOfInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGuardianOfInput, UserUncheckedCreateWithoutGuardianOfInput>
  }

  export type UserCreateWithoutBeneficiariesInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBeneficiariesInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBeneficiariesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBeneficiariesInput, UserUncheckedCreateWithoutBeneficiariesInput>
  }

  export type ServiceSessionCreateWithoutBeneficiaryInput = {
    id?: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    staff?: StaffCreateNestedOneWithoutServiceSessionInput
    service: ServiceCreateNestedOneWithoutServiceSessionInput
    provider: ServiceProviderCreateNestedOneWithoutSessionsInput
    SessionFeedback?: SessionFeedbackCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionUncheckedCreateWithoutBeneficiaryInput = {
    id?: string
    serviceId: string
    providerId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    staffId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SessionFeedback?: SessionFeedbackUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ServiceSessionCreateOrConnectWithoutBeneficiaryInput = {
    where: ServiceSessionWhereUniqueInput
    create: XOR<ServiceSessionCreateWithoutBeneficiaryInput, ServiceSessionUncheckedCreateWithoutBeneficiaryInput>
  }

  export type ServiceSessionCreateManyBeneficiaryInputEnvelope = {
    data: ServiceSessionCreateManyBeneficiaryInput | ServiceSessionCreateManyBeneficiaryInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutBeneficiaryInput = {
    update: XOR<ProfileUpdateWithoutBeneficiaryInput, ProfileUncheckedUpdateWithoutBeneficiaryInput>
    create: XOR<ProfileCreateWithoutBeneficiaryInput, ProfileUncheckedCreateWithoutBeneficiaryInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutBeneficiaryInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutBeneficiaryInput, ProfileUncheckedUpdateWithoutBeneficiaryInput>
  }

  export type ProfileUpdateWithoutBeneficiaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutProfileNestedInput
    staff?: StaffUpdateOneWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutBeneficiaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUncheckedUpdateOneWithoutProfileNestedInput
  }

  export type StaffUpsertWithoutBeneficiariesInput = {
    update: XOR<StaffUpdateWithoutBeneficiariesInput, StaffUncheckedUpdateWithoutBeneficiariesInput>
    create: XOR<StaffCreateWithoutBeneficiariesInput, StaffUncheckedCreateWithoutBeneficiariesInput>
    where?: StaffWhereInput
  }

  export type StaffUpdateToOneWithWhereWithoutBeneficiariesInput = {
    where?: StaffWhereInput
    data: XOR<StaffUpdateWithoutBeneficiariesInput, StaffUncheckedUpdateWithoutBeneficiariesInput>
  }

  export type StaffUpdateWithoutBeneficiariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffProfilesNestedInput
    profile?: ProfileUpdateOneRequiredWithoutStaffNestedInput
    client?: ClientUpdateOneRequiredWithoutStaffNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutBeneficiariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type UserUpsertWithoutGuardianOfInput = {
    update: XOR<UserUpdateWithoutGuardianOfInput, UserUncheckedUpdateWithoutGuardianOfInput>
    create: XOR<UserCreateWithoutGuardianOfInput, UserUncheckedCreateWithoutGuardianOfInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGuardianOfInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGuardianOfInput, UserUncheckedUpdateWithoutGuardianOfInput>
  }

  export type UserUpdateWithoutGuardianOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGuardianOfInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutBeneficiariesInput = {
    update: XOR<UserUpdateWithoutBeneficiariesInput, UserUncheckedUpdateWithoutBeneficiariesInput>
    create: XOR<UserCreateWithoutBeneficiariesInput, UserUncheckedCreateWithoutBeneficiariesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBeneficiariesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBeneficiariesInput, UserUncheckedUpdateWithoutBeneficiariesInput>
  }

  export type UserUpdateWithoutBeneficiariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBeneficiariesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ServiceSessionUpsertWithWhereUniqueWithoutBeneficiaryInput = {
    where: ServiceSessionWhereUniqueInput
    update: XOR<ServiceSessionUpdateWithoutBeneficiaryInput, ServiceSessionUncheckedUpdateWithoutBeneficiaryInput>
    create: XOR<ServiceSessionCreateWithoutBeneficiaryInput, ServiceSessionUncheckedCreateWithoutBeneficiaryInput>
  }

  export type ServiceSessionUpdateWithWhereUniqueWithoutBeneficiaryInput = {
    where: ServiceSessionWhereUniqueInput
    data: XOR<ServiceSessionUpdateWithoutBeneficiaryInput, ServiceSessionUncheckedUpdateWithoutBeneficiaryInput>
  }

  export type ServiceSessionUpdateManyWithWhereWithoutBeneficiaryInput = {
    where: ServiceSessionScalarWhereInput
    data: XOR<ServiceSessionUpdateManyMutationInput, ServiceSessionUncheckedUpdateManyWithoutBeneficiaryInput>
  }

  export type KpiTypeCreateWithoutKpisInput = {
    id?: string
    name: string
    description?: string | null
    weight?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KpiTypeUncheckedCreateWithoutKpisInput = {
    id?: string
    name: string
    description?: string | null
    weight?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KpiTypeCreateOrConnectWithoutKpisInput = {
    where: KpiTypeWhereUniqueInput
    create: XOR<KpiTypeCreateWithoutKpisInput, KpiTypeUncheckedCreateWithoutKpisInput>
  }

  export type KPIAssignmentCreateWithoutKpiInput = {
    id?: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contract: ContractCreateNestedOneWithoutKpiAssignmentsInput
    client?: ClientCreateNestedOneWithoutKpiAssignmentsInput
  }

  export type KPIAssignmentUncheckedCreateWithoutKpiInput = {
    id?: string
    contractId: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type KPIAssignmentCreateOrConnectWithoutKpiInput = {
    where: KPIAssignmentWhereUniqueInput
    create: XOR<KPIAssignmentCreateWithoutKpiInput, KPIAssignmentUncheckedCreateWithoutKpiInput>
  }

  export type KPIAssignmentCreateManyKpiInputEnvelope = {
    data: KPIAssignmentCreateManyKpiInput | KPIAssignmentCreateManyKpiInput[]
    skipDuplicates?: boolean
  }

  export type ClientCreateWithoutKpisInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    industry?: IndustryCreateNestedOneWithoutClientsInput
    contracts?: ContractCreateNestedManyWithoutClientInput
    documents?: DocumentCreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutClientInput
    staff?: StaffCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutKpisInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    industryId?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutClientInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutClientInput
    staff?: StaffUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutKpisInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutKpisInput, ClientUncheckedCreateWithoutKpisInput>
  }

  export type ContractCreateWithoutKpisInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutContractsInput
    documents?: DocumentCreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutKpisInput = {
    id?: string
    clientId: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutKpisInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutKpisInput, ContractUncheckedCreateWithoutKpisInput>
  }

  export type KpiTypeUpsertWithoutKpisInput = {
    update: XOR<KpiTypeUpdateWithoutKpisInput, KpiTypeUncheckedUpdateWithoutKpisInput>
    create: XOR<KpiTypeCreateWithoutKpisInput, KpiTypeUncheckedCreateWithoutKpisInput>
    where?: KpiTypeWhereInput
  }

  export type KpiTypeUpdateToOneWithWhereWithoutKpisInput = {
    where?: KpiTypeWhereInput
    data: XOR<KpiTypeUpdateWithoutKpisInput, KpiTypeUncheckedUpdateWithoutKpisInput>
  }

  export type KpiTypeUpdateWithoutKpisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KpiTypeUncheckedUpdateWithoutKpisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIAssignmentUpsertWithWhereUniqueWithoutKpiInput = {
    where: KPIAssignmentWhereUniqueInput
    update: XOR<KPIAssignmentUpdateWithoutKpiInput, KPIAssignmentUncheckedUpdateWithoutKpiInput>
    create: XOR<KPIAssignmentCreateWithoutKpiInput, KPIAssignmentUncheckedCreateWithoutKpiInput>
  }

  export type KPIAssignmentUpdateWithWhereUniqueWithoutKpiInput = {
    where: KPIAssignmentWhereUniqueInput
    data: XOR<KPIAssignmentUpdateWithoutKpiInput, KPIAssignmentUncheckedUpdateWithoutKpiInput>
  }

  export type KPIAssignmentUpdateManyWithWhereWithoutKpiInput = {
    where: KPIAssignmentScalarWhereInput
    data: XOR<KPIAssignmentUpdateManyMutationInput, KPIAssignmentUncheckedUpdateManyWithoutKpiInput>
  }

  export type ClientUpsertWithoutKpisInput = {
    update: XOR<ClientUpdateWithoutKpisInput, ClientUncheckedUpdateWithoutKpisInput>
    create: XOR<ClientCreateWithoutKpisInput, ClientUncheckedCreateWithoutKpisInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutKpisInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutKpisInput, ClientUncheckedUpdateWithoutKpisInput>
  }

  export type ClientUpdateWithoutKpisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    industry?: IndustryUpdateOneWithoutClientsNestedInput
    contracts?: ContractUpdateManyWithoutClientNestedInput
    documents?: DocumentUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutClientNestedInput
    staff?: StaffUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutKpisInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    industryId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutClientNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutClientNestedInput
    staff?: StaffUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ContractUpsertWithoutKpisInput = {
    update: XOR<ContractUpdateWithoutKpisInput, ContractUncheckedUpdateWithoutKpisInput>
    create: XOR<ContractCreateWithoutKpisInput, ContractUncheckedCreateWithoutKpisInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutKpisInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutKpisInput, ContractUncheckedUpdateWithoutKpisInput>
  }

  export type ContractUpdateWithoutKpisInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutContractsNestedInput
    documents?: DocumentUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutKpisInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type KPICreateWithoutTypeInput = {
    id?: string
    name: string
    description?: string | null
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignments?: KPIAssignmentCreateNestedManyWithoutKpiInput
    client?: ClientCreateNestedOneWithoutKpisInput
    Contract?: ContractCreateNestedOneWithoutKpisInput
  }

  export type KPIUncheckedCreateWithoutTypeInput = {
    id?: string
    name: string
    description?: string | null
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
    contractId?: string | null
    assignments?: KPIAssignmentUncheckedCreateNestedManyWithoutKpiInput
  }

  export type KPICreateOrConnectWithoutTypeInput = {
    where: KPIWhereUniqueInput
    create: XOR<KPICreateWithoutTypeInput, KPIUncheckedCreateWithoutTypeInput>
  }

  export type KPICreateManyTypeInputEnvelope = {
    data: KPICreateManyTypeInput | KPICreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type KPIUpsertWithWhereUniqueWithoutTypeInput = {
    where: KPIWhereUniqueInput
    update: XOR<KPIUpdateWithoutTypeInput, KPIUncheckedUpdateWithoutTypeInput>
    create: XOR<KPICreateWithoutTypeInput, KPIUncheckedCreateWithoutTypeInput>
  }

  export type KPIUpdateWithWhereUniqueWithoutTypeInput = {
    where: KPIWhereUniqueInput
    data: XOR<KPIUpdateWithoutTypeInput, KPIUncheckedUpdateWithoutTypeInput>
  }

  export type KPIUpdateManyWithWhereWithoutTypeInput = {
    where: KPIScalarWhereInput
    data: XOR<KPIUpdateManyMutationInput, KPIUncheckedUpdateManyWithoutTypeInput>
  }

  export type KPICreateWithoutAssignmentsInput = {
    id?: string
    name: string
    description?: string | null
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    type: KpiTypeCreateNestedOneWithoutKpisInput
    client?: ClientCreateNestedOneWithoutKpisInput
    Contract?: ContractCreateNestedOneWithoutKpisInput
  }

  export type KPIUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    description?: string | null
    typeId: string
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
    contractId?: string | null
  }

  export type KPICreateOrConnectWithoutAssignmentsInput = {
    where: KPIWhereUniqueInput
    create: XOR<KPICreateWithoutAssignmentsInput, KPIUncheckedCreateWithoutAssignmentsInput>
  }

  export type ContractCreateWithoutKpiAssignmentsInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutContractsInput
    documents?: DocumentCreateNestedManyWithoutContractInput
    kpis?: KPICreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutKpiAssignmentsInput = {
    id?: string
    clientId: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: DocumentUncheckedCreateNestedManyWithoutContractInput
    kpis?: KPIUncheckedCreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutKpiAssignmentsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutKpiAssignmentsInput, ContractUncheckedCreateWithoutKpiAssignmentsInput>
  }

  export type ClientCreateWithoutKpiAssignmentsInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    industry?: IndustryCreateNestedOneWithoutClientsInput
    contracts?: ContractCreateNestedManyWithoutClientInput
    documents?: DocumentCreateNestedManyWithoutClientInput
    kpis?: KPICreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutClientInput
    staff?: StaffCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutKpiAssignmentsInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    industryId?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutClientInput
    documents?: DocumentUncheckedCreateNestedManyWithoutClientInput
    kpis?: KPIUncheckedCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutClientInput
    staff?: StaffUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutKpiAssignmentsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutKpiAssignmentsInput, ClientUncheckedCreateWithoutKpiAssignmentsInput>
  }

  export type KPIUpsertWithoutAssignmentsInput = {
    update: XOR<KPIUpdateWithoutAssignmentsInput, KPIUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<KPICreateWithoutAssignmentsInput, KPIUncheckedCreateWithoutAssignmentsInput>
    where?: KPIWhereInput
  }

  export type KPIUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: KPIWhereInput
    data: XOR<KPIUpdateWithoutAssignmentsInput, KPIUncheckedUpdateWithoutAssignmentsInput>
  }

  export type KPIUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: KpiTypeUpdateOneRequiredWithoutKpisNestedInput
    client?: ClientUpdateOneWithoutKpisNestedInput
    Contract?: ContractUpdateOneWithoutKpisNestedInput
  }

  export type KPIUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContractUpsertWithoutKpiAssignmentsInput = {
    update: XOR<ContractUpdateWithoutKpiAssignmentsInput, ContractUncheckedUpdateWithoutKpiAssignmentsInput>
    create: XOR<ContractCreateWithoutKpiAssignmentsInput, ContractUncheckedCreateWithoutKpiAssignmentsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutKpiAssignmentsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutKpiAssignmentsInput, ContractUncheckedUpdateWithoutKpiAssignmentsInput>
  }

  export type ContractUpdateWithoutKpiAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutContractsNestedInput
    documents?: DocumentUpdateManyWithoutContractNestedInput
    kpis?: KPIUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutKpiAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ClientUpsertWithoutKpiAssignmentsInput = {
    update: XOR<ClientUpdateWithoutKpiAssignmentsInput, ClientUncheckedUpdateWithoutKpiAssignmentsInput>
    create: XOR<ClientCreateWithoutKpiAssignmentsInput, ClientUncheckedCreateWithoutKpiAssignmentsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutKpiAssignmentsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutKpiAssignmentsInput, ClientUncheckedUpdateWithoutKpiAssignmentsInput>
  }

  export type ClientUpdateWithoutKpiAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    industry?: IndustryUpdateOneWithoutClientsNestedInput
    contracts?: ContractUpdateManyWithoutClientNestedInput
    documents?: DocumentUpdateManyWithoutClientNestedInput
    kpis?: KPIUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutClientNestedInput
    staff?: StaffUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutKpiAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    industryId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutClientNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClientNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutClientNestedInput
    staff?: StaffUncheckedUpdateManyWithoutClientNestedInput
  }

  export type DocumentCreateWithoutNextVersionsInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    previousVersion?: DocumentCreateNestedOneWithoutNextVersionsInput
    uploadedBy?: UserCreateNestedOneWithoutDocumentsInput
    client?: ClientCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutNextVersionsInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    previousVersionId?: string | null
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    uploadedById?: string | null
    clientId?: string | null
    contractId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateOrConnectWithoutNextVersionsInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutNextVersionsInput, DocumentUncheckedCreateWithoutNextVersionsInput>
  }

  export type DocumentCreateWithoutPreviousVersionInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nextVersions?: DocumentCreateNestedManyWithoutPreviousVersionInput
    uploadedBy?: UserCreateNestedOneWithoutDocumentsInput
    client?: ClientCreateNestedOneWithoutDocumentsInput
    contract?: ContractCreateNestedOneWithoutDocumentsInput
  }

  export type DocumentUncheckedCreateWithoutPreviousVersionInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    uploadedById?: string | null
    clientId?: string | null
    contractId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    nextVersions?: DocumentUncheckedCreateNestedManyWithoutPreviousVersionInput
  }

  export type DocumentCreateOrConnectWithoutPreviousVersionInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutPreviousVersionInput, DocumentUncheckedCreateWithoutPreviousVersionInput>
  }

  export type DocumentCreateManyPreviousVersionInputEnvelope = {
    data: DocumentCreateManyPreviousVersionInput | DocumentCreateManyPreviousVersionInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDocumentsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDocumentsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDocumentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
  }

  export type ClientCreateWithoutDocumentsInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    industry?: IndustryCreateNestedOneWithoutClientsInput
    contracts?: ContractCreateNestedManyWithoutClientInput
    kpis?: KPICreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutClientInput
    staff?: StaffCreateNestedManyWithoutClientInput
  }

  export type ClientUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    industryId?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contracts?: ContractUncheckedCreateNestedManyWithoutClientInput
    kpis?: KPIUncheckedCreateNestedManyWithoutClientInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutClientInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutClientInput
    staff?: StaffUncheckedCreateNestedManyWithoutClientInput
  }

  export type ClientCreateOrConnectWithoutDocumentsInput = {
    where: ClientWhereUniqueInput
    create: XOR<ClientCreateWithoutDocumentsInput, ClientUncheckedCreateWithoutDocumentsInput>
  }

  export type ContractCreateWithoutDocumentsInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: ClientCreateNestedOneWithoutContractsInput
    kpis?: KPICreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentCreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentCreateNestedManyWithoutContractInput
  }

  export type ContractUncheckedCreateWithoutDocumentsInput = {
    id?: string
    clientId: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    kpis?: KPIUncheckedCreateNestedManyWithoutContractInput
    kpiAssignments?: KPIAssignmentUncheckedCreateNestedManyWithoutContractInput
    serviceAssignments?: ServiceAssignmentUncheckedCreateNestedManyWithoutContractInput
  }

  export type ContractCreateOrConnectWithoutDocumentsInput = {
    where: ContractWhereUniqueInput
    create: XOR<ContractCreateWithoutDocumentsInput, ContractUncheckedCreateWithoutDocumentsInput>
  }

  export type DocumentUpsertWithoutNextVersionsInput = {
    update: XOR<DocumentUpdateWithoutNextVersionsInput, DocumentUncheckedUpdateWithoutNextVersionsInput>
    create: XOR<DocumentCreateWithoutNextVersionsInput, DocumentUncheckedCreateWithoutNextVersionsInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutNextVersionsInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutNextVersionsInput, DocumentUncheckedUpdateWithoutNextVersionsInput>
  }

  export type DocumentUpdateWithoutNextVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: DocumentUpdateOneWithoutNextVersionsNestedInput
    uploadedBy?: UserUpdateOneWithoutDocumentsNestedInput
    client?: ClientUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutNextVersionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    previousVersionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadedById?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpsertWithWhereUniqueWithoutPreviousVersionInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutPreviousVersionInput, DocumentUncheckedUpdateWithoutPreviousVersionInput>
    create: XOR<DocumentCreateWithoutPreviousVersionInput, DocumentUncheckedCreateWithoutPreviousVersionInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutPreviousVersionInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutPreviousVersionInput, DocumentUncheckedUpdateWithoutPreviousVersionInput>
  }

  export type DocumentUpdateManyWithWhereWithoutPreviousVersionInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutPreviousVersionInput>
  }

  export type UserUpsertWithoutDocumentsInput = {
    update: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
    create: XOR<UserCreateWithoutDocumentsInput, UserUncheckedCreateWithoutDocumentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentsInput, UserUncheckedUpdateWithoutDocumentsInput>
  }

  export type UserUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClientUpsertWithoutDocumentsInput = {
    update: XOR<ClientUpdateWithoutDocumentsInput, ClientUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ClientCreateWithoutDocumentsInput, ClientUncheckedCreateWithoutDocumentsInput>
    where?: ClientWhereInput
  }

  export type ClientUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ClientWhereInput
    data: XOR<ClientUpdateWithoutDocumentsInput, ClientUncheckedUpdateWithoutDocumentsInput>
  }

  export type ClientUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    industry?: IndustryUpdateOneWithoutClientsNestedInput
    contracts?: ContractUpdateManyWithoutClientNestedInput
    kpis?: KPIUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutClientNestedInput
    staff?: StaffUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    industryId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutClientNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutClientNestedInput
    staff?: StaffUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ContractUpsertWithoutDocumentsInput = {
    update: XOR<ContractUpdateWithoutDocumentsInput, ContractUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ContractCreateWithoutDocumentsInput, ContractUncheckedCreateWithoutDocumentsInput>
    where?: ContractWhereInput
  }

  export type ContractUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ContractWhereInput
    data: XOR<ContractUpdateWithoutDocumentsInput, ContractUncheckedUpdateWithoutDocumentsInput>
  }

  export type ContractUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: ClientUpdateOneRequiredWithoutContractsNestedInput
    kpis?: KPIUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpis?: KPIUncheckedUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
    statusTransitions?: UserStatusTransitionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
    statusTransitions?: UserStatusTransitionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FieldChangeCreateWithoutEntityChangeInput = {
    id?: string
    fieldName: string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType: $Enums.ChangeType
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldChangeUncheckedCreateWithoutEntityChangeInput = {
    id?: string
    fieldName: string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType: $Enums.ChangeType
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldChangeCreateOrConnectWithoutEntityChangeInput = {
    where: FieldChangeWhereUniqueInput
    create: XOR<FieldChangeCreateWithoutEntityChangeInput, FieldChangeUncheckedCreateWithoutEntityChangeInput>
  }

  export type FieldChangeCreateManyEntityChangeInputEnvelope = {
    data: FieldChangeCreateManyEntityChangeInput | FieldChangeCreateManyEntityChangeInput[]
    skipDuplicates?: boolean
  }

  export type FieldChangeUpsertWithWhereUniqueWithoutEntityChangeInput = {
    where: FieldChangeWhereUniqueInput
    update: XOR<FieldChangeUpdateWithoutEntityChangeInput, FieldChangeUncheckedUpdateWithoutEntityChangeInput>
    create: XOR<FieldChangeCreateWithoutEntityChangeInput, FieldChangeUncheckedCreateWithoutEntityChangeInput>
  }

  export type FieldChangeUpdateWithWhereUniqueWithoutEntityChangeInput = {
    where: FieldChangeWhereUniqueInput
    data: XOR<FieldChangeUpdateWithoutEntityChangeInput, FieldChangeUncheckedUpdateWithoutEntityChangeInput>
  }

  export type FieldChangeUpdateManyWithWhereWithoutEntityChangeInput = {
    where: FieldChangeScalarWhereInput
    data: XOR<FieldChangeUpdateManyMutationInput, FieldChangeUncheckedUpdateManyWithoutEntityChangeInput>
  }

  export type FieldChangeScalarWhereInput = {
    AND?: FieldChangeScalarWhereInput | FieldChangeScalarWhereInput[]
    OR?: FieldChangeScalarWhereInput[]
    NOT?: FieldChangeScalarWhereInput | FieldChangeScalarWhereInput[]
    id?: StringFilter<"FieldChange"> | string
    entityChangeId?: StringFilter<"FieldChange"> | string
    fieldName?: StringFilter<"FieldChange"> | string
    oldValue?: JsonNullableFilter<"FieldChange">
    newValue?: JsonNullableFilter<"FieldChange">
    changeType?: EnumChangeTypeFilter<"FieldChange"> | $Enums.ChangeType
    deletedAt?: DateTimeNullableFilter<"FieldChange"> | Date | string | null
    createdAt?: DateTimeFilter<"FieldChange"> | Date | string
    updatedAt?: DateTimeFilter<"FieldChange"> | Date | string
  }

  export type EntityChangeCreateWithoutFieldChangesInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    changedAt?: Date | string
    changedBy?: string | null
    changeReason?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    deletedAt?: Date | string | null
  }

  export type EntityChangeUncheckedCreateWithoutFieldChangesInput = {
    id?: string
    entityType: string
    entityId: string
    changeType: $Enums.ChangeType
    changedAt?: Date | string
    changedBy?: string | null
    changeReason?: string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    deletedAt?: Date | string | null
  }

  export type EntityChangeCreateOrConnectWithoutFieldChangesInput = {
    where: EntityChangeWhereUniqueInput
    create: XOR<EntityChangeCreateWithoutFieldChangesInput, EntityChangeUncheckedCreateWithoutFieldChangesInput>
  }

  export type EntityChangeUpsertWithoutFieldChangesInput = {
    update: XOR<EntityChangeUpdateWithoutFieldChangesInput, EntityChangeUncheckedUpdateWithoutFieldChangesInput>
    create: XOR<EntityChangeCreateWithoutFieldChangesInput, EntityChangeUncheckedCreateWithoutFieldChangesInput>
    where?: EntityChangeWhereInput
  }

  export type EntityChangeUpdateToOneWithWhereWithoutFieldChangesInput = {
    where?: EntityChangeWhereInput
    data: XOR<EntityChangeUpdateWithoutFieldChangesInput, EntityChangeUncheckedUpdateWithoutFieldChangesInput>
  }

  export type EntityChangeUpdateWithoutFieldChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EntityChangeUncheckedUpdateWithoutFieldChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    changeReason?: NullableStringFieldUpdateOperationsInput | string | null
    oldData?: NullableJsonNullValueInput | InputJsonValue
    newData?: NullableJsonNullValueInput | InputJsonValue
    metadata?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutStatusTransitionsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    documents?: DocumentCreateNestedManyWithoutUploadedByInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    staffProfiles?: StaffCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryCreateNestedManyWithoutGuardianInput
  }

  export type UserUncheckedCreateWithoutStatusTransitionsInput = {
    id?: string
    email?: string | null
    password?: string | null
    emailVerified?: Date | string | null
    lastLoginAt?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    timezone?: string | null
    isTwoFactorEnabled?: boolean
    status?: $Enums.UserStatus
    statusChangedAt?: Date | string | null
    inactiveReason?: string | null
    suspensionReason?: string | null
    banReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    documents?: DocumentUncheckedCreateNestedManyWithoutUploadedByInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    staffProfiles?: StaffUncheckedCreateNestedManyWithoutUserInput
    beneficiaries?: BeneficiaryUncheckedCreateNestedManyWithoutUserLinkInput
    guardianOf?: BeneficiaryUncheckedCreateNestedManyWithoutGuardianInput
  }

  export type UserCreateOrConnectWithoutStatusTransitionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStatusTransitionsInput, UserUncheckedCreateWithoutStatusTransitionsInput>
  }

  export type UserUpsertWithoutStatusTransitionsInput = {
    update: XOR<UserUpdateWithoutStatusTransitionsInput, UserUncheckedUpdateWithoutStatusTransitionsInput>
    create: XOR<UserCreateWithoutStatusTransitionsInput, UserUncheckedCreateWithoutStatusTransitionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStatusTransitionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStatusTransitionsInput, UserUncheckedUpdateWithoutStatusTransitionsInput>
  }

  export type UserUpdateWithoutStatusTransitionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    documents?: DocumentUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUpdateManyWithoutGuardianNestedInput
  }

  export type UserUncheckedUpdateWithoutStatusTransitionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    statusChangedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    inactiveReason?: NullableStringFieldUpdateOperationsInput | string | null
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    banReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutUploadedByNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    staffProfiles?: StaffUncheckedUpdateManyWithoutUserNestedInput
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutUserLinkNestedInput
    guardianOf?: BeneficiaryUncheckedUpdateManyWithoutGuardianNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    lastLoginAt?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    isValid?: boolean
  }

  export type UserRoleCreateManyUserInput = {
    id?: string
    roleId: string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: $Enums.ActionType
    entityType?: string | null
    entityId?: string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type DocumentCreateManyUploadedByInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    previousVersionId?: string | null
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    clientId?: string | null
    contractId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCreateManyUserInput = {
    id?: string
    profileId: string
    clientId: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BeneficiaryCreateManyUserLinkInput = {
    id?: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    staffId: string
    guardianId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BeneficiaryCreateManyGuardianInput = {
    id?: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    staffId: string
    userLinkId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserStatusTransitionCreateManyUserInput = {
    id?: string
    fromStatus: $Enums.UserStatus
    toStatus: $Enums.UserStatus
    reason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isValid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isValid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isValid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRoleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumActionTypeFieldUpdateOperationsInput | $Enums.ActionType
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: DocumentUpdateOneWithoutNextVersionsNestedInput
    nextVersions?: DocumentUpdateManyWithoutPreviousVersionNestedInput
    client?: ClientUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    previousVersionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextVersions?: DocumentUncheckedUpdateManyWithoutPreviousVersionNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    previousVersionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutStaffNestedInput
    client?: ClientUpdateOneRequiredWithoutStaffNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutStaffNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutStaffNestedInput
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BeneficiaryUpdateWithoutUserLinkInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutBeneficiaryNestedInput
    staff?: StaffUpdateOneRequiredWithoutBeneficiariesNestedInput
    guardian?: UserUpdateOneWithoutGuardianOfNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateWithoutUserLinkInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    staffId?: StringFieldUpdateOperationsInput | string
    guardianId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateManyWithoutUserLinkInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    staffId?: StringFieldUpdateOperationsInput | string
    guardianId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BeneficiaryUpdateWithoutGuardianInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutBeneficiaryNestedInput
    staff?: StaffUpdateOneRequiredWithoutBeneficiariesNestedInput
    userLink?: UserUpdateOneWithoutBeneficiariesNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateWithoutGuardianInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    staffId?: StringFieldUpdateOperationsInput | string
    userLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateManyWithoutGuardianInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    staffId?: StringFieldUpdateOperationsInput | string
    userLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatusTransitionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    toStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatusTransitionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    toStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserStatusTransitionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    toStatus?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    changedBy?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateManyRoleInput = {
    id?: string
    permissionId: string
  }

  export type UserRoleCreateManyRoleInput = {
    id?: string
    userId: string
  }

  export type RolePermissionUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutUserRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionCreateManyPermissionInput = {
    id?: string
    roleId: string
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type ContractCreateManyClientInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    renewalDate?: Date | string | null
    billingRate: number
    isRenewable?: boolean
    isAutoRenew?: boolean
    paymentStatus?: $Enums.PaymentStatus
    paymentFrequency?: string | null
    paymentTerms?: string | null
    currency?: string | null
    lastBillingDate?: Date | string | null
    nextBillingDate?: Date | string | null
    documentUrl?: string | null
    status?: $Enums.ContractStatus
    signedBy?: string | null
    signedAt?: Date | string | null
    terminationReason?: string | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentCreateManyClientInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    previousVersionId?: string | null
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    uploadedById?: string | null
    contractId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPICreateManyClientInput = {
    id?: string
    name: string
    description?: string | null
    typeId: string
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    contractId?: string | null
  }

  export type KPIAssignmentCreateManyClientInput = {
    id?: string
    kpiId: string
    contractId: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceAssignmentCreateManyClientInput = {
    id?: string
    serviceId: string
    contractId: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffCreateManyClientInput = {
    id?: string
    profileId: string
    role: $Enums.StaffRole
    startDate: Date | string
    endDate?: Date | string | null
    status?: $Enums.WorkStatus
    qualifications?: StaffCreatequalificationsInput | string[]
    specializations?: StaffCreatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContractUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUpdateManyWithoutContractNestedInput
    kpis?: KPIUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: DocumentUncheckedUpdateManyWithoutContractNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutContractNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutContractNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutContractNestedInput
  }

  export type ContractUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    billingRate?: FloatFieldUpdateOperationsInput | number
    isRenewable?: BoolFieldUpdateOperationsInput | boolean
    isAutoRenew?: BoolFieldUpdateOperationsInput | boolean
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentFrequency?: NullableStringFieldUpdateOperationsInput | string | null
    paymentTerms?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    lastBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nextBillingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
    signedBy?: NullableStringFieldUpdateOperationsInput | string | null
    signedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    terminationReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: DocumentUpdateOneWithoutNextVersionsNestedInput
    nextVersions?: DocumentUpdateManyWithoutPreviousVersionNestedInput
    uploadedBy?: UserUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    previousVersionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadedById?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextVersions?: DocumentUncheckedUpdateManyWithoutPreviousVersionNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    previousVersionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadedById?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: KpiTypeUpdateOneRequiredWithoutKpisNestedInput
    assignments?: KPIAssignmentUpdateManyWithoutKpiNestedInput
    Contract?: ContractUpdateOneWithoutKpisNestedInput
  }

  export type KPIUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: KPIAssignmentUncheckedUpdateManyWithoutKpiNestedInput
  }

  export type KPIUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KPIAssignmentUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpi?: KPIUpdateOneRequiredWithoutAssignmentsNestedInput
    contract?: ContractUpdateOneRequiredWithoutKpiAssignmentsNestedInput
  }

  export type KPIAssignmentUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    kpiId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIAssignmentUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    kpiId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceAssignmentUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutAssignmentsNestedInput
    contract?: ContractUpdateOneRequiredWithoutServiceAssignmentsNestedInput
  }

  export type ServiceAssignmentUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceAssignmentUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutStaffProfilesNestedInput
    profile?: ProfileUpdateOneRequiredWithoutStaffNestedInput
    beneficiaries?: BeneficiaryUpdateManyWithoutStaffNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiaries?: BeneficiaryUncheckedUpdateManyWithoutStaffNestedInput
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type StaffUncheckedUpdateManyWithoutClientInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    role?: EnumStaffRoleFieldUpdateOperationsInput | $Enums.StaffRole
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumWorkStatusFieldUpdateOperationsInput | $Enums.WorkStatus
    qualifications?: StaffUpdatequalificationsInput | string[]
    specializations?: StaffUpdatespecializationsInput | string[]
    preferredWorkingHours?: NullableJsonNullValueInput | InputJsonValue
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IndustryCreateManyParentInput = {
    id?: string
    name: string
    code?: string | null
    description?: string | null
    externalId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientCreateManyIndustryInput = {
    id?: string
    name: string
    email?: string | null
    phone?: string | null
    website?: string | null
    address?: string | null
    billingAddress?: string | null
    taxId?: string | null
    contactPerson?: string | null
    contactEmail?: string | null
    contactPhone?: string | null
    status?: $Enums.BaseStatus
    preferredContactMethod?: $Enums.ContactMethod | null
    timezone?: string | null
    isVerified?: boolean
    notes?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IndustryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: IndustryUpdateManyWithoutParentNestedInput
    clients?: ClientUpdateManyWithoutIndustryNestedInput
  }

  export type IndustryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: IndustryUncheckedUpdateManyWithoutParentNestedInput
    clients?: ClientUncheckedUpdateManyWithoutIndustryNestedInput
  }

  export type IndustryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientUpdateWithoutIndustryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUpdateManyWithoutClientNestedInput
    documents?: DocumentUpdateManyWithoutClientNestedInput
    kpis?: KPIUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUpdateManyWithoutClientNestedInput
    staff?: StaffUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateWithoutIndustryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contracts?: ContractUncheckedUpdateManyWithoutClientNestedInput
    documents?: DocumentUncheckedUpdateManyWithoutClientNestedInput
    kpis?: KPIUncheckedUpdateManyWithoutClientNestedInput
    kpiAssignments?: KPIAssignmentUncheckedUpdateManyWithoutClientNestedInput
    serviceAssignments?: ServiceAssignmentUncheckedUpdateManyWithoutClientNestedInput
    staff?: StaffUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientUncheckedUpdateManyWithoutIndustryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    contactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    contactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    preferredContactMethod?: NullableEnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyContractInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    previousVersionId?: string | null
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    uploadedById?: string | null
    clientId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KPICreateManyContractInput = {
    id?: string
    name: string
    description?: string | null
    typeId: string
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type KPIAssignmentCreateManyContractInput = {
    id?: string
    kpiId: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type ServiceAssignmentCreateManyContractInput = {
    id?: string
    serviceId: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type DocumentUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previousVersion?: DocumentUpdateOneWithoutNextVersionsNestedInput
    nextVersions?: DocumentUpdateManyWithoutPreviousVersionNestedInput
    uploadedBy?: UserUpdateOneWithoutDocumentsNestedInput
    client?: ClientUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    previousVersionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadedById?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextVersions?: DocumentUncheckedUpdateManyWithoutPreviousVersionNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    previousVersionId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadedById?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: KpiTypeUpdateOneRequiredWithoutKpisNestedInput
    assignments?: KPIAssignmentUpdateManyWithoutKpiNestedInput
    client?: ClientUpdateOneWithoutKpisNestedInput
  }

  export type KPIUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: KPIAssignmentUncheckedUpdateManyWithoutKpiNestedInput
  }

  export type KPIUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KPIAssignmentUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    kpi?: KPIUpdateOneRequiredWithoutAssignmentsNestedInput
    client?: ClientUpdateOneWithoutKpiAssignmentsNestedInput
  }

  export type KPIAssignmentUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    kpiId?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KPIAssignmentUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    kpiId?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceAssignmentUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceUpdateOneRequiredWithoutAssignmentsNestedInput
    client?: ClientUpdateOneWithoutServiceAssignmentsNestedInput
  }

  export type ServiceAssignmentUncheckedUpdateWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceAssignmentUncheckedUpdateManyWithoutContractInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceCreateManyCategoryInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serviceProviderId?: string | null
  }

  export type ServiceUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: ServiceAssignmentUpdateManyWithoutServiceNestedInput
    ServiceProvider?: ServiceProviderUpdateOneWithoutServicesNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceProviderId?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: ServiceAssignmentUncheckedUpdateManyWithoutServiceNestedInput
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceProviderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceAssignmentCreateManyServiceInput = {
    id?: string
    contractId: string
    status?: $Enums.AssignmentStatus
    startDate: Date | string
    endDate?: Date | string | null
    frequency: $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type ServiceSessionCreateManyServiceInput = {
    id?: string
    providerId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    staffId?: string | null
    beneficiaryId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceAssignmentUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutServiceAssignmentsNestedInput
    client?: ClientUpdateOneWithoutServiceAssignmentsNestedInput
  }

  export type ServiceAssignmentUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceAssignmentUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ServiceSessionUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneWithoutServiceSessionNestedInput
    beneficiary?: BeneficiaryUpdateOneWithoutServiceSessionNestedInput
    provider?: ServiceProviderUpdateOneRequiredWithoutSessionsNestedInput
    SessionFeedback?: SessionFeedbackUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionFeedback?: SessionFeedbackUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCreateManyServiceProviderInput = {
    id?: string
    name: string
    description?: string | null
    categoryId: string
    status?: $Enums.BaseStatus
    duration?: number | null
    capacity?: number | null
    prerequisites?: string | null
    isPublic?: boolean
    price?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceSessionCreateManyProviderInput = {
    id?: string
    serviceId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    staffId?: string | null
    beneficiaryId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceUpdateWithoutServiceProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ServiceCategoryUpdateOneRequiredWithoutServicesNestedInput
    assignments?: ServiceAssignmentUpdateManyWithoutServiceNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutServiceProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: ServiceAssignmentUncheckedUpdateManyWithoutServiceNestedInput
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateManyWithoutServiceProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    prerequisites?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceSessionUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneWithoutServiceSessionNestedInput
    beneficiary?: BeneficiaryUpdateOneWithoutServiceSessionNestedInput
    service?: ServiceUpdateOneRequiredWithoutServiceSessionNestedInput
    SessionFeedback?: SessionFeedbackUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionUncheckedUpdateWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionFeedback?: SessionFeedbackUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionUncheckedUpdateManyWithoutProviderInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFeedbackCreateManySessionInput = {
    id?: string
    rating: number
    comment?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type SessionFeedbackUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFeedbackUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFeedbackUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BeneficiaryCreateManyStaffInput = {
    id?: string
    profileId: string
    relation: $Enums.RelationType
    isStaffLink?: boolean
    guardianId?: string | null
    userLinkId?: string | null
    status?: $Enums.BaseStatus
    lastServiceDate?: Date | string | null
    preferredLanguage?: $Enums.Language | null
    notes?: string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceSessionCreateManyStaffInput = {
    id?: string
    serviceId: string
    providerId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    beneficiaryId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BeneficiaryUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: ProfileUpdateOneRequiredWithoutBeneficiaryNestedInput
    guardian?: UserUpdateOneWithoutGuardianOfNestedInput
    userLink?: UserUpdateOneWithoutBeneficiariesNestedInput
    ServiceSession?: ServiceSessionUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    guardianId?: NullableStringFieldUpdateOperationsInput | string | null
    userLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceSession?: ServiceSessionUncheckedUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    profileId?: StringFieldUpdateOperationsInput | string
    relation?: EnumRelationTypeFieldUpdateOperationsInput | $Enums.RelationType
    isStaffLink?: BoolFieldUpdateOperationsInput | boolean
    guardianId?: NullableStringFieldUpdateOperationsInput | string | null
    userLinkId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBaseStatusFieldUpdateOperationsInput | $Enums.BaseStatus
    lastServiceDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    preferredLanguage?: NullableEnumLanguageFieldUpdateOperationsInput | $Enums.Language | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceSessionUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiary?: BeneficiaryUpdateOneWithoutServiceSessionNestedInput
    service?: ServiceUpdateOneRequiredWithoutServiceSessionNestedInput
    provider?: ServiceProviderUpdateOneRequiredWithoutSessionsNestedInput
    SessionFeedback?: SessionFeedbackUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beneficiaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionFeedback?: SessionFeedbackUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    beneficiaryId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceSessionCreateManyBeneficiaryInput = {
    id?: string
    serviceId: string
    providerId: string
    scheduledAt: Date | string
    completedAt?: Date | string | null
    status?: $Enums.SessionStatus
    notes?: string | null
    feedback?: string | null
    duration?: number | null
    location?: string | null
    cancellationReason?: string | null
    rescheduleCount?: number
    isGroupSession?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    staffId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceSessionUpdateWithoutBeneficiaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: StaffUpdateOneWithoutServiceSessionNestedInput
    service?: ServiceUpdateOneRequiredWithoutServiceSessionNestedInput
    provider?: ServiceProviderUpdateOneRequiredWithoutSessionsNestedInput
    SessionFeedback?: SessionFeedbackUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionUncheckedUpdateWithoutBeneficiaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SessionFeedback?: SessionFeedbackUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ServiceSessionUncheckedUpdateManyWithoutBeneficiaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumSessionStatusFieldUpdateOperationsInput | $Enums.SessionStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationReason?: NullableStringFieldUpdateOperationsInput | string | null
    rescheduleCount?: IntFieldUpdateOperationsInput | number
    isGroupSession?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KPIAssignmentCreateManyKpiInput = {
    id?: string
    contractId: string
    targetValue?: string | null
    frequency: $Enums.Frequency
    status: $Enums.AssignmentStatus
    notes?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
  }

  export type KPIAssignmentUpdateWithoutKpiInput = {
    id?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contract?: ContractUpdateOneRequiredWithoutKpiAssignmentsNestedInput
    client?: ClientUpdateOneWithoutKpiAssignmentsNestedInput
  }

  export type KPIAssignmentUncheckedUpdateWithoutKpiInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KPIAssignmentUncheckedUpdateManyWithoutKpiInput = {
    id?: StringFieldUpdateOperationsInput | string
    contractId?: StringFieldUpdateOperationsInput | string
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: EnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KPICreateManyTypeInput = {
    id?: string
    name: string
    description?: string | null
    unit: string
    unitType: $Enums.Unit
    targetValue?: string | null
    isPublic?: boolean
    calculationMethod?: string | null
    frequency?: $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    clientId?: string | null
    contractId?: string | null
  }

  export type KPIUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: KPIAssignmentUpdateManyWithoutKpiNestedInput
    client?: ClientUpdateOneWithoutKpisNestedInput
    Contract?: ContractUpdateOneWithoutKpisNestedInput
  }

  export type KPIUncheckedUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    assignments?: KPIAssignmentUncheckedUpdateManyWithoutKpiNestedInput
  }

  export type KPIUncheckedUpdateManyWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    unitType?: EnumUnitFieldUpdateOperationsInput | $Enums.Unit
    targetValue?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    calculationMethod?: NullableStringFieldUpdateOperationsInput | string | null
    frequency?: NullableEnumFrequencyFieldUpdateOperationsInput | $Enums.Frequency | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateManyPreviousVersionInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.DocumentType
    url: string
    fileSize?: number | null
    fileType?: string | null
    version?: number
    isLatest?: boolean
    status?: $Enums.DocumentStatus
    expiryDate?: Date | string | null
    isConfidential?: boolean
    tags?: DocumentCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: Date | string | null
    uploadedById?: string | null
    clientId?: string | null
    contractId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DocumentUpdateWithoutPreviousVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextVersions?: DocumentUpdateManyWithoutPreviousVersionNestedInput
    uploadedBy?: UserUpdateOneWithoutDocumentsNestedInput
    client?: ClientUpdateOneWithoutDocumentsNestedInput
    contract?: ContractUpdateOneWithoutDocumentsNestedInput
  }

  export type DocumentUncheckedUpdateWithoutPreviousVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadedById?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nextVersions?: DocumentUncheckedUpdateManyWithoutPreviousVersionNestedInput
  }

  export type DocumentUncheckedUpdateManyWithoutPreviousVersionInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    url?: StringFieldUpdateOperationsInput | string
    fileSize?: NullableIntFieldUpdateOperationsInput | number | null
    fileType?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    isLatest?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDocumentStatusFieldUpdateOperationsInput | $Enums.DocumentStatus
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfidential?: BoolFieldUpdateOperationsInput | boolean
    tags?: DocumentUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uploadedById?: NullableStringFieldUpdateOperationsInput | string | null
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    contractId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldChangeCreateManyEntityChangeInput = {
    id?: string
    fieldName: string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType: $Enums.ChangeType
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldChangeUpdateWithoutEntityChangeInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldChangeUncheckedUpdateWithoutEntityChangeInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldChangeUncheckedUpdateManyWithoutEntityChangeInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    oldValue?: NullableJsonNullValueInput | InputJsonValue
    newValue?: NullableJsonNullValueInput | InputJsonValue
    changeType?: EnumChangeTypeFieldUpdateOperationsInput | $Enums.ChangeType
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}